# encoding: utf-8
# module renderdoc
# from D:\reverse_plugin\renderdoc_src\x64\Release\pymodules\renderdoc.pyd
# by generator 1.147
# no doc

# imports
import enum as __enum

from typing import List, Tuple, Callable, Any


from .ResourceId import ResourceId

class ResourceDescription(): # skipped bases: <class 'SwigPyObject'>
    """ A description of any type of resource. """
    def SetCustomName(self, givenName: str): # real signature unknown; restored from __doc__
        """
        SetCustomName(givenName)
        
        Utility function for setting up a custom name to overwrite the auto-generated one.
        
        :param str givenName: The custom name to use.
        """
        pass

    def __eq__(self, *args, **kwargs): # real signature unknown
        """ Return self==value. """
        pass

    def __ge__(self, *args, **kwargs): # real signature unknown
        """ Return self>=value. """
        pass

    def __gt__(self, *args, **kwargs): # real signature unknown
        """ Return self>value. """
        pass

    def __hash__(self, *args, **kwargs): # real signature unknown
        """ Return hash(self). """
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __le__(self, *args, **kwargs): # real signature unknown
        """ Return self<=value. """
        pass

    def __lt__(self, *args, **kwargs): # real signature unknown
        """ Return self<value. """
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    def __ne__(self, *args, **kwargs): # real signature unknown
        """ Return self!=value. """
        pass

    @property
    def autogeneratedName(self):
        """
``True`` if :data:`name` was just autogenerated based on the ID, not assigned a
human-readable name by the application.

"""
        pass

    @autogeneratedName.setter
    def autogeneratedName(self, value):
        pass

    @property
    def derivedResources(self) -> List[ResourceId]:
        """
The :class:`ResourceId` of any derived resources, such as resource views or aliases.

Can be empty if there are no derived resources.

This is the inverse of :data:`parentResources` in a potentially many:many relationship, but
typically it is one parent to many derived.

:type: List[ResourceId]

"""
        pass

    @derivedResources.setter
    def derivedResources(self, value: List[ResourceId]):
        pass

    @property
    def initialisationChunks(self) -> List[int]:
        """
The chunk indices in the structured file that initialised this resource.

This will at least contain the first call that created it, but may contain other auxilliary calls.

:type: List[int]

"""
        pass

    @initialisationChunks.setter
    def initialisationChunks(self, value: List[int]):
        pass

    @property
    def name(self):
        """The name given to this resource."""
        pass

    @name.setter
    def name(self, value):
        pass

    @property
    def parentResources(self) -> List[ResourceId]:
        """
The :class:`ResourceId` of parent resources, of which this is derived.

Can be empty if there are no parent resources.

This is the inverse of :data:`derivedResources` in a potentially many:many relationship, but
typically it is one parent to many derived.

:type: List[ResourceId]

"""
        pass

    @parentResources.setter
    def parentResources(self, value: List[ResourceId]):
        pass

    @property
    def resourceId(self):
        """The unique :class:`ResourceId` that identifies this resource."""
        pass

    @resourceId.setter
    def resourceId(self, value):
        pass

    this = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    thisown = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    @property
    def type(self):
        """The :class:`ResourceType` of the resource."""
        pass

    @type.setter
    def type(self, value):
        pass


    __dict__ = None # (!) real value is "mappingproxy({'this': <attribute 'this' of 'SwigPyObject' objects>, 'thisown': <attribute 'thisown' of 'SwigPyObject' objects>, '__new__': <built-in method __new__ of SwigPyObjectType object at 0x00007FFE1885ACB0>, '__hash__': <slot wrapper '__hash__' of 'renderdoc.ResourceDescription' objects>, '__lt__': <slot wrapper '__lt__' of 'renderdoc.ResourceDescription' objects>, '__le__': <slot wrapper '__le__' of 'renderdoc.ResourceDescription' objects>, '__eq__': <slot wrapper '__eq__' of 'renderdoc.ResourceDescription' objects>, '__ne__': <slot wrapper '__ne__' of 'renderdoc.ResourceDescription' objects>, '__gt__': <slot wrapper '__gt__' of 'renderdoc.ResourceDescription' objects>, '__ge__': <slot wrapper '__ge__' of 'renderdoc.ResourceDescription' objects>, '__init__': <slot wrapper '__init__' of 'renderdoc.ResourceDescription' objects>, 'SetCustomName': <method 'SetCustomName' of 'renderdoc.ResourceDescription' objects>, 'name': <attribute 'name' of 'renderdoc.ResourceDescription' objects>, 'resourceId': <attribute 'resourceId' of 'renderdoc.ResourceDescription' objects>, 'initialisationChunks': <attribute 'initialisationChunks' of 'renderdoc.ResourceDescription' objects>, '__dict__': <attribute '__dict__' of 'renderdoc.ResourceDescription' objects>, 'derivedResources': <attribute 'derivedResources' of 'renderdoc.ResourceDescription' objects>, 'parentResources': <attribute 'parentResources' of 'renderdoc.ResourceDescription' objects>, 'type': <attribute 'type' of 'renderdoc.ResourceDescription' objects>, 'autogeneratedName': <attribute 'autogeneratedName' of 'renderdoc.ResourceDescription' objects>, '__doc__': 'A description of any type of resource.'})"


