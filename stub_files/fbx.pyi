# The PEP 484 type hints stub file for the fbx module.
#
# Generated by SIP 6.6.2
#
# Copyright (C) 2023 Autodesk, Inc. and/or its licensors.
# All Rights Reserved.
# 
# The coded instructions, statements, computer programs, and/or related material 
# (collectively the "Data") in these files contain unpublished information 
# proprietary to Autodesk, Inc. and/or its licensors, which is protected by 
# Canada and United States of America federal copyright law and by international 
# treaties. 
# 
# The Data may not be disclosed or distributed to third parties, in whole or in
# part, without the prior written consent of Autodesk, Inc. ("Autodesk").
# 
# THE DATA IS PROVIDED "AS IS" AND WITHOUT WARRANTY.
# ALL WARRANTIES ARE EXPRESSLY EXCLUDED AND DISCLAIMED. AUTODESK MAKES NO
# WARRANTY OF ANY KIND WITH RESPECT TO THE DATA, EXPRESS, IMPLIED OR ARISING
# BY CUSTOM OR TRADE USAGE, AND DISCLAIMS ANY IMPLIED WARRANTIES OF TITLE, 
# NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR USE. 
# WITHOUT LIMITING THE FOREGOING, AUTODESK DOES NOT WARRANT THAT THE OPERATION
# OF THE DATA WILL BE UNINTERRUPTED OR ERROR FREE. 
# 
# IN NO EVENT SHALL AUTODESK, ITS AFFILIATES, PARENT COMPANIES, LICENSORS
# OR SUPPLIERS ("AUTODESK GROUP") BE LIABLE FOR ANY LOSSES, DAMAGES OR EXPENSES
# OF ANY KIND (INCLUDING WITHOUT LIMITATION PUNITIVE OR MULTIPLE DAMAGES OR OTHER
# SPECIAL, DIRECT, INDIRECT, EXEMPLARY, INCIDENTAL, LOSS OF PROFITS, REVENUE
# OR DATA, COST OF COVER OR CONSEQUENTIAL LOSSES OR DAMAGES OF ANY KIND),
# HOWEVER CAUSED, AND REGARDLESS OF THE THEORY OF LIABILITY, WHETHER DERIVED
# FROM CONTRACT, TORT (INCLUDING, BUT NOT LIMITED TO, NEGLIGENCE), OR OTHERWISE,
# ARISING OUT OF OR RELATING TO THE DATA OR ITS USE OR ANY OTHER PERFORMANCE,
# WHETHER OR NOT AUTODESK HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS
# OR DAMAGE. 


import enum
import typing

import sip  # type: ignore


class EFbxQuatInterpMode(enum.Enum):
    eQuatInterpOff = ... # type: EFbxQuatInterpMode
    eQuatInterpClassic = ... # type: EFbxQuatInterpMode
    eQuatInterpSlerp = ... # type: EFbxQuatInterpMode
    eQuatInterpCubic = ... # type: EFbxQuatInterpMode
    eQuatInterpTangentDependent = ... # type: EFbxQuatInterpMode
    eQuatInterpCount = ... # type: EFbxQuatInterpMode


class EFbxRotationOrder(enum.Enum):
    eEulerXYZ = ... # type: EFbxRotationOrder
    eEulerXZY = ... # type: EFbxRotationOrder
    eEulerYZX = ... # type: EFbxRotationOrder
    eEulerYXZ = ... # type: EFbxRotationOrder
    eEulerZXY = ... # type: EFbxRotationOrder
    eEulerZYX = ... # type: EFbxRotationOrder
    eSphericXYZ = ... # type: EFbxRotationOrder


class EFbxType(enum.Enum):
    eFbxUndefined = ... # type: EFbxType
    eFbxChar = ... # type: EFbxType
    eFbxUChar = ... # type: EFbxType
    eFbxShort = ... # type: EFbxType
    eFbxUShort = ... # type: EFbxType
    eFbxUInt = ... # type: EFbxType
    eFbxLongLong = ... # type: EFbxType
    eFbxULongLong = ... # type: EFbxType
    eFbxHalfFloat = ... # type: EFbxType
    eFbxBool = ... # type: EFbxType
    eFbxInt = ... # type: EFbxType
    eFbxFloat = ... # type: EFbxType
    eFbxDouble = ... # type: EFbxType
    eFbxDouble2 = ... # type: EFbxType
    eFbxDouble3 = ... # type: EFbxType
    eFbxDouble4 = ... # type: EFbxType
    eFbxDouble4x4 = ... # type: EFbxType
    eFbxEnum = ... # type: EFbxType
    eFbxString = ... # type: EFbxType
    eFbxTime = ... # type: EFbxType
    eFbxReference = ... # type: EFbxType
    eFbxBlob = ... # type: EFbxType
    eFbxDistance = ... # type: EFbxType
    eFbxDateTime = ... # type: EFbxType
    eFbxTypeCount = ... # type: EFbxType


class FbxBlob(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pSize: int) -> None: ...
    @typing.overload
    def __init__(self, pRHS: 'FbxBlob') -> None: ...

    def Clear(self) -> None: ...
    def Size(self) -> int: ...
    def Access(self) -> sip.voidptr: ...
    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def Assign(self, a0: sip.voidptr, a1: int) -> None: ...


class FbxDistance(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pValue: float, pUnit: 'FbxSystemUnit') -> None: ...
    @typing.overload
    def __init__(self, pValue: float, pUnit: str) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxDistance') -> None: ...

    def valueAs(self, pUnit: 'FbxSystemUnit') -> float: ...
    def internalValue(self) -> float: ...
    def value(self) -> float: ...
    def unit(self) -> 'FbxSystemUnit': ...
    def unitName(self) -> 'FbxString': ...
    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...


class FbxDateTime(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pDay: int, pMonth: int, pYear: int, pHour: int, pMin: int, pSec: int, pMillisecond: int = ...) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxDateTime') -> None: ...

    @staticmethod
    def currentDateTimeGMT() -> 'FbxDateTime': ...
    def fromString(self, a0: str) -> bool: ...
    def toString(self) -> 'FbxString': ...
    def setTime(self, pHour: int, pMin: int, pSec: int, pMillisecond: int = ...) -> None: ...
    def isValid(self) -> bool: ...
    def Clear(self) -> None: ...
    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...


class FbxDouble2(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pData0: float, pData1: float) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxDouble2') -> None: ...

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def __getitem__(self, pIndex: int) -> float: ...


class FbxDouble3(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pData0: float, pData1: float, pData2: float) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxDouble3') -> None: ...

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def __getitem__(self, pIndex: int) -> float: ...


class FbxDouble4(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pData0: float, pData1: float, pData2: float, pData3: float) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxDouble4') -> None: ...

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def __getitem__(self, pIndex: int) -> float: ...


class FbxDouble4x4(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pData0: FbxDouble4, pData1: FbxDouble4, pData2: FbxDouble4, pData3: FbxDouble4) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxDouble4x4') -> None: ...

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def __getitem__(self, pIndex: int) -> FbxDouble4: ...


class FbxReference(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxReference') -> None: ...


class FbxPathUtils(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPathUtils') -> None: ...

    @staticmethod
    def IsEmpty(pFolderPathUTF8: str) -> bool: ...
    @staticmethod
    def Delete(pFolderPathUTF8: str) -> bool: ...
    @staticmethod
    def Create(pFolderPathUTF8: str) -> bool: ...
    @staticmethod
    def Exist(pFolderPathUTF8: str) -> bool: ...
    @staticmethod
    def GenerateFileName(pFolder: str, pPrefix: str) -> 'FbxString': ...
    @staticmethod
    def Clean(pPath: str) -> 'FbxString': ...
    @staticmethod
    def Resolve(pRelPath: str) -> 'FbxString': ...
    @staticmethod
    def GetRelativeFilePath(pRootPath: str, pNewFilePath: str) -> 'FbxString': ...
    @staticmethod
    def GetRelativePath(pRootPath: str, pNewPath: str) -> 'FbxString': ...
    @staticmethod
    def IsRelative(pPath: str) -> bool: ...
    @staticmethod
    def ChangeExtension(pFilePath: str, pExtension: str) -> 'FbxString': ...
    @staticmethod
    def GetExtensionName(pFilePath: str) -> 'FbxString': ...
    @staticmethod
    def GetFileName(pFilePath: str, pWithExtension: bool = ...) -> 'FbxString': ...
    @staticmethod
    def GetFolderName(pFilePath: str) -> 'FbxString': ...
    @staticmethod
    def Bind(pRootPath: str, pFilePath: str, pCleanPath: bool = ...) -> 'FbxString': ...


class FbxFolder(sip.wrapper):

    class EEntryType(enum.Enum):
        eRegularEntry = ... # type: FbxFolder.EEntryType
        eFolderEntry = ... # type: FbxFolder.EEntryType

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxFolder') -> None: ...

    def IsOpen(self) -> bool: ...
    def Close(self) -> None: ...
    def GetEntryExtension(self) -> str: ...
    def GetEntryName(self) -> 'FbxString': ...
    def GetEntryType(self) -> 'FbxFolder.EEntryType': ...
    def Next(self) -> bool: ...
    def Open(self, pDirName: str) -> bool: ...


class FbxString(sip.wrapper):

    class EPaddingType(enum.Enum):
        eRight = ... # type: FbxString.EPaddingType
        eLeft = ... # type: FbxString.EPaddingType
        eBoth = ... # type: FbxString.EPaddingType

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pStr: 'FbxString') -> None: ...
    @typing.overload
    def __init__(self, pStr: str) -> None: ...
    @typing.overload
    def __init__(self, pFloat: float) -> None: ...

    def __add__(self, pKStr1: 'FbxString', pKStr2: 'FbxString') -> 'FbxString': ...
    def __repr__(self) -> typing.Any: ...
    def __str__(self) -> typing.Any: ...
    def __iadd__(self, s: 'FbxString') -> 'FbxString': ...
    @typing.overload
    def __ne__(self, other: object): ...
    @typing.overload
    def __ne__(self, other: object): ...
    @typing.overload
    def __eq__(self, other: object): ...
    @typing.overload
    def __eq__(self, other: object): ...
    def __getitem__(self, pIndex: int) -> str: ...
    def Right(self, pCount: int) -> 'FbxString': ...
    def Left(self, pCount: int) -> 'FbxString': ...
    @typing.overload
    def Mid(self, pFirst: int, pCount: int) -> 'FbxString': ...
    @typing.overload
    def Mid(self, pFirst: int) -> 'FbxString': ...
    def Lower(self) -> 'FbxString': ...
    def Upper(self) -> 'FbxString': ...
    def GetToken(self, pTokenIndex: int, pSpans: str) -> 'FbxString': ...
    def GetTokenCount(self, pSpans: str) -> int: ...
    def UnPad(self, pPadding: 'FbxString.EPaddingType') -> 'FbxString': ...
    def Pad(self, pPadding: 'FbxString.EPaddingType', pLen: int, pCar: str = ...) -> 'FbxString': ...
    @typing.overload
    def ReplaceAll(self, pFind: str, pReplaceBy: str) -> bool: ...
    @typing.overload
    def ReplaceAll(self, pFind: str, pReplaceBy: str) -> bool: ...
    def FindAndReplace(self, pFind: str, pReplaceBy: str, pStartPosition: int = ...) -> bool: ...
    def FindOneOf(self, pStrCharSet: str, pStartPosition: int = ...) -> int: ...
    def ReverseFind(self, pChar: str) -> int: ...
    @typing.overload
    def Find(self, pChar: str, pStartPosition: int = ...) -> int: ...
    @typing.overload
    def Find(self, pStrSub: str, pStartPosition: int = ...) -> int: ...
    def Copy(self, pStr: str, pLength: int) -> 'FbxString': ...
    def CompareNoCase(self, pStr: str) -> int: ...
    def Compare(self, pStr: str) -> int: ...
    def Append(self, pStr: str, pLength: int) -> 'FbxString': ...
    def Swap(self, pStr: 'FbxString') -> None: ...
    def Buffer(self) -> str: ...
    def Clear(self) -> 'FbxString': ...
    def IsEmpty(self) -> bool: ...
    def Size(self) -> int: ...
    def GetLen(self) -> int: ...


class FbxColor(sip.wrapper):

    mAlpha = ... # type: float
    mBlue = ... # type: float
    mGreen = ... # type: float
    mRed = ... # type: float

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pRed: float, pGreen: float, pBlue: float, pAlpha: float = ...) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxColor') -> None: ...

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def IsValid(self) -> bool: ...
    def Set(self, pRed: float, pGreen: float, pBlue: float, pAlpha: float = ...) -> None: ...


class FbxTime(sip.wrapper):

    class EElement(enum.Enum):
        eHours = ... # type: FbxTime.EElement
        eMinutes = ... # type: FbxTime.EElement
        eSeconds = ... # type: FbxTime.EElement
        eFrames = ... # type: FbxTime.EElement
        eField = ... # type: FbxTime.EElement
        eResidual = ... # type: FbxTime.EElement

    class EProtocol(enum.Enum):
        eSMPTE = ... # type: FbxTime.EProtocol
        eFrameCount = ... # type: FbxTime.EProtocol
        eDefaultProtocol = ... # type: FbxTime.EProtocol

    class EMode(enum.Enum):
        eDefaultMode = ... # type: FbxTime.EMode
        eFrames120 = ... # type: FbxTime.EMode
        eFrames100 = ... # type: FbxTime.EMode
        eFrames60 = ... # type: FbxTime.EMode
        eFrames50 = ... # type: FbxTime.EMode
        eFrames48 = ... # type: FbxTime.EMode
        eFrames30 = ... # type: FbxTime.EMode
        eFrames30Drop = ... # type: FbxTime.EMode
        eNTSCDropFrame = ... # type: FbxTime.EMode
        eNTSCFullFrame = ... # type: FbxTime.EMode
        ePAL = ... # type: FbxTime.EMode
        eFrames24 = ... # type: FbxTime.EMode
        eFrames1000 = ... # type: FbxTime.EMode
        eFilmFullFrame = ... # type: FbxTime.EMode
        eCustom = ... # type: FbxTime.EMode
        eFrames96 = ... # type: FbxTime.EMode
        eFrames72 = ... # type: FbxTime.EMode
        eFrames59dot94 = ... # type: FbxTime.EMode
        eFrames119dot88 = ... # type: FbxTime.EMode
        eModesCount = ... # type: FbxTime.EMode

    def __init__(self, pTime: int = ...) -> None: ...

    def __truediv__(self, pTime: 'FbxTime') -> 'FbxTime': ...
    @typing.overload
    def __mul__(self, Mult: int) -> 'FbxTime': ...
    @typing.overload
    def __mul__(self, pTime: 'FbxTime') -> 'FbxTime': ...
    def __sub__(self, pTime: 'FbxTime') -> 'FbxTime': ...
    def __add__(self, pTime: 'FbxTime') -> 'FbxTime': ...
    def __isub__(self, pTime: 'FbxTime') -> 'FbxTime': ...
    def __iadd__(self, pTime: 'FbxTime') -> 'FbxTime': ...
    def __lt__(self, pTime: 'FbxTime') -> bool: ...
    def __gt__(self, pTime: 'FbxTime') -> bool: ...
    def __le__(self, pTime: 'FbxTime') -> bool: ...
    def __ge__(self, pTime: 'FbxTime') -> bool: ...
    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def SetTimeString(self, pTime: str, pTimeMode: 'FbxTime.EMode' = ..., pTimeFormat: 'FbxTime.EProtocol' = ...) -> None: ...
    @typing.overload
    def GetTimeString(self, pTimeString: str, pTimeStringSize: int = ..., pInfo: int = ..., pTimeMode: 'FbxTime.EMode' = ..., pTimeFormat: 'FbxTime.EProtocol' = ...) -> str: ...
    @typing.overload
    def GetTimeString(self, pStart: 'FbxTime.EElement' = ..., pEnd: 'FbxTime.EElement' = ..., pTimeMode: 'FbxTime.EMode' = ..., pTimeFormat: 'FbxTime.EProtocol' = ...) -> FbxString: ...
    def GetFrameSeparator(self, pTimeMode: 'FbxTime.EMode' = ...) -> str: ...
    @staticmethod
    def IsDropFrame(pTimeMode: 'FbxTime.EMode' = ...) -> bool: ...
    def GetResidual(self, pTimeMode: 'FbxTime.EMode' = ...) -> int: ...
    def GetFieldCount(self, pTimeMode: 'FbxTime.EMode' = ...) -> int: ...
    def GetFrameCountPrecise(self, pTimeMode: 'FbxTime.EMode' = ...) -> float: ...
    def GetFrameCount(self, pTimeMode: 'FbxTime.EMode' = ...) -> int: ...
    def GetSecondCount(self) -> int: ...
    def GetMinuteCount(self) -> int: ...
    def GetHourCount(self) -> int: ...
    def SetFramePrecise(self, pFrames: float, pTimeMode: 'FbxTime.EMode' = ...) -> None: ...
    def SetFrame(self, pFrames: int, pTimeMode: 'FbxTime.EMode' = ...) -> None: ...
    def GetFramedTime(self, pRound: bool = ...) -> 'FbxTime': ...
    def GetTime(self, pTimeMode: 'FbxTime.EMode' = ...) -> typing.Tuple[bool, int, int, int, int, int, int]: ...
    @typing.overload
    def SetTime(self, pHour: int, pMinute: int, pSecond: int, pFrame: int = ..., pField: int = ..., pTimeMode: 'FbxTime.EMode' = ...) -> None: ...
    @typing.overload
    def SetTime(self, pHour: int, pMinute: int, pSecond: int, pFrame: int, pField: int, pResidual: int, pTimeMode: 'FbxTime.EMode') -> None: ...
    def GetSecondDouble(self) -> float: ...
    def SetSecondDouble(self, pTime: float) -> None: ...
    def GetMilliSeconds(self) -> int: ...
    def SetMilliSeconds(self, pMilliSeconds: int) -> None: ...
    def Get(self) -> int: ...
    def Set(self, pTime: int) -> None: ...
    @staticmethod
    def ConvertFrameRateToTimeMode(pFrameRate: float, lPrecision: float = ...) -> 'FbxTime.EMode': ...
    @staticmethod
    def GetFrameRate(pTimeMode: 'FbxTime.EMode') -> float: ...
    @staticmethod
    def GetGlobalTimeProtocol() -> 'FbxTime.EProtocol': ...
    @staticmethod
    def SetGlobalTimeProtocol(pTimeProtocol: 'FbxTime.EProtocol') -> None: ...
    @staticmethod
    def GetGlobalTimeMode() -> 'FbxTime.EMode': ...
    @staticmethod
    def SetGlobalTimeMode(pTimeMode: 'FbxTime.EMode', pFrameRate: float = ...) -> None: ...


class FbxTimeSpan(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pStart: FbxTime, pStop: FbxTime) -> None: ...

    def UnionAssignment(self, pSpan: 'FbxTimeSpan') -> None: ...
    def __eq__(self, other: object): ...
    def __ne__(self, other: object): ...
    def Intersect(self, pTime: 'FbxTimeSpan') -> 'FbxTimeSpan': ...
    def IsInside(self, pTime: FbxTime) -> bool: ...
    def GetDirection(self) -> int: ...
    def GetSignedDuration(self) -> FbxTime: ...
    def GetDuration(self) -> FbxTime: ...
    def GetStop(self) -> FbxTime: ...
    def GetStart(self) -> FbxTime: ...
    def SetStop(self, pStop: FbxTime) -> None: ...
    def SetStart(self, pStart: FbxTime) -> None: ...
    def Set(self, pStart: FbxTime, pStop: FbxTime) -> None: ...


class FbxLocalTime(sip.wrapper):

    mDay = ... # type: int
    mHour = ... # type: int
    mMillisecond = ... # type: int
    mMinute = ... # type: int
    mMonth = ... # type: int
    mSecond = ... # type: int
    mYear = ... # type: int

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLocalTime') -> None: ...


class FbxVector2(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pV: 'FbxVector2') -> None: ...
    @typing.overload
    def __init__(self, pX: float, pY: float) -> None: ...

    def __repr__(self) -> typing.Any: ...
    def __str__(self) -> typing.Any: ...
    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def __itruediv__(self, pValue: float) -> 'FbxVector2': ...
    def __imul__(self, pValue: float) -> 'FbxVector2': ...
    def __truediv__(self, pValue: float) -> 'FbxVector2': ...
    def __mul__(self, pValue: float) -> 'FbxVector2': ...
    def __isub__(self, pValue: float) -> 'FbxVector2': ...
    def __sub__(self, pValue: float) -> 'FbxVector2': ...
    def __iadd__(self, pValue: float) -> 'FbxVector2': ...
    def __add__(self, pValue: float) -> 'FbxVector2': ...
    def Set(self, pX: float, pY: float) -> None: ...
    def __getitem__(self, pIndex: int) -> float: ...


class FbxVector4(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pV: 'FbxVector4') -> None: ...
    @typing.overload
    def __init__(self, pX: float, pY: float, pZ: float, pW: float = ...) -> None: ...
    @typing.overload
    def __init__(self, pValue: FbxDouble3) -> None: ...

    def __repr__(self) -> typing.Any: ...
    def __str__(self) -> typing.Any: ...
    def SetXYZ(self, pQuat: 'FbxQuaternion') -> None: ...
    def Normalize(self) -> None: ...
    def Distance(self, pVector: 'FbxVector4') -> float: ...
    def SquareLength(self) -> float: ...
    def Length(self) -> float: ...
    @staticmethod
    def AxisAlignmentInEulerAngle(pAB: 'FbxVector4', pA: 'FbxVector4', pB: 'FbxVector4', pAngles: 'FbxVector4') -> bool: ...
    def CrossProduct(self, pVector: 'FbxVector4') -> 'FbxVector4': ...
    def DotProduct(self, pVector: 'FbxVector4') -> float: ...
    def __neg__(self) -> 'FbxVector4': ...
    @typing.overload
    def __itruediv__(self, pValue: float) -> 'FbxVector4': ...
    @typing.overload
    def __itruediv__(self, pVector: 'FbxVector4') -> 'FbxVector4': ...
    @typing.overload
    def __imul__(self, pValue: float) -> 'FbxVector4': ...
    @typing.overload
    def __imul__(self, pVector: 'FbxVector4') -> 'FbxVector4': ...
    @typing.overload
    def __isub__(self, pValue: float) -> 'FbxVector4': ...
    @typing.overload
    def __isub__(self, pVector: 'FbxVector4') -> 'FbxVector4': ...
    @typing.overload
    def __iadd__(self, pValue: float) -> 'FbxVector4': ...
    @typing.overload
    def __iadd__(self, pVector: 'FbxVector4') -> 'FbxVector4': ...
    @typing.overload
    def __truediv__(self, pValue: float) -> 'FbxVector4': ...
    @typing.overload
    def __truediv__(self, pVector: 'FbxVector4') -> 'FbxVector4': ...
    @typing.overload
    def __mul__(self, pValue: float) -> 'FbxVector4': ...
    @typing.overload
    def __mul__(self, pVector: 'FbxVector4') -> 'FbxVector4': ...
    @typing.overload
    def __sub__(self, pValue: float) -> 'FbxVector4': ...
    @typing.overload
    def __sub__(self, pVector: 'FbxVector4') -> 'FbxVector4': ...
    @typing.overload
    def __add__(self, pValue: float) -> 'FbxVector4': ...
    @typing.overload
    def __add__(self, pVector: 'FbxVector4') -> 'FbxVector4': ...
    def Set(self, pX: float, pY: float, pZ: float, pW: float = ...) -> None: ...
    def __getitem__(self, pIndex: int) -> float: ...
    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...


class FbxQuaternion(FbxDouble4):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pV: 'FbxQuaternion') -> None: ...
    @typing.overload
    def __init__(self, pX: float, pY: float, pZ: float, pW: float = ...) -> None: ...

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def DecomposeSphericalXYZ(self) -> FbxVector4: ...
    def ComposeSphericalXYZ(self, pEuler: FbxVector4) -> None: ...
    def Conjugate(self) -> None: ...
    def Normalize(self) -> None: ...
    def Product(self, pQuaternion: 'FbxQuaternion') -> 'FbxQuaternion': ...
    def __neg__(self) -> 'FbxQuaternion': ...
    @typing.overload
    def __itruediv__(self, pValue: float) -> 'FbxQuaternion': ...
    @typing.overload
    def __itruediv__(self, pQuaternion: 'FbxQuaternion') -> 'FbxQuaternion': ...
    @typing.overload
    def __imul__(self, pValue: float) -> 'FbxQuaternion': ...
    @typing.overload
    def __imul__(self, pQuaternion: 'FbxQuaternion') -> 'FbxQuaternion': ...
    @typing.overload
    def __isub__(self, pValue: float) -> 'FbxQuaternion': ...
    @typing.overload
    def __isub__(self, pQuaternion: 'FbxQuaternion') -> 'FbxQuaternion': ...
    @typing.overload
    def __iadd__(self, pValue: float) -> 'FbxQuaternion': ...
    @typing.overload
    def __iadd__(self, pQuaternion: 'FbxQuaternion') -> 'FbxQuaternion': ...
    @typing.overload
    def __truediv__(self, pValue: float) -> 'FbxQuaternion': ...
    @typing.overload
    def __truediv__(self, pQuaternion: 'FbxQuaternion') -> 'FbxQuaternion': ...
    @typing.overload
    def __mul__(self, pValue: float) -> 'FbxQuaternion': ...
    @typing.overload
    def __mul__(self, pQuaternion: 'FbxQuaternion') -> 'FbxQuaternion': ...
    @typing.overload
    def __sub__(self, pValue: float) -> 'FbxQuaternion': ...
    @typing.overload
    def __sub__(self, pQuaternion: 'FbxQuaternion') -> 'FbxQuaternion': ...
    @typing.overload
    def __add__(self, pValue: float) -> 'FbxQuaternion': ...
    @typing.overload
    def __add__(self, pQuaternion: 'FbxQuaternion') -> 'FbxQuaternion': ...
    def Set(self, pX: float, pY: float, pZ: float, pW: float = ...) -> None: ...
    def SetAt(self, pIndex: int, pValue: float) -> None: ...
    def GetAt(self, pIndex: int) -> float: ...
    def __getitem__(self, pIndex: int) -> float: ...


class FbxMatrix(FbxDouble4x4):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pM: 'FbxMatrix') -> None: ...
    @typing.overload
    def __init__(self, pT: FbxVector4, pR: FbxVector4, pS: FbxVector4) -> None: ...
    @typing.overload
    def __init__(self, pT: FbxVector4, pQ: FbxQuaternion, pS: FbxVector4) -> None: ...
    @typing.overload
    def __init__(self, pM: 'FbxAMatrix') -> None: ...

    @typing.overload
    def __ne__(self, other: object): ...
    @typing.overload
    def __ne__(self, other: object): ...
    @typing.overload
    def __eq__(self, other: object): ...
    @typing.overload
    def __eq__(self, other: object): ...
    def MultNormalize(self, pVector: FbxVector4) -> FbxVector4: ...
    def Transpose(self) -> 'FbxMatrix': ...
    def Inverse(self) -> 'FbxMatrix': ...
    def __imul__(self, pMatrix: 'FbxMatrix') -> 'FbxMatrix': ...
    def __isub__(self, pMatrix: 'FbxMatrix') -> 'FbxMatrix': ...
    def __iadd__(self, pMatrix: 'FbxMatrix') -> 'FbxMatrix': ...
    def __mul__(self, pMatrix: 'FbxMatrix') -> 'FbxMatrix': ...
    def __sub__(self, pMatrix: 'FbxMatrix') -> 'FbxMatrix': ...
    def __add__(self, pMatrix: 'FbxMatrix') -> 'FbxMatrix': ...
    def __neg__(self) -> 'FbxMatrix': ...
    def GetElements(self, pTranslation: FbxVector4, pRotation: FbxQuaternion, pShearing: FbxVector4, pScaling: FbxVector4) -> float: ...
    def SetColumn(self, pX: int, pColumn: FbxVector4) -> None: ...
    def SetRow(self, pY: int, pRow: FbxVector4) -> None: ...
    def SetTQS(self, pT: FbxVector4, pQ: FbxQuaternion, pS: FbxVector4) -> None: ...
    def SetTRS(self, pT: FbxVector4, pR: FbxVector4, pS: FbxVector4) -> None: ...
    def SetIdentity(self) -> None: ...
    def Set(self, pY: int, pX: int, pValue: float) -> None: ...
    def GetColumn(self, pX: int) -> FbxVector4: ...
    def GetRow(self, pY: int) -> FbxVector4: ...
    def Get(self, pY: int, pX: int) -> float: ...


class FbxAMatrix(FbxDouble4x4):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pXMatrix: 'FbxAMatrix') -> None: ...
    @typing.overload
    def __init__(self, pT: FbxVector4, pR: FbxVector4, pS: FbxVector4) -> None: ...

    def IsIdentity(self, pThreshold: float = ...) -> bool: ...
    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def Transpose(self) -> 'FbxAMatrix': ...
    def Inverse(self) -> 'FbxAMatrix': ...
    def __neg__(self) -> 'FbxAMatrix': ...
    def MultS(self, pVector4: FbxVector4) -> FbxVector4: ...
    def MultQ(self, pQ: FbxQuaternion) -> FbxQuaternion: ...
    def MultR(self, pVector4: FbxVector4) -> FbxVector4: ...
    def MultT(self, pVector4: FbxVector4) -> FbxVector4: ...
    def __itruediv__(self, pValue: float) -> 'FbxAMatrix': ...
    @typing.overload
    def __imul__(self, pValue: float) -> 'FbxAMatrix': ...
    @typing.overload
    def __imul__(self, pXMatrix: 'FbxAMatrix') -> 'FbxAMatrix': ...
    def __truediv__(self, pValue: float) -> 'FbxAMatrix': ...
    @typing.overload
    def __mul__(self, pValue: float) -> 'FbxAMatrix': ...
    @typing.overload
    def __mul__(self, pXMatrix: 'FbxAMatrix') -> 'FbxAMatrix': ...
    def SetTQS(self, pT: FbxVector4, pQ: FbxQuaternion, pS: FbxVector4) -> None: ...
    def SetTRS(self, pT: FbxVector4, pR: FbxVector4, pS: FbxVector4) -> None: ...
    def SetS(self, pS: FbxVector4) -> None: ...
    def SetQ(self, pQ: FbxQuaternion) -> None: ...
    def SetR(self, pR: FbxVector4) -> None: ...
    def SetT(self, pT: FbxVector4) -> None: ...
    def SetIdentity(self) -> None: ...
    def GetColumn(self, pX: int) -> FbxVector4: ...
    def GetRow(self, pY: int) -> FbxVector4: ...
    def GetS(self) -> FbxVector4: ...
    def GetQ(self) -> FbxQuaternion: ...
    def GetR(self) -> FbxVector4: ...
    def GetT(self) -> FbxVector4: ...
    def Get(self, pY: int, pX: int) -> float: ...


class FbxEuler(sip.wrapper):

    class EOrder(enum.Enum):
        eOrderXYZ = ... # type: FbxEuler.EOrder
        eOrderXZY = ... # type: FbxEuler.EOrder
        eOrderYZX = ... # type: FbxEuler.EOrder
        eOrderYXZ = ... # type: FbxEuler.EOrder
        eOrderZXY = ... # type: FbxEuler.EOrder
        eOrderZYX = ... # type: FbxEuler.EOrder

    class EAxis(enum.Enum):
        eAxisX = ... # type: FbxEuler.EAxis
        eAxisY = ... # type: FbxEuler.EAxis
        eAxisZ = ... # type: FbxEuler.EAxis

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxEuler') -> None: ...


class FbxRotationOrder(sip.wrapper):

    def __init__(self, pOrder: FbxEuler.EOrder = ...) -> None: ...

    def V2VRef(self, pVOut: FbxVector4, pVIn: FbxVector4, pVRef: FbxVector4) -> bool: ...
    def M2V(self, pV: FbxVector4, pRM: FbxAMatrix) -> None: ...
    def V2M(self, pRM: FbxAMatrix, pV: FbxVector4) -> None: ...
    def SetOrder(self, pOrder: FbxEuler.EOrder) -> None: ...
    def GetOrder(self) -> int: ...


class FbxLimits(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLimits') -> None: ...

    def Apply(self, pVector: FbxDouble3) -> FbxDouble3: ...
    def GetAnyMinMaxActive(self) -> bool: ...
    def SetMax(self, pMax: FbxDouble3) -> None: ...
    def SetMaxActive(self, pXActive: bool, pYActive: bool, pZActive: bool) -> None: ...
    def SetMaxZActive(self, pActive: bool) -> None: ...
    def SetMaxYActive(self, pActive: bool) -> None: ...
    def SetMaxXActive(self, pActive: bool) -> None: ...
    def GetMax(self) -> FbxDouble3: ...
    def GetMaxActive(self) -> typing.Tuple[bool, bool, bool]: ...
    def GetMaxZActive(self) -> bool: ...
    def GetMaxYActive(self) -> bool: ...
    def GetMaxXActive(self) -> bool: ...
    def SetMin(self, pMin: FbxDouble3) -> None: ...
    def SetMinActive(self, pXActive: bool, pYActive: bool, pZActive: bool) -> None: ...
    def SetMinZActive(self, pActive: bool) -> None: ...
    def SetMinYActive(self, pActive: bool) -> None: ...
    def SetMinXActive(self, pActive: bool) -> None: ...
    def GetMin(self) -> FbxDouble3: ...
    def GetMinActive(self) -> typing.Tuple[bool, bool, bool]: ...
    def GetMinZActive(self) -> bool: ...
    def GetMinYActive(self) -> bool: ...
    def GetMinXActive(self) -> bool: ...
    def SetActive(self, pActive: bool) -> None: ...
    def GetActive(self) -> bool: ...


class FbxTransform(sip.wrapper):

    class EInheritType(enum.Enum):
        eInheritRrSs = ... # type: FbxTransform.EInheritType
        eInheritRSrs = ... # type: FbxTransform.EInheritType
        eInheritRrs = ... # type: FbxTransform.EInheritType

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxTransform') -> None: ...

    def GTRSM2GX(self, pGX: FbxAMatrix, pGT: FbxVector4, pGRM: FbxAMatrix, pGSM: FbxAMatrix) -> None: ...
    def LSM2GSM(self, pGSM: FbxAMatrix, pPGSM: FbxAMatrix, pLSM: FbxAMatrix, pLRM: FbxAMatrix, pPLS: FbxVector4) -> None: ...
    def LRM2DoF(self, pRDoF: FbxVector4, pLRM: FbxAMatrix, pForLimit: bool = ...) -> None: ...
    def DoF2LRM(self, pLRM: FbxAMatrix, pRDoF: FbxVector4, pForLimit: bool = ...) -> None: ...
    def LT2DoF(self, pDoF: FbxVector4, pLT: FbxVector4, pLRM: FbxAMatrix, pLSM: FbxAMatrix) -> None: ...
    def DoF2LT(self, pLT: FbxVector4, pDoF: FbxVector4, pLRM: FbxAMatrix, pLSM: FbxAMatrix) -> None: ...
    def SetRotationSpaceForLimitOnly(self, pRotationSpaceForLimitOnly: bool) -> None: ...
    def GetRotationSpaceForLimitOnly(self) -> bool: ...
    def SetPostRM(self, pPostR: FbxVector4) -> None: ...
    def SetPreRM(self, pPreR: FbxVector4) -> None: ...
    def SetSPivot(self, pSPivot: FbxVector4) -> None: ...
    def SetSOffset(self, pSOffset: FbxVector4) -> None: ...
    def SetRPivot(self, pRPivot: FbxVector4) -> None: ...
    def SetROffset(self, pROffset: FbxVector4) -> None: ...
    def HasPostRM(self) -> bool: ...
    def HasPreRM(self) -> bool: ...
    def HasSPivot(self) -> bool: ...
    def HasSOffset(self) -> bool: ...
    def HasRPivot(self) -> bool: ...
    def HasROffset(self) -> bool: ...
    def GetRotationOrder(self) -> FbxRotationOrder: ...
    def GetScalingLimits(self) -> FbxLimits: ...
    def GetRotationLimits(self) -> FbxLimits: ...
    def GetTranslationLimits(self) -> FbxLimits: ...
    def SetInheritType(self, pType: 'FbxTransform.EInheritType') -> None: ...
    def GetInheritType(self) -> 'FbxTransform.EInheritType': ...


class BoolArray(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pArrayTemplate: 'BoolArray') -> None: ...

    def __getitem__(self, pIndex: int) -> bool: ...
    def Find(self, pItem: bool) -> int: ...
    def RemoveArray(self, pArray: 'BoolArray') -> None: ...
    def RemoveIt(self, pItem: bool) -> bool: ...
    def RemoveLast(self) -> bool: ...
    def RemoveAt(self, pIndex: int) -> bool: ...
    def GetLast(self) -> bool: ...
    def GetFirst(self) -> bool: ...
    def GetAt(self, pIndex: int) -> bool: ...
    def SetLast(self, pItem: bool) -> None: ...
    def SetAt(self, pIndex: int, pItem: bool) -> None: ...
    def AddArrayNoDuplicate(self, pArray: 'BoolArray') -> None: ...
    def AddArray(self, pArray: 'BoolArray') -> None: ...
    def AddUnique(self, pItem: bool) -> int: ...
    def Add(self, pItem: bool) -> int: ...
    def InsertAt(self, pIndex: int, pItem: bool) -> int: ...
    def GetCount(self) -> int: ...


class IntArray(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pArrayTemplate: 'IntArray') -> None: ...

    def __getitem__(self, pIndex: int) -> int: ...
    def Find(self, pItem: int) -> int: ...
    def RemoveArray(self, pArray: 'IntArray') -> None: ...
    def RemoveIt(self, pItem: int) -> bool: ...
    def RemoveLast(self) -> int: ...
    def RemoveAt(self, pIndex: int) -> int: ...
    def GetLast(self) -> int: ...
    def GetFirst(self) -> int: ...
    def GetAt(self, pIndex: int) -> int: ...
    def SetLast(self, pItem: int) -> None: ...
    def SetAt(self, pIndex: int, pItem: int) -> None: ...
    def AddArrayNoDuplicate(self, pArray: 'IntArray') -> None: ...
    def AddArray(self, pArray: 'IntArray') -> None: ...
    def AddUnique(self, pItem: int) -> int: ...
    def Add(self, pItem: int) -> int: ...
    def InsertAt(self, pIndex: int, pItem: int) -> int: ...
    def GetCount(self) -> int: ...


class DoubleArray(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pArrayTemplate: 'DoubleArray') -> None: ...

    def __getitem__(self, pIndex: int) -> float: ...
    def Find(self, pItem: float) -> int: ...
    def RemoveArray(self, pArray: 'DoubleArray') -> None: ...
    def RemoveIt(self, pItem: float) -> bool: ...
    def RemoveLast(self) -> float: ...
    def RemoveAt(self, pIndex: int) -> float: ...
    def GetLast(self) -> float: ...
    def GetFirst(self) -> float: ...
    def GetAt(self, pIndex: int) -> float: ...
    def SetLast(self, pItem: float) -> None: ...
    def SetAt(self, pIndex: int, pItem: float) -> None: ...
    def AddArrayNoDuplicate(self, pArray: 'DoubleArray') -> None: ...
    def AddArray(self, pArray: 'DoubleArray') -> None: ...
    def AddUnique(self, pItem: float) -> int: ...
    def Add(self, pItem: float) -> int: ...
    def InsertAt(self, pIndex: int, pItem: float) -> int: ...
    def GetCount(self) -> int: ...


class FbxStringArray(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pArrayTemplate: 'FbxStringArray') -> None: ...

    def __getitem__(self, pIndex: int) -> FbxString: ...
    def Find(self, pItem: FbxString) -> int: ...
    def RemoveArray(self, pArray: 'FbxStringArray') -> None: ...
    def RemoveIt(self, pItem: FbxString) -> bool: ...
    def RemoveLast(self) -> FbxString: ...
    def RemoveAt(self, pIndex: int) -> FbxString: ...
    def GetLast(self) -> FbxString: ...
    def GetFirst(self) -> FbxString: ...
    def GetAt(self, pIndex: int) -> FbxString: ...
    def SetLast(self, pItem: FbxString) -> None: ...
    def SetAt(self, pIndex: int, pItem: FbxString) -> None: ...
    def AddArrayNoDuplicate(self, pArray: 'FbxStringArray') -> None: ...
    def AddArray(self, pArray: 'FbxStringArray') -> None: ...
    def AddUnique(self, pItem: FbxString) -> int: ...
    def Add(self, pItem: FbxString) -> int: ...
    def InsertAt(self, pIndex: int, pItem: FbxString) -> int: ...
    def GetCount(self) -> int: ...


class FbxObjectArray(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pArrayTemplate: 'FbxObjectArray') -> None: ...

    def __getitem__(self, pIndex: int) -> 'FbxObject': ...
    def Find(self, pItem: 'FbxObject') -> int: ...
    def RemoveArray(self, pArray: 'FbxObjectArray') -> None: ...
    def RemoveIt(self, pItem: 'FbxObject') -> bool: ...
    def RemoveLast(self) -> 'FbxObject': ...
    def RemoveAt(self, pIndex: int) -> 'FbxObject': ...
    def GetLast(self) -> 'FbxObject': ...
    def GetFirst(self) -> 'FbxObject': ...
    def GetAt(self, pIndex: int) -> 'FbxObject': ...
    def SetLast(self, pItem: 'FbxObject') -> None: ...
    def SetAt(self, pIndex: int, pItem: 'FbxObject') -> None: ...
    def AddArrayNoDuplicate(self, pArray: 'FbxObjectArray') -> None: ...
    def AddArray(self, pArray: 'FbxObjectArray') -> None: ...
    def AddUnique(self, pItem: 'FbxObject') -> int: ...
    def Add(self, pItem: 'FbxObject') -> int: ...
    def InsertAt(self, pIndex: int, pItem: 'FbxObject') -> int: ...
    def GetCount(self) -> int: ...


class FbxPoseArray(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pArrayTemplate: 'FbxPoseArray') -> None: ...

    def __getitem__(self, pIndex: int) -> 'FbxPose': ...
    def Find(self, pItem: 'FbxPose') -> int: ...
    def RemoveArray(self, pArray: 'FbxPoseArray') -> None: ...
    def RemoveIt(self, pItem: 'FbxPose') -> bool: ...
    def RemoveLast(self) -> 'FbxPose': ...
    def RemoveAt(self, pIndex: int) -> 'FbxPose': ...
    def GetLast(self) -> 'FbxPose': ...
    def GetFirst(self) -> 'FbxPose': ...
    def GetAt(self, pIndex: int) -> 'FbxPose': ...
    def SetLast(self, pItem: 'FbxPose') -> None: ...
    def SetAt(self, pIndex: int, pItem: 'FbxPose') -> None: ...
    def AddArrayNoDuplicate(self, pArray: 'FbxPoseArray') -> None: ...
    def AddArray(self, pArray: 'FbxPoseArray') -> None: ...
    def AddUnique(self, pItem: 'FbxPose') -> int: ...
    def Add(self, pItem: 'FbxPose') -> int: ...
    def InsertAt(self, pIndex: int, pItem: 'FbxPose') -> int: ...
    def GetCount(self) -> int: ...


class FbxNodeArray(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pArrayTemplate: 'FbxNodeArray') -> None: ...

    def __getitem__(self, pIndex: int) -> 'FbxNode': ...
    def Find(self, pItem: 'FbxNode') -> int: ...
    def RemoveArray(self, pArray: 'FbxNodeArray') -> None: ...
    def RemoveIt(self, pItem: 'FbxNode') -> bool: ...
    def RemoveLast(self) -> 'FbxNode': ...
    def RemoveAt(self, pIndex: int) -> 'FbxNode': ...
    def GetLast(self) -> 'FbxNode': ...
    def GetFirst(self) -> 'FbxNode': ...
    def GetAt(self, pIndex: int) -> 'FbxNode': ...
    def SetLast(self, pItem: 'FbxNode') -> None: ...
    def SetAt(self, pIndex: int, pItem: 'FbxNode') -> None: ...
    def AddArrayNoDuplicate(self, pArray: 'FbxNodeArray') -> None: ...
    def AddArray(self, pArray: 'FbxNodeArray') -> None: ...
    def AddUnique(self, pItem: 'FbxNode') -> int: ...
    def Add(self, pItem: 'FbxNode') -> int: ...
    def InsertAt(self, pIndex: int, pItem: 'FbxNode') -> int: ...
    def GetCount(self) -> int: ...


class FbxTextureArray(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pArrayTemplate: 'FbxTextureArray') -> None: ...

    def __getitem__(self, pIndex: int) -> 'FbxTexture': ...
    def Find(self, pItem: 'FbxTexture') -> int: ...
    def RemoveArray(self, pArray: 'FbxTextureArray') -> None: ...
    def RemoveIt(self, pItem: 'FbxTexture') -> bool: ...
    def RemoveLast(self) -> 'FbxTexture': ...
    def RemoveAt(self, pIndex: int) -> 'FbxTexture': ...
    def GetLast(self) -> 'FbxTexture': ...
    def GetFirst(self) -> 'FbxTexture': ...
    def GetAt(self, pIndex: int) -> 'FbxTexture': ...
    def SetLast(self, pItem: 'FbxTexture') -> None: ...
    def SetAt(self, pIndex: int, pItem: 'FbxTexture') -> None: ...
    def AddArrayNoDuplicate(self, pArray: 'FbxTextureArray') -> None: ...
    def AddArray(self, pArray: 'FbxTextureArray') -> None: ...
    def AddUnique(self, pItem: 'FbxTexture') -> int: ...
    def Add(self, pItem: 'FbxTexture') -> int: ...
    def InsertAt(self, pIndex: int, pItem: 'FbxTexture') -> int: ...
    def GetCount(self) -> int: ...


class FbxDocumentArray(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pArrayTemplate: 'FbxDocumentArray') -> None: ...

    def __getitem__(self, pIndex: int) -> 'FbxDocument': ...
    def Find(self, pItem: 'FbxDocument') -> int: ...
    def RemoveArray(self, pArray: 'FbxDocumentArray') -> None: ...
    def RemoveIt(self, pItem: 'FbxDocument') -> bool: ...
    def RemoveLast(self) -> 'FbxDocument': ...
    def RemoveAt(self, pIndex: int) -> 'FbxDocument': ...
    def GetLast(self) -> 'FbxDocument': ...
    def GetFirst(self) -> 'FbxDocument': ...
    def GetAt(self, pIndex: int) -> 'FbxDocument': ...
    def SetLast(self, pItem: 'FbxDocument') -> None: ...
    def SetAt(self, pIndex: int, pItem: 'FbxDocument') -> None: ...
    def AddArrayNoDuplicate(self, pArray: 'FbxDocumentArray') -> None: ...
    def AddArray(self, pArray: 'FbxDocumentArray') -> None: ...
    def AddUnique(self, pItem: 'FbxDocument') -> int: ...
    def Add(self, pItem: 'FbxDocument') -> int: ...
    def InsertAt(self, pIndex: int, pItem: 'FbxDocument') -> int: ...
    def GetCount(self) -> int: ...


class FbxSurfaceMaterialArray(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pArrayTemplate: 'FbxSurfaceMaterialArray') -> None: ...

    def __getitem__(self, pIndex: int) -> 'FbxSurfaceMaterial': ...
    def Find(self, pItem: 'FbxSurfaceMaterial') -> int: ...
    def RemoveArray(self, pArray: 'FbxSurfaceMaterialArray') -> None: ...
    def RemoveIt(self, pItem: 'FbxSurfaceMaterial') -> bool: ...
    def RemoveLast(self) -> 'FbxSurfaceMaterial': ...
    def RemoveAt(self, pIndex: int) -> 'FbxSurfaceMaterial': ...
    def GetLast(self) -> 'FbxSurfaceMaterial': ...
    def GetFirst(self) -> 'FbxSurfaceMaterial': ...
    def GetAt(self, pIndex: int) -> 'FbxSurfaceMaterial': ...
    def SetLast(self, pItem: 'FbxSurfaceMaterial') -> None: ...
    def SetAt(self, pIndex: int, pItem: 'FbxSurfaceMaterial') -> None: ...
    def AddArrayNoDuplicate(self, pArray: 'FbxSurfaceMaterialArray') -> None: ...
    def AddArray(self, pArray: 'FbxSurfaceMaterialArray') -> None: ...
    def AddUnique(self, pItem: 'FbxSurfaceMaterial') -> int: ...
    def Add(self, pItem: 'FbxSurfaceMaterial') -> int: ...
    def InsertAt(self, pIndex: int, pItem: 'FbxSurfaceMaterial') -> int: ...
    def GetCount(self) -> int: ...


class FbxLayerElementTypeArray(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pArrayTemplate: 'FbxLayerElementTypeArray') -> None: ...

    def __getitem__(self, pIndex: int) -> 'FbxLayerElement.EType': ...
    def Find(self, pItem: 'FbxLayerElement.EType') -> int: ...
    def RemoveArray(self, pArray: 'FbxLayerElementTypeArray') -> None: ...
    def RemoveIt(self, pItem: 'FbxLayerElement.EType') -> bool: ...
    def RemoveLast(self) -> 'FbxLayerElement.EType': ...
    def RemoveAt(self, pIndex: int) -> 'FbxLayerElement.EType': ...
    def GetLast(self) -> 'FbxLayerElement.EType': ...
    def GetFirst(self) -> 'FbxLayerElement.EType': ...
    def GetAt(self, pIndex: int) -> 'FbxLayerElement.EType': ...
    def SetLast(self, pItem: 'FbxLayerElement.EType') -> None: ...
    def SetAt(self, pIndex: int, pItem: 'FbxLayerElement.EType') -> None: ...
    def AddArrayNoDuplicate(self, pArray: 'FbxLayerElementTypeArray') -> None: ...
    def AddArray(self, pArray: 'FbxLayerElementTypeArray') -> None: ...
    def AddUnique(self, pItem: 'FbxLayerElement.EType') -> int: ...
    def Add(self, pItem: 'FbxLayerElement.EType') -> int: ...
    def InsertAt(self, pIndex: int, pItem: 'FbxLayerElement.EType') -> int: ...
    def GetCount(self) -> int: ...


class FbxVector2Array(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pArrayTemplate: 'FbxVector2Array') -> None: ...

    def __getitem__(self, pIndex: int) -> FbxVector2: ...
    def Find(self, pItem: FbxVector2) -> int: ...
    def RemoveArray(self, pArray: 'FbxVector2Array') -> None: ...
    def RemoveIt(self, pItem: FbxVector2) -> bool: ...
    def RemoveLast(self) -> FbxVector2: ...
    def RemoveAt(self, pIndex: int) -> FbxVector2: ...
    def GetLast(self) -> FbxVector2: ...
    def GetFirst(self) -> FbxVector2: ...
    def GetAt(self, pIndex: int) -> FbxVector2: ...
    def SetLast(self, pItem: FbxVector2) -> None: ...
    def SetAt(self, pIndex: int, pItem: FbxVector2) -> None: ...
    def AddArrayNoDuplicate(self, pArray: 'FbxVector2Array') -> None: ...
    def AddArray(self, pArray: 'FbxVector2Array') -> None: ...
    def AddUnique(self, pItem: FbxVector2) -> int: ...
    def Add(self, pItem: FbxVector2) -> int: ...
    def InsertAt(self, pIndex: int, pItem: FbxVector2) -> int: ...
    def GetCount(self) -> int: ...


class FbxVector4Array(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pArrayTemplate: 'FbxVector4Array') -> None: ...

    def __getitem__(self, pIndex: int) -> FbxVector4: ...
    def Find(self, pItem: FbxVector4) -> int: ...
    def RemoveArray(self, pArray: 'FbxVector4Array') -> None: ...
    def RemoveIt(self, pItem: FbxVector4) -> bool: ...
    def RemoveLast(self) -> FbxVector4: ...
    def RemoveAt(self, pIndex: int) -> FbxVector4: ...
    def GetLast(self) -> FbxVector4: ...
    def GetFirst(self) -> FbxVector4: ...
    def GetAt(self, pIndex: int) -> FbxVector4: ...
    def SetLast(self, pItem: FbxVector4) -> None: ...
    def SetAt(self, pIndex: int, pItem: FbxVector4) -> None: ...
    def AddArrayNoDuplicate(self, pArray: 'FbxVector4Array') -> None: ...
    def AddArray(self, pArray: 'FbxVector4Array') -> None: ...
    def AddUnique(self, pItem: FbxVector4) -> int: ...
    def Add(self, pItem: FbxVector4) -> int: ...
    def InsertAt(self, pIndex: int, pItem: FbxVector4) -> int: ...
    def GetCount(self) -> int: ...


class FbxAxisSystem(sip.wrapper):

    class EPreDefinedAxisSystem(enum.Enum):
        eMayaZUp = ... # type: FbxAxisSystem.EPreDefinedAxisSystem
        eMayaYUp = ... # type: FbxAxisSystem.EPreDefinedAxisSystem
        eMax = ... # type: FbxAxisSystem.EPreDefinedAxisSystem
        eMotionBuilder = ... # type: FbxAxisSystem.EPreDefinedAxisSystem
        eOpenGL = ... # type: FbxAxisSystem.EPreDefinedAxisSystem
        eDirectX = ... # type: FbxAxisSystem.EPreDefinedAxisSystem
        eLightwave = ... # type: FbxAxisSystem.EPreDefinedAxisSystem

    class ECoordSystem(enum.Enum):
        eRightHanded = ... # type: FbxAxisSystem.ECoordSystem
        eLeftHanded = ... # type: FbxAxisSystem.ECoordSystem

    class EFrontVector(enum.Enum):
        eParityEven = ... # type: FbxAxisSystem.EFrontVector
        eParityOdd = ... # type: FbxAxisSystem.EFrontVector

    class EUpVector(enum.Enum):
        eXAxis = ... # type: FbxAxisSystem.EUpVector
        eYAxis = ... # type: FbxAxisSystem.EUpVector
        eZAxis = ... # type: FbxAxisSystem.EUpVector

    DirectX = ... # type: 'FbxAxisSystem'
    Lightwave = ... # type: 'FbxAxisSystem'
    Max = ... # type: 'FbxAxisSystem'
    MayaYUp = ... # type: 'FbxAxisSystem'
    MayaZUp = ... # type: 'FbxAxisSystem'
    Motionbuilder = ... # type: 'FbxAxisSystem'
    OpenGL = ... # type: 'FbxAxisSystem'

    @typing.overload
    def __init__(self, pUpVector: 'FbxAxisSystem.EUpVector', pFrontVector: 'FbxAxisSystem.EFrontVector', pCoorSystem: 'FbxAxisSystem.ECoordSystem') -> None: ...
    @typing.overload
    def __init__(self, pAxisSystem: 'FbxAxisSystem') -> None: ...
    @typing.overload
    def __init__(self, pAxisSystem: 'FbxAxisSystem.EPreDefinedAxisSystem') -> None: ...

    def ConvertChildren(self, pRoot: 'FbxNode', pSrcSystem: 'FbxAxisSystem') -> None: ...
    def GetCoorSystem(self) -> 'FbxAxisSystem.ECoordSystem': ...
    def GetFrontVector(self) -> typing.Tuple['FbxAxisSystem.EFrontVector', int]: ...
    def GetUpVector(self) -> typing.Tuple['FbxAxisSystem.EUpVector', int]: ...
    @typing.overload
    def ConvertScene(self, pScene: 'FbxScene') -> None: ...
    @typing.overload
    def ConvertScene(self, pScene: 'FbxScene', pFbxRoot: 'FbxNode') -> None: ...
    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...


class FbxSystemUnit(sip.wrapper):

    class ConversionOptions(sip.wrapper):

        mConvertCameraClipPlanes = ... # type: bool
        mConvertClusters = ... # type: bool
        mConvertLightIntensity = ... # type: bool
        mConvertLimits = ... # type: bool
        mConvertPhotometricLProperties = ... # type: bool
        mConvertRrsNodes = ... # type: bool

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'FbxSystemUnit.ConversionOptions') -> None: ...

    DefaultConversionOptions = ... # type: 'FbxSystemUnit.ConversionOptions'
    Foot = ... # type: 'FbxSystemUnit'
    Inch = ... # type: 'FbxSystemUnit'
    Mile = ... # type: 'FbxSystemUnit'
    Yard = ... # type: 'FbxSystemUnit'
    cm = ... # type: 'FbxSystemUnit'
    dm = ... # type: 'FbxSystemUnit'
    km = ... # type: 'FbxSystemUnit'
    m = ... # type: 'FbxSystemUnit'
    mm = ... # type: 'FbxSystemUnit'
    sPredefinedUnits = ... # type: 'FbxSystemUnit'

    def __init__(self, pScaleFactor: float, pMultiplier: float = ...) -> None: ...

    def GetConversionFactorFrom(self, pSource: 'FbxSystemUnit') -> float: ...
    def GetConversionFactorTo(self, pTarget: 'FbxSystemUnit') -> float: ...
    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def GetMultiplier(self) -> float: ...
    def GetScaleFactorAsString_Plurial(self) -> FbxString: ...
    def GetScaleFactorAsString(self, pAbbreviated: bool = ...) -> FbxString: ...
    def GetScaleFactor(self) -> float: ...
    def ConvertChildren(self, pRoot: 'FbxNode', pSrcUnit: 'FbxSystemUnit', pOptions: 'FbxSystemUnit.ConversionOptions' = ...) -> None: ...
    @typing.overload
    def ConvertScene(self, pScene: 'FbxScene', pOptions: 'FbxSystemUnit.ConversionOptions' = ...) -> None: ...
    @typing.overload
    def ConvertScene(self, pScene: 'FbxScene', pFbxRoot: 'FbxNode', pOptions: 'FbxSystemUnit.ConversionOptions' = ...) -> None: ...


class FbxNameHandler(sip.wrapper):

    @typing.overload
    def __init__(self, pInitialName: typing.Optional[str] = ...) -> None: ...
    @typing.overload
    def __init__(self, pName: 'FbxNameHandler') -> None: ...

    def IsRenamed(self) -> bool: ...
    def GetNameSpace(self) -> str: ...
    def SetNameSpace(self, pNameSpace: str) -> None: ...
    def GetCurrentName(self) -> str: ...
    def SetCurrentName(self, pNewName: str) -> None: ...
    def GetInitialName(self) -> str: ...
    def SetInitialName(self, pInitialName: str) -> None: ...


class FbxIODefaultRenderResolution(sip.wrapper):

    mCameraName = ... # type: FbxString
    mIsOK = ... # type: bool
    mResolutionH = ... # type: float
    mResolutionMode = ... # type: FbxString
    mResolutionW = ... # type: float

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxIODefaultRenderResolution') -> None: ...

    def Reset(self) -> None: ...


class FbxIOFileHeaderInfo(sip.wrapper):

    mCreationTimeStamp = ... # type: FbxLocalTime
    mCreationTimeStampPresent = ... # type: bool
    mCreator = ... # type: FbxString
    mDefaultRenderResolution = ... # type: FbxIODefaultRenderResolution
    mFileVersion = ... # type: int
    mIOPlugin = ... # type: bool
    mPLE = ... # type: bool

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxIOFileHeaderInfo') -> None: ...

    def ReadExtendedHeaderInformation(self, a0: 'FbxIO') -> bool: ...
    def Reset(self) -> None: ...


class FbxIO(sip.wrapper):

    class BinaryType(enum.Enum):
        BinaryNormal = ... # type: FbxIO.BinaryType
        BinaryLarge = ... # type: FbxIO.BinaryType

    def __init__(self, pBinaryType: 'FbxIO.BinaryType', pStatus: 'FbxStatus') -> None: ...

    @staticmethod
    def Create(pBinaryType: 'FbxIO.BinaryType', pStatus: 'FbxStatus') -> 'FbxIO': ...


class FbxManager(sip.wrapper):

    def __init__(self) -> None: ...

    def UnloadPlugins(self) -> bool: ...
    def LoadPlugin(self, pFilename: str) -> bool: ...
    def LoadPluginsDirectory(self, pFilename: str, pExtensions: str) -> bool: ...
    def GetIOPluginRegistry(self) -> 'FbxIOPluginRegistry': ...
    def SetIOSettings(self, pIOSettings: 'FbxIOSettings') -> None: ...
    def GetIOSettings(self) -> 'FbxIOSettings': ...
    def SetUserNotification(self, pUN: 'FbxUserNotification') -> None: ...
    def GetUserNotification(self) -> 'FbxUserNotification': ...
    def GetDataType(self, pIndex: int) -> 'FbxDataType': ...
    def GetDataTypeCount(self) -> int: ...
    def GetDataTypeFromName(self, pDataType: str) -> 'FbxDataType': ...
    def CreateDataType(self, pName: str, pType: EFbxType) -> 'FbxDataType': ...
    def FindFbxFileClass(self, pFbxFileTypeName: str, pFbxFileSubTypeName: str) -> 'FbxClassId': ...
    def FindClass(self, pClassName: str) -> 'FbxClassId': ...
    def CreateNewObjectFromClassId(self, pClassId: 'FbxClassId', pName: str, pContainer: typing.Optional['FbxObject'] = ..., pCloneFrom: typing.Optional['FbxObject'] = ...) -> 'FbxObject': ...
    @staticmethod
    def GetFileFormatVersion() -> typing.Tuple[int, int, int]: ...
    def Destroy(self) -> None: ...
    @staticmethod
    def Create() -> 'FbxManager': ...


class FbxDataType(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pDataType: 'FbxDataType') -> None: ...

    def GetName(self) -> str: ...
    def GetType(self) -> EFbxType: ...
    def Is(self, pDataType: 'FbxDataType') -> bool: ...
    def Valid(self) -> bool: ...
    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def Destroy(self) -> None: ...
    @typing.overload
    @staticmethod
    def Create(pName: str, pType: EFbxType) -> 'FbxDataType': ...
    @typing.overload
    @staticmethod
    def Create(pName: str, pDataType: 'FbxDataType') -> 'FbxDataType': ...


class FbxIOPluginRegistry(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxIOPluginRegistry') -> None: ...

    def FillIOSettingsForWritersRegistered(self, pIOS: 'FbxIOSettings') -> None: ...
    def FillIOSettingsForReadersRegistered(self, pIOS: 'FbxIOSettings') -> None: ...
    def GetNativeWriterFormat(self) -> int: ...
    def GetNativeReaderFormat(self) -> int: ...
    def DetectWriterFileFormat(self, pFileName: str) -> typing.Tuple[bool, int]: ...
    def DetectReaderFileFormat(self, pFileName: str) -> typing.Tuple[bool, int]: ...
    def GetWriterFormatExtension(self, pFileFormat: int) -> str: ...
    def GetReaderFormatExtension(self, pFileFormat: int) -> str: ...
    def GetWriterFormatDescription(self, pFileFormat: int) -> str: ...
    def GetReaderFormatDescription(self, pFileFormat: int) -> str: ...
    def GetWriterFormatCount(self) -> int: ...
    def GetReaderFormatCount(self) -> int: ...
    def WriterIsGenuine(self, pFileFormat: int) -> bool: ...
    def ReaderIsGenuine(self, pFileFormat: int) -> bool: ...
    def WriterIsFBX(self, pFileFormat: int) -> bool: ...
    def ReaderIsFBX(self, pFileFormat: int) -> bool: ...
    def FindWriterIDByDescription(self, pDesc: str) -> int: ...
    def FindReaderIDByDescription(self, pDesc: str) -> int: ...
    def FindWriterIDByExtension(self, pExt: str) -> int: ...
    def FindReaderIDByExtension(self, pExt: str) -> int: ...
    def RegisterWriter(self, pPluginPath: str, pOverride: bool = ...) -> typing.Tuple[int, int]: ...
    def RegisterReader(self, pPluginPath: str, pOverride: bool = ...) -> typing.Tuple[int, int]: ...


class FbxConnection(sip.wrapper):

    class EType(enum.Enum):
        eNone = ... # type: FbxConnection.EType
        eSystem = ... # type: FbxConnection.EType
        eUser = ... # type: FbxConnection.EType
        eSystemOrUser = ... # type: FbxConnection.EType
        eReference = ... # type: FbxConnection.EType
        eContains = ... # type: FbxConnection.EType
        eData = ... # type: FbxConnection.EType
        eLinkType = ... # type: FbxConnection.EType
        eDefault = ... # type: FbxConnection.EType
        eUnidirectional = ... # type: FbxConnection.EType

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxConnection') -> None: ...


class FbxConnectionPointFilter(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxConnectionPointFilter') -> None: ...

    def IsEqual(self, pConnectFilter: 'FbxConnectionPointFilter') -> bool: ...
    def GetUniqueId(self) -> int: ...
    def Unref(self) -> None: ...
    def Ref(self) -> 'FbxConnectionPointFilter': ...


class FbxPropertyFlags(sip.wrapper):

    class EFlags(enum.Enum):
        eNone = ... # type: FbxPropertyFlags.EFlags
        eStatic = ... # type: FbxPropertyFlags.EFlags
        eAnimatable = ... # type: FbxPropertyFlags.EFlags
        eAnimated = ... # type: FbxPropertyFlags.EFlags
        eImported = ... # type: FbxPropertyFlags.EFlags
        eUserDefined = ... # type: FbxPropertyFlags.EFlags
        eHidden = ... # type: FbxPropertyFlags.EFlags
        eNotSavable = ... # type: FbxPropertyFlags.EFlags
        eLockedMember0 = ... # type: FbxPropertyFlags.EFlags
        eLockedMember1 = ... # type: FbxPropertyFlags.EFlags
        eLockedMember2 = ... # type: FbxPropertyFlags.EFlags
        eLockedMember3 = ... # type: FbxPropertyFlags.EFlags
        eLockedAll = ... # type: FbxPropertyFlags.EFlags
        eMutedMember0 = ... # type: FbxPropertyFlags.EFlags
        eMutedMember1 = ... # type: FbxPropertyFlags.EFlags
        eMutedMember2 = ... # type: FbxPropertyFlags.EFlags
        eMutedMember3 = ... # type: FbxPropertyFlags.EFlags
        eMutedAll = ... # type: FbxPropertyFlags.EFlags
        eUIDisabled = ... # type: FbxPropertyFlags.EFlags
        eUIGroup = ... # type: FbxPropertyFlags.EFlags
        eUIBoolGroup = ... # type: FbxPropertyFlags.EFlags
        eUIExpanded = ... # type: FbxPropertyFlags.EFlags
        eUINoCaption = ... # type: FbxPropertyFlags.EFlags
        eUIPanel = ... # type: FbxPropertyFlags.EFlags
        eUILeftLabel = ... # type: FbxPropertyFlags.EFlags
        eUIHidden = ... # type: FbxPropertyFlags.EFlags
        eCtrlFlags = ... # type: FbxPropertyFlags.EFlags
        eUIFlags = ... # type: FbxPropertyFlags.EFlags
        eAllFlags = ... # type: FbxPropertyFlags.EFlags
        eFlagCount = ... # type: FbxPropertyFlags.EFlags

    class EInheritType(enum.Enum):
        eOverride = ... # type: FbxPropertyFlags.EInheritType
        eInherit = ... # type: FbxPropertyFlags.EInheritType
        eDeleted = ... # type: FbxPropertyFlags.EInheritType

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFlags') -> None: ...


class FbxPropertyValue(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyValue') -> None: ...

    def GetRef(self) -> int: ...
    def DecRef(self) -> None: ...
    def IncRef(self) -> None: ...
    def GetComponentCount(self) -> int: ...
    def GetSizeOf(self) -> int: ...
    def Set(self, pValue: sip.voidptr, pValueType: EFbxType) -> bool: ...
    def Get(self, pValue: sip.voidptr, pValueType: EFbxType) -> bool: ...
    def Destroy(self) -> None: ...
    @staticmethod
    def Create(pData: sip.voidptr, pType: EFbxType) -> 'FbxPropertyValue': ...


class FbxCriteria(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pCriteria: 'FbxCriteria') -> None: ...

    @staticmethod
    def IsProperty() -> 'FbxCriteria': ...
    @staticmethod
    def ObjectTypeStrict(pClassId: 'FbxClassId') -> 'FbxCriteria': ...
    @staticmethod
    def ObjectType(pClassId: 'FbxClassId') -> 'FbxCriteria': ...


class FbxProperty(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: 'FbxProperty') -> None: ...

    @typing.overload
    def Set(self, pValue: float) -> bool: ...
    @typing.overload
    def Set(self, pValue: FbxString) -> bool: ...
    @typing.overload
    def Set(self, pValue: FbxColor) -> bool: ...
    @typing.overload
    def Set(self, pValue: FbxDouble3) -> bool: ...
    @typing.overload
    def Set(self, pValue: FbxQuaternion) -> bool: ...
    @typing.overload
    def Set(self, pValue: FbxDouble4) -> bool: ...
    @typing.overload
    def Set(self, pValue: FbxDouble4x4) -> bool: ...
    @typing.overload
    def Set(self, pValue: FbxTime) -> bool: ...
    def ClearConnectCache(self) -> None: ...
    def FindDstProperty(self, pName: str, pStartIndex: int = ...) -> 'FbxProperty': ...
    def GetDstProperty(self, pIndex: int = ...) -> 'FbxProperty': ...
    def GetDstPropertyCount(self) -> int: ...
    def DisconnectDstProperty(self, pProperty: 'FbxProperty') -> bool: ...
    def IsConnectedDstProperty(self, pProperty: 'FbxProperty') -> bool: ...
    def ConnectDstProperty(self, pProperty: 'FbxProperty') -> bool: ...
    def FindSrcProperty(self, pName: str, pStartIndex: int = ...) -> 'FbxProperty': ...
    def GetSrcProperty(self, pIndex: int = ...) -> 'FbxProperty': ...
    def GetSrcPropertyCount(self) -> int: ...
    def DisconnectSrcProperty(self, pProperty: 'FbxProperty') -> bool: ...
    def IsConnectedSrcProperty(self, pProperty: 'FbxProperty') -> bool: ...
    def ConnectSrcProperty(self, pProperty: 'FbxProperty') -> bool: ...
    @typing.overload
    def FindDstObject(self, pName: str, pStartIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def FindDstObject(self, pCriteria: FbxCriteria, pName: str, pStartIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def GetDstObject(self, pIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def GetDstObject(self, pCriteria: FbxCriteria, pIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def GetDstObjectCount(self) -> int: ...
    @typing.overload
    def GetDstObjectCount(self, pCriteria: FbxCriteria) -> int: ...
    @typing.overload
    def DisconnectAllDstObject(self) -> bool: ...
    @typing.overload
    def DisconnectAllDstObject(self, pCriteria: FbxCriteria) -> bool: ...
    def DisconnectDstObject(self, pObject: 'FbxObject') -> bool: ...
    def IsConnectedDstObject(self, pObject: 'FbxObject') -> bool: ...
    def ConnectDstObject(self, pObject: 'FbxObject', pType: FbxConnection.EType = ...) -> bool: ...
    @typing.overload
    def FindSrcObject(self, pName: str, pStartIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def FindSrcObject(self, pCriteria: FbxCriteria, pName: str, pStartIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def GetSrcObject(self, pIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def GetSrcObject(self, pCriteria: FbxCriteria, pIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def GetSrcObjectCount(self) -> int: ...
    @typing.overload
    def GetSrcObjectCount(self, pCriteria: FbxCriteria) -> int: ...
    @typing.overload
    def DisconnectAllSrcObject(self) -> bool: ...
    @typing.overload
    def DisconnectAllSrcObject(self, pCriteria: FbxCriteria) -> bool: ...
    def DisconnectSrcObject(self, pObject: 'FbxObject') -> bool: ...
    def IsConnectedSrcObject(self, pObject: 'FbxObject') -> bool: ...
    def ConnectSrcObject(self, pObject: 'FbxObject', pType: FbxConnection.EType = ...) -> bool: ...
    @typing.overload
    def GetCurve(self, pAnimLayer: 'FbxAnimLayer', pCreateAsNeeded: bool = ...) -> 'FbxAnimCurve': ...
    @typing.overload
    def GetCurve(self, pAnimLayer: 'FbxAnimLayer', pChannel: str, pCreateAsNeeded: bool = ...) -> 'FbxAnimCurve': ...
    @typing.overload
    def GetCurve(self, pAnimLayer: 'FbxAnimLayer', pName: str, pChannel: str, pCreateAsNeeded: bool = ...) -> 'FbxAnimCurve': ...
    @typing.overload
    def GetCurveNode(self, pAnimLayer: 'FbxAnimLayer', pCreateAsNeeded: bool = ...) -> 'FbxAnimCurveNode': ...
    @typing.overload
    def GetCurveNode(self, pAnimStack: 'FbxAnimStack', pCreate: bool = ...) -> 'FbxAnimCurveNode': ...
    def CreateCurveNode(self, pAnimLayer: 'FbxAnimLayer') -> 'FbxAnimCurveNode': ...
    def EndCreateOrFindProperty(self) -> None: ...
    def BeginCreateOrFindProperty(self) -> None: ...
    @typing.overload
    def FindHierarchical(self, pName: str, pCaseSensitive: bool = ...) -> 'FbxProperty': ...
    @typing.overload
    def FindHierarchical(self, pName: str, pDataType: FbxDataType, pCaseSensitive: bool = ...) -> 'FbxProperty': ...
    @typing.overload
    def Find(self, pName: str, pCaseSensitive: bool = ...) -> 'FbxProperty': ...
    @typing.overload
    def Find(self, pName: str, pDataType: FbxDataType, pCaseSensitive: bool = ...) -> 'FbxProperty': ...
    def GetNextDescendent(self, pProperty: 'FbxProperty') -> 'FbxProperty': ...
    def GetFirstDescendent(self) -> 'FbxProperty': ...
    def GetSibling(self) -> 'FbxProperty': ...
    def GetChild(self) -> 'FbxProperty': ...
    def GetParent(self) -> 'FbxProperty': ...
    def IsDescendentOf(self, pAncestor: 'FbxProperty') -> bool: ...
    def IsChildOf(self, pParent: 'FbxProperty') -> bool: ...
    def IsRoot(self) -> bool: ...
    def GetEnumValue(self, pIndex: int) -> str: ...
    def RemoveEnumValue(self, pIndex: int) -> None: ...
    def SetEnumValue(self, pIndex: int, pStringValue: str) -> None: ...
    def GetEnumCount(self) -> int: ...
    def InsertEnumValue(self, pIndex: int, pStringValue: str) -> None: ...
    def AddEnumValue(self, pStringValue: str) -> int: ...
    def SetLimits(self, pMin: float, pMax: float) -> bool: ...
    def GetMaxLimit(self) -> float: ...
    def SetMaxLimit(self, pMax: float) -> bool: ...
    def HasMaxLimit(self) -> bool: ...
    def GetMinLimit(self) -> float: ...
    def HasMinLimit(self) -> bool: ...
    def SetMinLimit(self, pMin: float) -> bool: ...
    def SupportSetLimitAsDouble(self) -> bool: ...
    def Modified(self) -> bool: ...
    def SetValueInheritType(self, pType: FbxPropertyFlags.EInheritType) -> bool: ...
    def GetValueInheritType(self) -> FbxPropertyFlags.EInheritType: ...
    @staticmethod
    def HasDefaultValue(pProperty: 'FbxProperty') -> bool: ...
    def IsValid(self) -> bool: ...
    def CopyValue(self, pProp: 'FbxProperty') -> bool: ...
    def CompareValue(self, pProp: 'FbxProperty') -> bool: ...
    @typing.overload
    def __ne__(self, other: object): ...
    @typing.overload
    def __ne__(self, other: object): ...
    @typing.overload
    def __eq__(self, other: object): ...
    @typing.overload
    def __eq__(self, other: object): ...
    def ModifiedFlag(self, pFlag: FbxPropertyFlags.EFlags) -> bool: ...
    def SetFlagInheritType(self, pFlag: FbxPropertyFlags.EFlags, pType: FbxPropertyFlags.EInheritType) -> bool: ...
    def GetFlagInheritType(self, pFlag: FbxPropertyFlags.EFlags) -> FbxPropertyFlags.EInheritType: ...
    def GetFlag(self, pFlag: FbxPropertyFlags.EFlags) -> bool: ...
    def ModifyFlag(self, pFlag: FbxPropertyFlags.EFlags, pValue: bool) -> None: ...
    def GetUserTag(self) -> int: ...
    def SetUserTag(self, pTag: int) -> None: ...
    def GetFbxObject(self) -> 'FbxObject': ...
    def SetLabel(self, pLabel: FbxString) -> None: ...
    def GetLabel(self, pReturnNameIfEmpty: bool = ...) -> FbxString: ...
    def GetHierarchicalName(self) -> FbxString: ...
    def GetName(self) -> FbxString: ...
    def GetPropertyDataType(self) -> FbxDataType: ...
    def DestroyRecursively(self) -> None: ...
    def Destroy(self) -> None: ...
    @typing.overload
    @staticmethod
    def CreateFrom(pCompoundProperty: 'FbxProperty', pFromProperty: 'FbxProperty', pCheckForDup: bool = ...) -> 'FbxProperty': ...
    @typing.overload
    @staticmethod
    def CreateFrom(pObject: 'FbxObject', pFromProperty: 'FbxProperty', pCheckForDup: bool = ...) -> 'FbxProperty': ...
    @typing.overload
    @staticmethod
    def Create(pCompoundProperty: 'FbxProperty', pDataType: FbxDataType, pName: str, pLabel: typing.Optional[str] = ..., pCheckForDup: bool = ...) -> 'FbxProperty': ...
    @typing.overload
    @staticmethod
    def Create(pObject: 'FbxObject', pDataType: FbxDataType, pName: str, pLabel: typing.Optional[str] = ..., pCheckForDup: bool = ...) -> 'FbxProperty': ...


class FbxPropertyBool1(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyBool1') -> None: ...

    def Get(self) -> bool: ...


class FbxPropertyUChar1(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyUChar1') -> None: ...

    def Get(self) -> bytes: ...


class FbxPropertyInteger1(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyInteger1') -> None: ...

    def Get(self) -> int: ...


class FbxPropertyFloat1(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFloat1') -> None: ...

    def Get(self) -> float: ...


class FbxPropertyDouble1(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyDouble1') -> None: ...

    def Get(self) -> float: ...


class FbxPropertyDouble2(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyDouble2') -> None: ...

    def Get(self) -> FbxDouble2: ...


class FbxPropertyDouble3(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyDouble3') -> None: ...

    def Get(self) -> FbxDouble3: ...


class FbxPropertyDouble4(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyDouble4') -> None: ...

    def Get(self) -> FbxDouble4: ...


class FbxPropertyXMatrix(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyXMatrix') -> None: ...

    def Get(self) -> FbxAMatrix: ...


class FbxPropertyFbxTime(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxTime') -> None: ...

    def Get(self) -> FbxTime: ...


class FbxPropertyDateTime(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyDateTime') -> None: ...

    def Get(self) -> FbxDateTime: ...


class FbxPropertyEnum(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEnum') -> None: ...

    def Get(self) -> int: ...


class FbxPropertyString(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyString') -> None: ...

    def Get(self) -> FbxString: ...


class FbxPropertyEFbxRotationOrder(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEFbxRotationOrder') -> None: ...

    def Get(self) -> EFbxRotationOrder: ...


class FbxPropertyFbxTransformEInheritType(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxTransformEInheritType') -> None: ...

    def Get(self) -> FbxTransform.EInheritType: ...


class FbxPropertyFbxReference(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxReference') -> None: ...

    def Get(self) -> FbxReference: ...


class FbxPropertyBlob(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyBlob') -> None: ...

    def Get(self) -> FbxBlob: ...


class FbxPropertyEFbxQuatInterpMode(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEFbxQuatInterpMode') -> None: ...

    def Get(self) -> EFbxQuatInterpMode: ...


class FbxPropertyEAspectRatioMode(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEAspectRatioMode') -> None: ...

    def Get(self) -> 'FbxCamera.EAspectRatioMode': ...


class FbxPropertyEApertureMode(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEApertureMode') -> None: ...

    def Get(self) -> 'FbxCamera.EApertureMode': ...


class FbxPropertyEGateFit(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEGateFit') -> None: ...

    def Get(self) -> 'FbxCamera.EGateFit': ...


class FbxPropertyEFormat(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEFormat') -> None: ...

    def Get(self) -> 'FbxCamera.EFormat': ...


class FbxPropertyEApertureFormat(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEApertureFormat') -> None: ...

    def Get(self) -> 'FbxCamera.EApertureFormat': ...


class FbxPropertyEFilmRollOrder(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEFilmRollOrder') -> None: ...

    def Get(self) -> 'FbxCamera.EFilmRollOrder': ...


class FbxPropertyEFrontBackPlaneDisplayMode(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEFrontBackPlaneDisplayMode') -> None: ...

    def Get(self) -> 'FbxCamera.EFrontBackPlaneDisplayMode': ...


class FbxPropertyEFrontBackPlaneDistanceMode(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEFrontBackPlaneDistanceMode') -> None: ...

    def Get(self) -> 'FbxCamera.EFrontBackPlaneDistanceMode': ...


class FbxPropertyESafeAreaStyle(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyESafeAreaStyle') -> None: ...

    def Get(self) -> 'FbxCamera.ESafeAreaStyle': ...


class FbxPropertyEProjectionType(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEProjectionType') -> None: ...

    def Get(self) -> 'FbxCamera.EProjectionType': ...


class FbxPropertyEFocusDistanceSource(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEFocusDistanceSource') -> None: ...

    def Get(self) -> 'FbxCamera.EFocusDistanceSource': ...


class FbxPropertyEAntialiasingMethod(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEAntialiasingMethod') -> None: ...

    def Get(self) -> 'FbxCamera.EAntialiasingMethod': ...


class FbxPropertyESamplingType(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyESamplingType') -> None: ...

    def Get(self) -> 'FbxCamera.ESamplingType': ...


class FbxPropertyFbxCameraStereoEStereoType(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxCameraStereoEStereoType') -> None: ...

    def Get(self) -> 'FbxCameraStereo.EStereoType': ...


class FbxPropertyFbxCharacterEOffAutoUser(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxCharacterEOffAutoUser') -> None: ...

    def Get(self) -> 'FbxCharacter.EOffAutoUser': ...


class FbxPropertyFbxCharacterEPostureMode(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxCharacterEPostureMode') -> None: ...

    def Get(self) -> 'FbxCharacter.EPostureMode': ...


class FbxPropertyFbxCharacterEAutoUser(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxCharacterEAutoUser') -> None: ...

    def Get(self) -> 'FbxCharacter.EAutoUser': ...


class FbxPropertyFbxCharacterEFloorPivot(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxCharacterEFloorPivot') -> None: ...

    def Get(self) -> 'FbxCharacter.EFloorPivot': ...


class FbxPropertyFbxCharacterERollExtractionMode(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxCharacterERollExtractionMode') -> None: ...

    def Get(self) -> 'FbxCharacter.ERollExtractionMode': ...


class FbxPropertyFbxCharacterEHipsTranslationMode(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxCharacterEHipsTranslationMode') -> None: ...

    def Get(self) -> 'FbxCharacter.EHipsTranslationMode': ...


class FbxPropertyFbxCharacterEFootContactType(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxCharacterEFootContactType') -> None: ...

    def Get(self) -> 'FbxCharacter.EFootContactType': ...


class FbxPropertyFbxCharacterEHandContactType(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxCharacterEHandContactType') -> None: ...

    def Get(self) -> 'FbxCharacter.EHandContactType': ...


class FbxPropertyFbxCharacterEFingerContactMode(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxCharacterEFingerContactMode') -> None: ...

    def Get(self) -> 'FbxCharacter.EFingerContactMode': ...


class FbxPropertyFbxCharacterEContactBehaviour(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxCharacterEContactBehaviour') -> None: ...

    def Get(self) -> 'FbxCharacter.EContactBehaviour': ...


class FbxPropertyETextureUse6(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyETextureUse6') -> None: ...

    def Get(self) -> 'FbxTexture.ETextureUse6': ...


class FbxPropertyEUnifiedMappingType(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEUnifiedMappingType') -> None: ...

    def Get(self) -> 'FbxTexture.EUnifiedMappingType': ...


class FbxPropertyEWrapMode(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEWrapMode') -> None: ...

    def Get(self) -> 'FbxTexture.EWrapMode': ...


class FbxPropertyEBlendMode(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEBlendMode') -> None: ...

    def Get(self) -> 'FbxTexture.EBlendMode': ...


class FbxPropertyFbxNullELook(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxNullELook') -> None: ...

    def Get(self) -> 'FbxNull.ELook': ...


class FbxPropertyEType(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEType') -> None: ...

    def Get(self) -> 'FbxLight.EType': ...


class FbxPropertyEDecayType(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEDecayType') -> None: ...

    def Get(self) -> 'FbxLight.EDecayType': ...


class FbxPropertyEAreaLightShape(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyEAreaLightShape') -> None: ...

    def Get(self) -> 'FbxLight.EAreaLightShape': ...


class FbxPropertyELook(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyELook') -> None: ...

    def Get(self) -> 'FbxMarker.ELook': ...


class FbxPropertyFbxMediaClipEAccessMode(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxMediaClipEAccessMode') -> None: ...

    def Get(self) -> 'FbxMediaClip.EAccessMode': ...


class FbxPropertyFbxVideoEInterlaceMode(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxVideoEInterlaceMode') -> None: ...

    def Get(self) -> 'FbxVideo.EInterlaceMode': ...


class FbxPropertyFbxControlSetEType(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxControlSetEType') -> None: ...

    def Get(self) -> 'FbxControlSet.EType': ...


class FbxPropertyFbxVertexCacheDeformerType(FbxProperty):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pProperty: FbxProperty) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPropertyFbxVertexCacheDeformerType') -> None: ...

    def Get(self) -> 'FbxVertexCacheDeformer.ECacheChannelType': ...


class FbxAnimUtilities(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxAnimUtilities') -> None: ...

    @staticmethod
    def IsChannelAnimated(pObj: 'FbxObject', pPropertyName: str, pChannelName: typing.Optional[str] = ...) -> bool: ...
    @staticmethod
    def IsAnimated(pObj: 'FbxObject') -> bool: ...


class FbxUserNotification(sip.wrapper):

    class EEntryID(enum.Enum):
        eBindPoseInvalidObject = ... # type: FbxUserNotification.EEntryID
        eBindPoseInvalidRoot = ... # type: FbxUserNotification.EEntryID
        eBindPoseNotAllAncestorsNodes = ... # type: FbxUserNotification.EEntryID
        eBindPoseNotAllDeformingNodes = ... # type: FbxUserNotification.EEntryID
        eBindPoseNotAllAncestorsDefinitionNodes = ... # type: FbxUserNotification.EEntryID
        eBindPoseRelativeMatrix = ... # type: FbxUserNotification.EEntryID
        eEmbedMediaNotify = ... # type: FbxUserNotification.EEntryID
        eFileIONotify = ... # type: FbxUserNotification.EEntryID
        eFileIONotifyMaterial = ... # type: FbxUserNotification.EEntryID
        eFileIONotifyDXFNotSupportNurbs = ... # type: FbxUserNotification.EEntryID
        eEntryStartID = ... # type: FbxUserNotification.EEntryID

    def __init__(self, pManager: FbxManager, pLogFileName: FbxString, pSessionDescription: FbxString) -> None: ...

    def GetNbEntries(self) -> int: ...
    @typing.overload
    def AddDetail(self, pEntryId: int) -> int: ...
    @typing.overload
    def AddDetail(self, pEntryId: int, pString: FbxString) -> int: ...
    @typing.overload
    def AddDetail(self, pEntryId: int, pNode: 'FbxNode') -> int: ...
    def ClearAccumulator(self) -> None: ...
    def InitAccumulator(self) -> None: ...
    @staticmethod
    def Destroy(pManager: FbxManager) -> None: ...
    @staticmethod
    def Create(pManager: FbxManager, pLogFileName: FbxString, pSessionDescription: FbxString) -> 'FbxUserNotification': ...


class FbxTakeInfo(sip.wrapper):

    class EImportOffsetType(enum.Enum):
        eAbsolute = ... # type: FbxTakeInfo.EImportOffsetType
        eRelative = ... # type: FbxTakeInfo.EImportOffsetType

    mCurrentLayer = ... # type: int
    mDescription = ... # type: FbxString
    mImportName = ... # type: FbxString
    mImportOffset = ... # type: FbxTime
    mImportOffsetType = ... # type: 'FbxTakeInfo.EImportOffsetType'
    mLocalTimeSpan = ... # type: FbxTimeSpan
    mName = ... # type: FbxString
    mReferenceTimeSpan = ... # type: FbxTimeSpan
    mSelect = ... # type: bool

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pTakeInfo: 'FbxTakeInfo') -> None: ...

    def CopyLayers(self, pTakeInfo: 'FbxTakeInfo') -> None: ...


class FbxStatus(sip.wrapper):

    class EStatusCode(enum.Enum):
        eSuccess = ... # type: FbxStatus.EStatusCode
        eFailure = ... # type: FbxStatus.EStatusCode
        eInsufficientMemory = ... # type: FbxStatus.EStatusCode
        eInvalidParameter = ... # type: FbxStatus.EStatusCode
        eIndexOutOfRange = ... # type: FbxStatus.EStatusCode
        ePasswordError = ... # type: FbxStatus.EStatusCode
        eInvalidFileVersion = ... # type: FbxStatus.EStatusCode
        eInvalidFile = ... # type: FbxStatus.EStatusCode

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pCode: 'FbxStatus.EStatusCode') -> None: ...
    @typing.overload
    def __init__(self, rhs: 'FbxStatus') -> None: ...

    def GetErrorString(self) -> str: ...
    @typing.overload
    def SetCode(self, rhs: 'FbxStatus.EStatusCode') -> None: ...
    @typing.overload
    def SetCode(self, rhs: 'FbxStatus.EStatusCode', pErrorMsg: str, *a2) -> None: ...
    def GetCode(self) -> 'FbxStatus.EStatusCode': ...
    def Clear(self) -> None: ...
    def Error(self) -> bool: ...
    def __int__(self) -> bool: ...
    @typing.overload
    def __ne__(self, other: object): ...
    @typing.overload
    def __ne__(self, other: object): ...
    @typing.overload
    def __eq__(self, other: object): ...
    @typing.overload
    def __eq__(self, other: object): ...


class FbxStatistics(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxStatistics') -> None: ...

    def GetItemPair(self, pNum: int, pItemName: FbxString) -> typing.Tuple[bool, int]: ...
    def GetNbItems(self) -> int: ...
    def Reset(self) -> None: ...


class FbxProgress(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxProgress') -> None: ...

    def Cancel(self) -> None: ...
    def Complete(self, pStatus: typing.Optional[str] = ...) -> None: ...
    def GetProgress(self, pStatus: typing.Optional[FbxString] = ...) -> float: ...
    def Reset(self) -> None: ...
    def Update(self, pDelta: float, pStatus: typing.Optional[str] = ...) -> None: ...
    def SetThreshold(self, pSetThreshold: float) -> None: ...
    def SetTotal(self, pTotal: float) -> None: ...


class FbxBindingTableEntry(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxBindingTableEntry') -> None: ...

    def SetUserDataPtr(self, pData: sip.voidptr) -> None: ...
    def GetUserDataPtr(self) -> sip.voidptr: ...
    def GetEntryType(self, pAsSource: bool) -> str: ...
    def SetEntryType(self, pType: str, pAsSource: bool) -> None: ...
    def GetDestination(self) -> str: ...
    def SetDestination(self, pDestination: str) -> None: ...
    def GetSource(self) -> str: ...
    def SetSource(self, pSource: str) -> None: ...


class FbxGeometryConverter(sip.wrapper):

    @typing.overload
    def __init__(self, pManager: FbxManager) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxGeometryConverter') -> None: ...

    def RecenterSceneToWorldCenter(self, pScene: 'FbxScene', pThreshold: float) -> bool: ...
    def SplitMeshPerMaterial(self, pMesh: 'FbxMesh', pReplace: bool) -> bool: ...
    def SplitMeshesPerMaterial(self, pScene: 'FbxScene', pReplace: bool) -> bool: ...
    def ComputeEdgeSmoothingFromPolygonSmoothing(self, pMesh: 'FbxMesh', pIndex: int = ...) -> bool: ...
    def ComputePolygonSmoothingFromEdgeSmoothing(self, pMesh: 'FbxMesh', pIndex: int = ...) -> bool: ...
    def ComputeEdgeSmoothingFromNormals(self, pMesh: 'FbxMesh') -> bool: ...
    def EmulateNormalsByPolygonVertex(self, pMesh: 'FbxMesh') -> bool: ...
    def FlipNurbsSurface(self, pNurb: 'FbxNurbsSurface', pSwapUV: bool, pSwapClusters: bool) -> 'FbxNurbsSurface': ...
    def FlipNurbs(self, pNurb: 'FbxNurbs', pSwapUV: bool, pSwapClusters: bool) -> 'FbxNurbs': ...
    def ConvertNurbsSurfaceToNurbsInPlace(self, pNode: 'FbxNode') -> bool: ...
    def ConvertNurbsToNurbsSurfaceInPlace(self, pNode: 'FbxNode') -> bool: ...
    def ConvertNurbsSurfaceToNurbs(self, pNurb: 'FbxNurbsSurface') -> 'FbxNurbs': ...
    def ConvertNurbsToNurbsSurface(self, pNurb: 'FbxNurbs') -> 'FbxNurbsSurface': ...
    def ConvertPatchToNurbsSurfaceInPlace(self, pNode: 'FbxNode') -> bool: ...
    def ConvertPatchToNurbsSurface(self, pPatch: 'FbxPatch') -> 'FbxNurbsSurface': ...
    def ConvertPatchToNurbsInPlace(self, pNode: 'FbxNode') -> bool: ...
    def ConvertPatchToNurbs(self, pPatch: 'FbxPatch') -> 'FbxNurbs': ...
    def MergeMeshes(self, pMeshNodes: FbxNodeArray, pNodeName: str, pScene: 'FbxScene') -> 'FbxNode': ...
    def ComputeGeometryControlPointsWeightedMapping(self, pSrcGeom: 'FbxGeometry', pDstGeom: 'FbxGeometry', pSrcToDstWeightedMapping: 'FbxWeightedMapping', pSwapUV: bool = ...) -> bool: ...
    @typing.overload
    def Triangulate(self, pScene: 'FbxScene', pReplace: bool, pLegacy: bool = ...) -> bool: ...
    @typing.overload
    def Triangulate(self, pNodeAttribute: 'FbxNodeAttribute', pReplace: bool, pLegacy: bool = ...) -> 'FbxNodeAttribute': ...


class FbxWeightedMapping(sip.wrapper):

    class ESet(enum.Enum):
        eSource = ... # type: FbxWeightedMapping.ESet
        eDestination = ... # type: FbxWeightedMapping.ESet

    class Element(sip.wrapper):

        mIndex = ... # type: int
        mWeight = ... # type: float

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'FbxWeightedMapping.Element') -> None: ...

    @typing.overload
    def __init__(self, pSourceSize: int, pDestinationSize: int) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxWeightedMapping') -> None: ...

    def Normalize(self, pSet: 'FbxWeightedMapping.ESet', pAbsoluteValue: bool) -> None: ...
    def GetRelationSum(self, pSet: 'FbxWeightedMapping.ESet', pElement: int, pAbsoluteValue: bool) -> float: ...
    def GetRelationIndex(self, pSet: 'FbxWeightedMapping.ESet', pElementInSet: int, pElementInOtherSet: int) -> int: ...
    def GetRelation(self, pSet: 'FbxWeightedMapping.ESet', pElement: int, pIndex: int) -> 'FbxWeightedMapping.Element': ...
    def GetRelationCount(self, pSet: 'FbxWeightedMapping.ESet', pElement: int) -> int: ...
    def GetElementCount(self, pSet: 'FbxWeightedMapping.ESet') -> int: ...
    def Add(self, pSourceIndex: int, pDestinationIndex: int, pWeight: float) -> None: ...
    def Reset(self, pSourceSize: int, pDestinationSize: int) -> None: ...


class FbxLayer(sip.wrapper):

    def CreateLayerElementOfType(self, pType: 'FbxLayerElement.EType', pIsUV: bool = ...) -> 'FbxLayerElement': ...
    def SetVisibility(self, pVisibility: 'FbxLayerElementVisibility') -> None: ...
    def SetEdgeCrease(self, pCrease: 'FbxLayerElementCrease') -> None: ...
    def SetVertexCrease(self, pCrease: 'FbxLayerElementCrease') -> None: ...
    def SetSmoothing(self, pSmoothing: 'FbxLayerElementSmoothing') -> None: ...
    def SetVertexColors(self, pVertexColors: 'FbxLayerElementVertexColor') -> None: ...
    def SetUVs(self, pUVs: 'FbxLayerElementUV', pTypeIdentifier: 'FbxLayerElement.EType' = ...) -> None: ...
    def SetPolygonGroups(self, pPolygonGroups: 'FbxLayerElementPolygonGroup') -> None: ...
    def SetMaterials(self, pMaterials: 'FbxLayerElementMaterial') -> None: ...
    def SetTangents(self, pTangents: 'FbxLayerElementTangent') -> None: ...
    def SetBinormals(self, pBinormals: 'FbxLayerElementBinormal') -> None: ...
    def SetNormals(self, pNormals: 'FbxLayerElementNormal') -> None: ...
    def GetLayerElementOfType(self, pType: 'FbxLayerElement.EType', pIsUV: bool = ...) -> 'FbxLayerElement': ...
    def SetTextures(self, pType: 'FbxLayerElement.EType', pTextures: 'FbxLayerElementTexture') -> None: ...
    def GetTextures(self, pType: 'FbxLayerElement.EType') -> 'FbxLayerElementTexture': ...
    def GetVisibility(self) -> 'FbxLayerElementVisibility': ...
    def GetEdgeCrease(self) -> 'FbxLayerElementCrease': ...
    def GetVertexCrease(self) -> 'FbxLayerElementCrease': ...
    def GetSmoothing(self) -> 'FbxLayerElementSmoothing': ...
    def GetVertexColors(self) -> 'FbxLayerElementVertexColor': ...
    def GetUVSets(self) -> typing.List: ...
    def GetUVSetChannels(self) -> FbxLayerElementTypeArray: ...
    def GetUVSetCount(self) -> int: ...
    def GetUVs(self, pTypeIdentifier: 'FbxLayerElement.EType' = ...) -> 'FbxLayerElementUV': ...
    def GetPolygonGroups(self) -> 'FbxLayerElementPolygonGroup': ...
    def GetMaterials(self) -> 'FbxLayerElementMaterial': ...
    def GetBinormals(self) -> 'FbxLayerElementBinormal': ...
    def GetTangents(self) -> 'FbxLayerElementTangent': ...
    def GetNormals(self) -> 'FbxLayerElementNormal': ...


class FbxLayerElement(sip.wrapper):

    class EReferenceMode(enum.Enum):
        eDirect = ... # type: FbxLayerElement.EReferenceMode
        eIndex = ... # type: FbxLayerElement.EReferenceMode
        eIndexToDirect = ... # type: FbxLayerElement.EReferenceMode

    class EMappingMode(enum.Enum):
        eNone = ... # type: FbxLayerElement.EMappingMode
        eByControlPoint = ... # type: FbxLayerElement.EMappingMode
        eByPolygonVertex = ... # type: FbxLayerElement.EMappingMode
        eByPolygon = ... # type: FbxLayerElement.EMappingMode
        eByEdge = ... # type: FbxLayerElement.EMappingMode
        eAllSame = ... # type: FbxLayerElement.EMappingMode

    class EType(enum.Enum):
        eUnknown = ... # type: FbxLayerElement.EType
        eNormal = ... # type: FbxLayerElement.EType
        eBiNormal = ... # type: FbxLayerElement.EType
        eTangent = ... # type: FbxLayerElement.EType
        eMaterial = ... # type: FbxLayerElement.EType
        ePolygonGroup = ... # type: FbxLayerElement.EType
        eUV = ... # type: FbxLayerElement.EType
        eVertexColor = ... # type: FbxLayerElement.EType
        eSmoothing = ... # type: FbxLayerElement.EType
        eVertexCrease = ... # type: FbxLayerElement.EType
        eEdgeCrease = ... # type: FbxLayerElement.EType
        eHole = ... # type: FbxLayerElement.EType
        eUserData = ... # type: FbxLayerElement.EType
        eVisibility = ... # type: FbxLayerElement.EType
        eTextureDiffuse = ... # type: FbxLayerElement.EType
        eTextureDiffuseFactor = ... # type: FbxLayerElement.EType
        eTextureEmissive = ... # type: FbxLayerElement.EType
        eTextureEmissiveFactor = ... # type: FbxLayerElement.EType
        eTextureAmbient = ... # type: FbxLayerElement.EType
        eTextureAmbientFactor = ... # type: FbxLayerElement.EType
        eTextureSpecular = ... # type: FbxLayerElement.EType
        eTextureSpecularFactor = ... # type: FbxLayerElement.EType
        eTextureShininess = ... # type: FbxLayerElement.EType
        eTextureNormalMap = ... # type: FbxLayerElement.EType
        eTextureBump = ... # type: FbxLayerElement.EType
        eTextureTransparency = ... # type: FbxLayerElement.EType
        eTextureTransparencyFactor = ... # type: FbxLayerElement.EType
        eTextureReflection = ... # type: FbxLayerElement.EType
        eTextureReflectionFactor = ... # type: FbxLayerElement.EType
        eTextureDisplacement = ... # type: FbxLayerElement.EType
        eTextureDisplacementVector = ... # type: FbxLayerElement.EType
        eTypeCount = ... # type: FbxLayerElement.EType

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElement') -> None: ...

    def __ne__(self, other: object): ...
    def Destroy(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetName(self) -> str: ...
    def SetName(self, pName: str) -> None: ...
    def GetReferenceMode(self) -> 'FbxLayerElement.EReferenceMode': ...
    def GetMappingMode(self) -> 'FbxLayerElement.EMappingMode': ...
    def SetReferenceMode(self, pReferenceMode: 'FbxLayerElement.EReferenceMode') -> None: ...
    def SetMappingMode(self, pMappingMode: 'FbxLayerElement.EMappingMode') -> None: ...
    @staticmethod
    def sTextureChannelNames(index: int) -> str: ...
    @staticmethod
    def sTextureDataTypes(index: int) -> FbxDataType: ...
    @staticmethod
    def sNonTextureNames(index: int) -> str: ...
    @staticmethod
    def sTextureUVNames(index: int) -> str: ...
    @staticmethod
    def sTextureNames(index: int) -> str: ...
    @staticmethod
    def sTypeNonTextureCount() -> int: ...
    @staticmethod
    def sTypeNonTextureEndIndex() -> int: ...
    @staticmethod
    def sTypeNonTextureStartIndex() -> int: ...
    @staticmethod
    def sTypeTextureCount() -> int: ...
    @staticmethod
    def sTypeTextureEndIndex() -> int: ...
    @staticmethod
    def sTypeTextureStartIndex() -> int: ...


class FbxLayerElementTemplate_int(FbxLayerElement):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementTemplate_int') -> None: ...

    def __ne__(self, other: object): ...
    def RemapIndexTo(self, pNewMapping: FbxLayerElement.EMappingMode) -> int: ...
    def __eq__(self, other: object): ...
    def Clear(self) -> bool: ...
    def GetIndexArray(self) -> 'FbxLayerElementArrayTemplate_int': ...
    def GetDirectArray(self) -> 'FbxLayerElementArrayTemplate_int': ...


class FbxLayerElementTemplate_bool(FbxLayerElement):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementTemplate_bool') -> None: ...

    def __ne__(self, other: object): ...
    def RemapIndexTo(self, pNewMapping: FbxLayerElement.EMappingMode) -> int: ...
    def __eq__(self, other: object): ...
    def Clear(self) -> bool: ...
    def GetIndexArray(self) -> 'FbxLayerElementArrayTemplate_int': ...
    def GetDirectArray(self) -> 'FbxLayerElementArrayTemplate_bool': ...


class FbxLayerElementTemplate_double(FbxLayerElement):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementTemplate_double') -> None: ...

    def __ne__(self, other: object): ...
    def RemapIndexTo(self, pNewMapping: FbxLayerElement.EMappingMode) -> int: ...
    def __eq__(self, other: object): ...
    def Clear(self) -> bool: ...
    def GetIndexArray(self) -> 'FbxLayerElementArrayTemplate_int': ...
    def GetDirectArray(self) -> 'FbxLayerElementArrayTemplate_double': ...


class FbxLayerElementTemplate_FbxVector4(FbxLayerElement):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementTemplate_FbxVector4') -> None: ...

    def __ne__(self, other: object): ...
    def RemapIndexTo(self, pNewMapping: FbxLayerElement.EMappingMode) -> int: ...
    def __eq__(self, other: object): ...
    def Clear(self) -> bool: ...
    def GetIndexArray(self) -> 'FbxLayerElementArrayTemplate_int': ...
    def GetDirectArray(self) -> 'FbxLayerElementArrayTemplate_FbxVector4': ...


class FbxLayerElementTemplate_FbxVector2(FbxLayerElement):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementTemplate_FbxVector2') -> None: ...

    def __ne__(self, other: object): ...
    def RemapIndexTo(self, pNewMapping: FbxLayerElement.EMappingMode) -> int: ...
    def __eq__(self, other: object): ...
    def Clear(self) -> bool: ...
    def GetIndexArray(self) -> 'FbxLayerElementArrayTemplate_int': ...
    def GetDirectArray(self) -> 'FbxLayerElementArrayTemplate_FbxVector2': ...


class FbxLayerElementTemplate_HFbxSurfaceMaterial(FbxLayerElement):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementTemplate_HFbxSurfaceMaterial') -> None: ...

    def __ne__(self, other: object): ...
    def RemapIndexTo(self, pNewMapping: FbxLayerElement.EMappingMode) -> int: ...
    def __eq__(self, other: object): ...
    def Clear(self) -> bool: ...
    def GetIndexArray(self) -> 'FbxLayerElementArrayTemplate_int': ...
    def GetDirectArray(self) -> 'FbxLayerElementArrayTemplate_HFbxSurfaceMaterial': ...


class FbxLayerElementTemplate_TexturePtr(FbxLayerElement):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementTemplate_TexturePtr') -> None: ...

    def __ne__(self, other: object): ...
    def RemapIndexTo(self, pNewMapping: FbxLayerElement.EMappingMode) -> int: ...
    def __eq__(self, other: object): ...
    def Clear(self) -> bool: ...
    def GetIndexArray(self) -> 'FbxLayerElementArrayTemplate_int': ...
    def GetDirectArray(self) -> 'FbxLayerElementArrayTemplate_HFbxTexture': ...


class FbxLayerElementTemplate_FbxColor(FbxLayerElement):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementTemplate_FbxColor') -> None: ...

    def __ne__(self, other: object): ...
    def RemapIndexTo(self, pNewMapping: FbxLayerElement.EMappingMode) -> int: ...
    def __eq__(self, other: object): ...
    def Clear(self) -> bool: ...
    def GetIndexArray(self) -> 'FbxLayerElementArrayTemplate_int': ...
    def GetDirectArray(self) -> 'FbxLayerElementArrayTemplate_FbxColor': ...


class FbxLayerElementNormal(FbxLayerElementTemplate_FbxVector4):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementNormal') -> None: ...

    @staticmethod
    def Create(pOwner: 'FbxLayerContainer', pName: str) -> 'FbxLayerElementNormal': ...


class FbxLayerElementBinormal(FbxLayerElementTemplate_FbxVector4):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementBinormal') -> None: ...

    @staticmethod
    def Create(pOwner: 'FbxLayerContainer', pName: str) -> 'FbxLayerElementBinormal': ...


class FbxLayerElementTangent(FbxLayerElementTemplate_FbxVector4):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementTangent') -> None: ...

    @staticmethod
    def Create(pOwner: 'FbxLayerContainer', pName: str) -> 'FbxLayerElementTangent': ...


class FbxLayerElementMaterial(FbxLayerElementTemplate_HFbxSurfaceMaterial):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementMaterial') -> None: ...

    @staticmethod
    def Create(pOwner: 'FbxLayerContainer', pName: str) -> 'FbxLayerElementMaterial': ...


class FbxLayerElementPolygonGroup(FbxLayerElementTemplate_int):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementPolygonGroup') -> None: ...

    @staticmethod
    def Create(pOwner: 'FbxLayerContainer', pName: str) -> 'FbxLayerElementPolygonGroup': ...


class FbxLayerElementUV(FbxLayerElementTemplate_FbxVector2):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementUV') -> None: ...

    @staticmethod
    def Create(pOwner: 'FbxLayerContainer', pName: str) -> 'FbxLayerElementUV': ...


class FbxLayerElementVertexColor(FbxLayerElementTemplate_FbxColor):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementVertexColor') -> None: ...

    @staticmethod
    def Create(pOwner: 'FbxLayerContainer', pName: str) -> 'FbxLayerElementVertexColor': ...


class FbxLayerElementSmoothing(FbxLayerElementTemplate_int):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementSmoothing') -> None: ...

    def SetReferenceMode(self, pMode: FbxLayerElement.EReferenceMode) -> None: ...
    @staticmethod
    def Create(pOwner: 'FbxLayerContainer', pName: str) -> 'FbxLayerElementSmoothing': ...


class FbxLayerElementCrease(FbxLayerElementTemplate_double):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementCrease') -> None: ...

    def SetReferenceMode(self, pMode: FbxLayerElement.EReferenceMode) -> None: ...
    @staticmethod
    def Create(pOwner: 'FbxLayerContainer', pName: str) -> 'FbxLayerElementCrease': ...


class FbxLayerElementVisibility(FbxLayerElementTemplate_bool):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementVisibility') -> None: ...

    @staticmethod
    def Create(pOwner: 'FbxLayerContainer', pName: str) -> 'FbxLayerElementVisibility': ...


class FbxLayerElementTexture(FbxLayerElementTemplate_TexturePtr):

    class EBlendMode(enum.Enum):
        eTranslucent = ... # type: FbxLayerElementTexture.EBlendMode
        eAdd = ... # type: FbxLayerElementTexture.EBlendMode
        eModulate = ... # type: FbxLayerElementTexture.EBlendMode
        eModulate2 = ... # type: FbxLayerElementTexture.EBlendMode
        eOver = ... # type: FbxLayerElementTexture.EBlendMode
        eNormal = ... # type: FbxLayerElementTexture.EBlendMode
        eDissolve = ... # type: FbxLayerElementTexture.EBlendMode
        eDarken = ... # type: FbxLayerElementTexture.EBlendMode
        eColorBurn = ... # type: FbxLayerElementTexture.EBlendMode
        eLinearBurn = ... # type: FbxLayerElementTexture.EBlendMode
        eDarkerColor = ... # type: FbxLayerElementTexture.EBlendMode
        eLighten = ... # type: FbxLayerElementTexture.EBlendMode
        eScreen = ... # type: FbxLayerElementTexture.EBlendMode
        eColorDodge = ... # type: FbxLayerElementTexture.EBlendMode
        eLinearDodge = ... # type: FbxLayerElementTexture.EBlendMode
        eLighterColor = ... # type: FbxLayerElementTexture.EBlendMode
        eSoftLight = ... # type: FbxLayerElementTexture.EBlendMode
        eHardLight = ... # type: FbxLayerElementTexture.EBlendMode
        eVividLight = ... # type: FbxLayerElementTexture.EBlendMode
        eLinearLight = ... # type: FbxLayerElementTexture.EBlendMode
        ePinLight = ... # type: FbxLayerElementTexture.EBlendMode
        eHardMix = ... # type: FbxLayerElementTexture.EBlendMode
        eDifference = ... # type: FbxLayerElementTexture.EBlendMode
        eExclusion = ... # type: FbxLayerElementTexture.EBlendMode
        eSubtract = ... # type: FbxLayerElementTexture.EBlendMode
        eDivide = ... # type: FbxLayerElementTexture.EBlendMode
        eHue = ... # type: FbxLayerElementTexture.EBlendMode
        eSaturation = ... # type: FbxLayerElementTexture.EBlendMode
        eColor = ... # type: FbxLayerElementTexture.EBlendMode
        eLuminosity = ... # type: FbxLayerElementTexture.EBlendMode
        eOverlay = ... # type: FbxLayerElementTexture.EBlendMode
        eBlendModeCount = ... # type: FbxLayerElementTexture.EBlendMode

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementTexture') -> None: ...

    def GetAlpha(self) -> float: ...
    def GetBlendMode(self) -> 'FbxLayerElementTexture.EBlendMode': ...
    def SetAlpha(self, pAlpha: float) -> None: ...
    def SetBlendMode(self, pBlendMode: 'FbxLayerElementTexture.EBlendMode') -> None: ...
    @staticmethod
    def Create(pOwner: 'FbxLayerContainer', pName: str) -> 'FbxLayerElementTexture': ...


class LockAccessStatus(sip.wrapper):

    class ELockAccessStatus(enum.Enum):
        eSuccess = ... # type: LockAccessStatus.ELockAccessStatus
        eUnsupportedDTConversion = ... # type: LockAccessStatus.ELockAccessStatus
        eCorruptedCopyback = ... # type: LockAccessStatus.ELockAccessStatus
        eBadValue = ... # type: LockAccessStatus.ELockAccessStatus
        eLockMismatch = ... # type: LockAccessStatus.ELockAccessStatus
        eNoWriteLock = ... # type: LockAccessStatus.ELockAccessStatus
        eNoReadLock = ... # type: LockAccessStatus.ELockAccessStatus
        eNotOwner = ... # type: LockAccessStatus.ELockAccessStatus
        eDirectLockExist = ... # type: LockAccessStatus.ELockAccessStatus

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'LockAccessStatus') -> None: ...


class FbxLayerElementArray(sip.wrapper):

    class ELockMode(enum.Enum):
        eReadLock = ... # type: FbxLayerElementArray.ELockMode
        eWriteLock = ... # type: FbxLayerElementArray.ELockMode
        eReadWriteLock = ... # type: FbxLayerElementArray.ELockMode

    @typing.overload
    def __init__(self, pDataType: EFbxType) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementArray') -> None: ...

    def IsEqual(self, pArray: 'FbxLayerElementArray') -> bool: ...
    def Find(self, pItem: sip.voidptr, pValueType: EFbxType) -> int: ...
    def GetLast(self, pValueType: EFbxType) -> typing.Tuple[bool, sip.voidptr]: ...
    def GetFirst(self, pValueType: EFbxType) -> typing.Tuple[bool, sip.voidptr]: ...
    def GetAt(self, pIndex: int, pValueType: EFbxType) -> typing.Tuple[bool, sip.voidptr]: ...
    def RemoveIt(self, pValueType: EFbxType) -> typing.Tuple[bool, sip.voidptr]: ...
    def RemoveLast(self, pValueType: EFbxType) -> sip.voidptr: ...
    def RemoveAt(self, pIndex: int, pValueType: EFbxType) -> sip.voidptr: ...
    def SetLast(self, pItem: sip.voidptr, pValueType: EFbxType) -> None: ...
    def SetAt(self, pIndex: int, pItem: sip.voidptr, pValueType: EFbxType) -> None: ...
    def InsertAt(self, pIndex: int, pItem: sip.voidptr, pValueType: EFbxType) -> int: ...
    def Add(self, pItem: sip.voidptr, pValueType: EFbxType) -> int: ...
    def Resize(self, pItemCount: int) -> None: ...
    def Clear(self) -> None: ...
    def SetCount(self, pCount: int) -> None: ...
    def GetCount(self) -> int: ...
    def GetStride(self) -> int: ...
    @typing.overload
    def Release(self, pDataType: EFbxType) -> sip.voidptr: ...
    @typing.overload
    def Release(self) -> sip.voidptr: ...
    @typing.overload
    def GetLocked(self, pLockMode: 'FbxLayerElementArray.ELockMode', pDataType: EFbxType) -> sip.voidptr: ...
    @typing.overload
    def GetLocked(self, pLockMode: 'FbxLayerElementArray.ELockMode' = ...) -> sip.voidptr: ...
    def ReadWriteUnlock(self) -> None: ...
    def ReadWriteLock(self) -> bool: ...
    def WriteUnlock(self) -> None: ...
    def WriteLock(self) -> bool: ...
    def ReadUnlock(self) -> int: ...
    def ReadLock(self) -> int: ...
    def IsInUse(self) -> bool: ...
    def GetReadLockCount(self) -> int: ...
    def IsWriteLocked(self) -> bool: ...
    def GetStatus(self) -> LockAccessStatus.ELockAccessStatus: ...
    def ClearStatus(self) -> None: ...


class FbxLayerElementArrayTemplate_FbxVector4(FbxLayerElementArray):

    @typing.overload
    def __init__(self, pDataType: EFbxType) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementArrayTemplate_FbxVector4') -> None: ...

    def __getitem__(self, pIndex: int) -> FbxVector4: ...
    def FindBefore(self, pBeforeIndex: int, pItem: FbxVector4) -> int: ...
    def FindAfter(self, pAfterIndex: int, pItem: FbxVector4) -> int: ...
    def Find(self, pItem: FbxVector4) -> int: ...
    def GetLast(self) -> FbxVector4: ...
    def GetFirst(self) -> FbxVector4: ...
    def GetAt(self, pIndex: int) -> FbxVector4: ...
    def RemoveIt(self, pItem: FbxVector4) -> bool: ...
    def RemoveLast(self) -> FbxVector4: ...
    def RemoveAt(self, pIndex: int) -> FbxVector4: ...
    def SetLast(self, pItem: FbxVector4) -> None: ...
    def SetAt(self, pIndex: int, pItem: FbxVector4) -> None: ...
    def InsertAt(self, pIndex: int, pItem: FbxVector4) -> int: ...
    def Add(self, pItem: FbxVector4) -> int: ...


class FbxLayerElementArrayTemplate_FbxVector2(FbxLayerElementArray):

    @typing.overload
    def __init__(self, pDataType: EFbxType) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementArrayTemplate_FbxVector2') -> None: ...

    def __getitem__(self, pIndex: int) -> FbxVector2: ...
    def FindBefore(self, pBeforeIndex: int, pItem: FbxVector2) -> int: ...
    def FindAfter(self, pAfterIndex: int, pItem: FbxVector2) -> int: ...
    def Find(self, pItem: FbxVector2) -> int: ...
    def GetLast(self) -> FbxVector2: ...
    def GetFirst(self) -> FbxVector2: ...
    def GetAt(self, pIndex: int) -> FbxVector2: ...
    def RemoveIt(self, pItem: FbxVector2) -> bool: ...
    def RemoveLast(self) -> FbxVector2: ...
    def RemoveAt(self, pIndex: int) -> FbxVector2: ...
    def SetLast(self, pItem: FbxVector2) -> None: ...
    def SetAt(self, pIndex: int, pItem: FbxVector2) -> None: ...
    def InsertAt(self, pIndex: int, pItem: FbxVector2) -> int: ...
    def Add(self, pItem: FbxVector2) -> int: ...


class FbxLayerElementArrayTemplate_FbxColor(FbxLayerElementArray):

    @typing.overload
    def __init__(self, pDataType: EFbxType) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementArrayTemplate_FbxColor') -> None: ...

    def __getitem__(self, pIndex: int) -> FbxColor: ...
    def FindBefore(self, pBeforeIndex: int, pItem: FbxColor) -> int: ...
    def FindAfter(self, pAfterIndex: int, pItem: FbxColor) -> int: ...
    def Find(self, pItem: FbxColor) -> int: ...
    def GetLast(self) -> FbxColor: ...
    def GetFirst(self) -> FbxColor: ...
    def GetAt(self, pIndex: int) -> FbxColor: ...
    def RemoveIt(self, pItem: FbxColor) -> bool: ...
    def RemoveLast(self) -> FbxColor: ...
    def RemoveAt(self, pIndex: int) -> FbxColor: ...
    def SetLast(self, pItem: FbxColor) -> None: ...
    def SetAt(self, pIndex: int, pItem: FbxColor) -> None: ...
    def InsertAt(self, pIndex: int, pItem: FbxColor) -> int: ...
    def Add(self, pItem: FbxColor) -> int: ...


class FbxLayerElementArrayTemplate_int(FbxLayerElementArray):

    @typing.overload
    def __init__(self, pDataType: EFbxType) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementArrayTemplate_int') -> None: ...

    def __getitem__(self, pIndex: int) -> int: ...
    def FindBefore(self, pBeforeIndex: int, pItem: int) -> int: ...
    def FindAfter(self, pAfterIndex: int, pItem: int) -> int: ...
    def Find(self) -> typing.Tuple[int, int]: ...
    def GetLast(self) -> int: ...
    def GetFirst(self) -> int: ...
    def GetAt(self, pIndex: int) -> int: ...
    def RemoveIt(self, pItem: int) -> bool: ...
    def RemoveLast(self) -> int: ...
    def RemoveAt(self, pIndex: int) -> int: ...
    def SetLast(self, pItem: int) -> None: ...
    def SetAt(self, pIndex: int, pItem: int) -> None: ...
    def InsertAt(self, pIndex: int, pItem: int) -> int: ...
    def Add(self, pItem: int) -> int: ...


class FbxLayerElementArrayTemplate_bool(FbxLayerElementArray):

    @typing.overload
    def __init__(self, pDataType: EFbxType) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementArrayTemplate_bool') -> None: ...

    def __getitem__(self, pIndex: int) -> bool: ...
    def FindBefore(self, pBeforeIndex: int, pItem: bool) -> int: ...
    def FindAfter(self, pAfterIndex: int, pItem: bool) -> int: ...
    def Find(self) -> typing.Tuple[int, bool]: ...
    def GetLast(self) -> bool: ...
    def GetFirst(self) -> bool: ...
    def GetAt(self, pIndex: int) -> bool: ...
    def RemoveIt(self, pItem: bool) -> bool: ...
    def RemoveLast(self) -> bool: ...
    def RemoveAt(self, pIndex: int) -> bool: ...
    def SetLast(self, pItem: bool) -> None: ...
    def SetAt(self, pIndex: int, pItem: bool) -> None: ...
    def InsertAt(self, pIndex: int, pItem: bool) -> int: ...
    def Add(self, pItem: bool) -> int: ...


class FbxLayerElementArrayTemplate_double(FbxLayerElementArray):

    @typing.overload
    def __init__(self, pDataType: EFbxType) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementArrayTemplate_double') -> None: ...

    def __getitem__(self, pIndex: int) -> float: ...
    def FindBefore(self, pBeforeIndex: int, pItem: float) -> int: ...
    def FindAfter(self, pAfterIndex: int, pItem: float) -> int: ...
    def Find(self) -> typing.Tuple[int, float]: ...
    def GetLast(self) -> float: ...
    def GetFirst(self) -> float: ...
    def GetAt(self, pIndex: int) -> float: ...
    def RemoveIt(self, pItem: float) -> bool: ...
    def RemoveLast(self) -> float: ...
    def RemoveAt(self, pIndex: int) -> float: ...
    def SetLast(self, pItem: float) -> None: ...
    def SetAt(self, pIndex: int, pItem: float) -> None: ...
    def InsertAt(self, pIndex: int, pItem: float) -> int: ...
    def Add(self, pItem: float) -> int: ...


class FbxLayerElementArrayTemplate_HFbxSurfaceMaterial(FbxLayerElementArray):

    @typing.overload
    def __init__(self, pDataType: EFbxType) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementArrayTemplate_HFbxSurfaceMaterial') -> None: ...

    def __getitem__(self, pIndex: int) -> 'FbxSurfaceMaterial': ...
    def FindBefore(self, pBeforeIndex: int, pItem: 'FbxSurfaceMaterial') -> int: ...
    def FindAfter(self, pAfterIndex: int, pItem: 'FbxSurfaceMaterial') -> int: ...
    def Find(self) -> typing.Tuple[int, 'FbxSurfaceMaterial']: ...
    def GetLast(self) -> 'FbxSurfaceMaterial': ...
    def GetFirst(self) -> 'FbxSurfaceMaterial': ...
    def GetAt(self, pIndex: int) -> 'FbxSurfaceMaterial': ...
    def RemoveIt(self, pItem: 'FbxSurfaceMaterial') -> bool: ...
    def RemoveLast(self) -> 'FbxSurfaceMaterial': ...
    def RemoveAt(self, pIndex: int) -> 'FbxSurfaceMaterial': ...
    def SetLast(self, pItem: 'FbxSurfaceMaterial') -> None: ...
    def SetAt(self, pIndex: int, pItem: 'FbxSurfaceMaterial') -> None: ...
    def InsertAt(self, pIndex: int, pItem: 'FbxSurfaceMaterial') -> int: ...
    def Add(self, pItem: 'FbxSurfaceMaterial') -> int: ...


class FbxLayerElementArrayTemplate_HFbxTexture(FbxLayerElementArray):

    @typing.overload
    def __init__(self, pDataType: EFbxType) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxLayerElementArrayTemplate_HFbxTexture') -> None: ...

    def __getitem__(self, pIndex: int) -> 'FbxTexture': ...
    def FindBefore(self, pBeforeIndex: int, pItem: 'FbxTexture') -> int: ...
    def FindAfter(self, pAfterIndex: int, pItem: 'FbxTexture') -> int: ...
    def Find(self) -> typing.Tuple[int, 'FbxTexture']: ...
    def GetLast(self) -> 'FbxTexture': ...
    def GetFirst(self) -> 'FbxTexture': ...
    def GetAt(self, pIndex: int) -> 'FbxTexture': ...
    def RemoveIt(self, pItem: 'FbxTexture') -> bool: ...
    def RemoveLast(self) -> 'FbxTexture': ...
    def RemoveAt(self, pIndex: int) -> 'FbxTexture': ...
    def SetLast(self, pItem: 'FbxTexture') -> None: ...
    def SetAt(self, pIndex: int, pItem: 'FbxTexture') -> None: ...
    def InsertAt(self, pIndex: int, pItem: 'FbxTexture') -> int: ...
    def Add(self, pItem: 'FbxTexture') -> int: ...


class FbxGlobalCameraSettings(sip.wrapper):

    class EViewingMode(enum.Enum):
        eStandard = ... # type: FbxGlobalCameraSettings.EViewingMode
        eXRay = ... # type: FbxGlobalCameraSettings.EViewingMode
        eModelsOnly = ... # type: FbxGlobalCameraSettings.EViewingMode

    def SetCameraSwitcher(self, pSwitcher: 'FbxCameraSwitcher') -> None: ...
    def GetCameraSwitcher(self) -> 'FbxCameraSwitcher': ...
    def GetCameraProducerBottom(self) -> 'FbxCamera': ...
    def GetCameraProducerTop(self) -> 'FbxCamera': ...
    def GetCameraProducerRight(self) -> 'FbxCamera': ...
    def GetCameraProducerLeft(self) -> 'FbxCamera': ...
    def GetCameraProducerBack(self) -> 'FbxCamera': ...
    def GetCameraProducerFront(self) -> 'FbxCamera': ...
    def GetCameraProducerPerspective(self) -> 'FbxCamera': ...
    def IsProducerCamera(self, pCamera: 'FbxCamera') -> bool: ...
    def DestroyProducerCameras(self) -> None: ...
    def CreateProducerCameras(self) -> None: ...
    def GetDefaultViewingMode(self) -> 'FbxGlobalCameraSettings.EViewingMode': ...
    def SetDefaultViewingMode(self, pViewingMode: 'FbxGlobalCameraSettings.EViewingMode') -> None: ...
    def RestoreDefaultSettings(self) -> None: ...
    def GetDefaultCamera(self) -> str: ...
    def SetDefaultCamera(self, pCameraName: str, pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...


class FbxGlobalLightSettings(sip.wrapper):

    class EFogMode(enum.Enum):
        eLinear = ... # type: FbxGlobalLightSettings.EFogMode
        eExponential = ... # type: FbxGlobalLightSettings.EFogMode
        eExponentialSquareRoot = ... # type: FbxGlobalLightSettings.EFogMode

    class ShadowPlane(sip.wrapper):

        mEnable = ... # type: bool
        mNormal = ... # type: FbxVector4
        mOrigin = ... # type: FbxVector4

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: 'FbxGlobalLightSettings.ShadowPlane') -> None: ...

    def __init__(self, a0: 'FbxGlobalLightSettings') -> None: ...

    def RemoveAllShadowPlanes(self) -> None: ...
    def AddShadowPlane(self, pShadowPlane: 'FbxGlobalLightSettings.ShadowPlane') -> None: ...
    def GetShadowPlane(self, pIndex: int, pStatus: typing.Optional[FbxStatus] = ...) -> 'FbxGlobalLightSettings.ShadowPlane': ...
    def GetShadowPlaneCount(self) -> int: ...
    def GetShadowIntensity(self) -> float: ...
    def SetShadowIntensity(self, pShadowIntensity: float) -> None: ...
    def GetShadowEnable(self) -> bool: ...
    def SetShadowEnable(self, pShadowEnable: bool) -> None: ...
    def GetFogEnd(self) -> float: ...
    def SetFogEnd(self, pEnd: float) -> None: ...
    def GetFogStart(self) -> float: ...
    def SetFogStart(self, pStart: float) -> None: ...
    def GetFogDensity(self) -> float: ...
    def SetFogDensity(self, pDensity: float) -> None: ...
    def GetFogMode(self) -> 'FbxGlobalLightSettings.EFogMode': ...
    def SetFogMode(self, pMode: 'FbxGlobalLightSettings.EFogMode') -> None: ...
    def GetFogColor(self) -> FbxColor: ...
    def SetFogColor(self, pColor: FbxColor) -> None: ...
    def GetFogEnable(self) -> bool: ...
    def SetFogEnable(self, pEnable: bool) -> None: ...
    def GetAmbientColor(self) -> FbxColor: ...
    def SetAmbientColor(self, pAmbientColor: FbxColor) -> None: ...


class FbxPeripheral(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxPeripheral') -> None: ...

    def UninitializeConnectionsOf(self, pObject: 'FbxObject') -> None: ...
    def InitializeConnectionsOf(self, pObject: 'FbxObject') -> None: ...
    def CanLoadContentOf(self, pObject: 'FbxObject') -> bool: ...
    def CanUnloadContentOf(self, pObject: 'FbxObject') -> bool: ...
    def LoadContentOf(self, pObject: 'FbxObject') -> bool: ...
    def UnloadContentOf(self, pObject: 'FbxObject') -> bool: ...
    def Reset(self) -> None: ...


class FbxRenamingStrategyInterface(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxRenamingStrategyInterface') -> None: ...

    def Clone(self) -> 'FbxRenamingStrategyInterface': ...
    def Rename(self, pName: FbxNameHandler) -> bool: ...
    def Clear(self) -> None: ...


class FbxRenamingStrategyNumber(FbxRenamingStrategyInterface):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxRenamingStrategyNumber') -> None: ...

    def Clone(self) -> FbxRenamingStrategyInterface: ...
    def Rename(self, pName: FbxNameHandler) -> bool: ...
    def Clear(self) -> None: ...


class FbxRenamingStrategy(FbxRenamingStrategyInterface):

    class EDirection(enum.Enum):
        eToFBX = ... # type: FbxRenamingStrategy.EDirection
        eFromFBX = ... # type: FbxRenamingStrategy.EDirection

    @typing.overload
    def __init__(self, pMod: 'FbxRenamingStrategy.EDirection', pOnCreationRun: bool = ...) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxRenamingStrategy') -> None: ...

    def Clone(self) -> FbxRenamingStrategyInterface: ...
    def Clear(self) -> None: ...
    def Rename(self, pName: FbxNameHandler) -> bool: ...


class FbxSceneRenamer(sip.wrapper):

    class ERenamingMode(enum.Enum):
        eNone = ... # type: FbxSceneRenamer.ERenamingMode
        eMAYA_TO_FBX5 = ... # type: FbxSceneRenamer.ERenamingMode
        eMAYA_TO_FBX_MB75 = ... # type: FbxSceneRenamer.ERenamingMode
        eMAYA_TO_FBX_MB70 = ... # type: FbxSceneRenamer.ERenamingMode
        eFBXMB75_TO_FBXMB70 = ... # type: FbxSceneRenamer.ERenamingMode
        eFBX_TO_FBX = ... # type: FbxSceneRenamer.ERenamingMode
        eMAYA_TO_FBX = ... # type: FbxSceneRenamer.ERenamingMode
        eFBX_TO_MAYA = ... # type: FbxSceneRenamer.ERenamingMode
        eLW_TO_FBX = ... # type: FbxSceneRenamer.ERenamingMode
        eFBX_TO_LW = ... # type: FbxSceneRenamer.ERenamingMode
        eXSI_TO_FBX = ... # type: FbxSceneRenamer.ERenamingMode
        eFBX_TO_XSI = ... # type: FbxSceneRenamer.ERenamingMode
        eMAX_TO_FBX = ... # type: FbxSceneRenamer.ERenamingMode
        eFBX_TO_MAX = ... # type: FbxSceneRenamer.ERenamingMode
        eMB_TO_FBX = ... # type: FbxSceneRenamer.ERenamingMode
        eFBX_TO_MB = ... # type: FbxSceneRenamer.ERenamingMode
        eDAE_TO_FBX = ... # type: FbxSceneRenamer.ERenamingMode
        eFBX_TO_DAE = ... # type: FbxSceneRenamer.ERenamingMode

    @typing.overload
    def __init__(self, pScene: 'FbxScene') -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxSceneRenamer') -> None: ...

    def RenameFor(self, pMode: 'FbxSceneRenamer.ERenamingMode') -> None: ...


class FbxObjectFilter(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxObjectFilter') -> None: ...

    def NotMatch(self, pObjectPtr: 'FbxObject') -> bool: ...
    def Match(self, pObjectPtr: 'FbxObject') -> bool: ...


class FbxNameFilter(FbxObjectFilter):

    @typing.overload
    def __init__(self, pTargetName: str) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxNameFilter') -> None: ...

    def Match(self, pObjectPtr: 'FbxObject') -> bool: ...


class FbxReader(sip.wrapper):

    class EFileOpenSpecialFlags(enum.Enum):
        eParseForGlobalSettings = ... # type: FbxReader.EFileOpenSpecialFlags
        eParseForStatistics = ... # type: FbxReader.EFileOpenSpecialFlags

    class EInfoRequest(enum.Enum):
        eInfoExtension = ... # type: FbxReader.EInfoRequest
        eInfoDescriptions = ... # type: FbxReader.EInfoRequest
        eReserved1 = ... # type: FbxReader.EInfoRequest

    @typing.overload
    def __init__(self, pManager: FbxManager, pID: int, pStatus: FbxStatus) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxReader') -> None: ...

    def SetProgressHandler(self, pProgress: FbxProgress) -> None: ...
    def SetIOSettings(self, pIOSettings: 'FbxIOSettings') -> None: ...
    def GetIOSettings(self) -> 'FbxIOSettings': ...
    def IsGenuine(self) -> bool: ...
    def GetDefaultRenderResolution(self, pCamName: FbxString, pResolutionMode: FbxString) -> typing.Tuple[bool, float, float]: ...
    def GetSceneInfo(self) -> 'FbxDocumentInfo': ...
    def GetStatistics(self, pStats: FbxStatistics) -> bool: ...
    def GetAxisInfo(self, pAxisSystem: FbxAxisSystem, pSystemUnits: FbxSystemUnit) -> bool: ...
    def PluginReadParameters(self, pParams: 'FbxObject') -> None: ...
    def Read(self, pDocument: 'FbxDocument') -> bool: ...
    def GetReadOptions(self, pParseFileAsNeeded: bool = ...) -> bool: ...
    def IsFileOpen(self) -> bool: ...
    def FileClose(self) -> bool: ...
    @typing.overload
    def FileOpen(self, pFileName: str) -> bool: ...
    @typing.overload
    def FileOpen(self, pFileName: str, pFlags: 'FbxReader.EFileOpenSpecialFlags') -> bool: ...
    def GetVersion(self) -> typing.Tuple[int, int, int]: ...


class FbxAnimCurveFilter(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxAnimCurveFilter') -> None: ...

    def Reset(self) -> None: ...
    @typing.overload
    def Apply(self, pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pObj: 'FbxObject', pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCurveNode: 'FbxAnimCurveNode', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def Apply(self, pCurve: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, pObj: 'FbxObject', pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, pCurveNode: 'FbxAnimCurveNode', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def NeedApply(self, pCurve: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetStopKey(self, pCurve: 'FbxAnimCurve') -> int: ...
    def GetStartKey(self, pCurve: 'FbxAnimCurve') -> int: ...
    def SetStopTime(self, pTime: FbxTime) -> None: ...
    def GetStopTime(self) -> FbxTime: ...
    def SetStartTime(self, pTime: FbxTime) -> None: ...
    def GetStartTime(self) -> FbxTime: ...
    def GetName(self) -> str: ...


class FbxAnimCurveFilterConstantKeyReducer(FbxAnimCurveFilter):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxAnimCurveFilterConstantKeyReducer') -> None: ...

    def SetKeepNotPureAutoKeys(self, pKeep: bool) -> None: ...
    def SetKeepOneKey(self, pKeepOneKey: bool) -> None: ...
    def GetKeepOneKey(self) -> bool: ...
    def SetKeepFirstAndLastKeys(self, pKeepFirstAndLastKeys: bool) -> None: ...
    def GetKeepFirstAndLastKeys(self) -> bool: ...
    def SetValueTolerance(self, pValue: float) -> None: ...
    def GetValueTolerance(self) -> float: ...
    def SetDerivativeTolerance(self, pValue: float) -> None: ...
    def GetDerivativeTolerance(self) -> float: ...
    def Reset(self) -> None: ...
    @typing.overload
    def Apply(self, pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pObj: 'FbxObject', pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def Apply(self, pCurveNode: 'FbxAnimCurveNode', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCurve: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetName(self) -> str: ...


class FbxAnimCurveFilterGimbleKiller(FbxAnimCurveFilter):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxAnimCurveFilterGimbleKiller') -> None: ...

    def SetApplyKeySyncFilter(self, pFlag: bool) -> None: ...
    def GetApplyKeySyncFilter(self) -> bool: ...
    def Reset(self) -> None: ...
    @typing.overload
    def Apply(self, a0: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, a0: 'FbxObject', a1: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCurveNode: 'FbxAnimCurveNode', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def Apply(self, a0: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, a0: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, a0: 'FbxObject', a1: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, pCurveNode: 'FbxAnimCurveNode', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def NeedApply(self, a0: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetName(self) -> str: ...


class FbxAnimCurveFilterKeyReducer(FbxAnimCurveFilter):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxAnimCurveFilterKeyReducer') -> None: ...

    def SetKeySync(self, pKeySync: bool) -> None: ...
    def GetKeySync(self) -> bool: ...
    def SetPrecision(self, pPrecision: float) -> None: ...
    def GetPrecision(self) -> float: ...
    def Reset(self) -> None: ...
    @typing.overload
    def Apply(self, pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pObj: 'FbxObject', pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCurveNode: 'FbxAnimCurveNode', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def Apply(self, pCurve: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetName(self) -> str: ...


class FbxAnimCurveFilterKeySync(FbxAnimCurveFilter):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxAnimCurveFilterKeySync') -> None: ...

    @typing.overload
    def Apply(self, pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pObj: 'FbxObject', pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCurveNode: 'FbxAnimCurveNode', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def Apply(self, a0: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, pObj: 'FbxObject', pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, pCurveNode: 'FbxAnimCurveNode', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def NeedApply(self, a0: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetName(self) -> str: ...


class FbxAnimCurveFilterResample(FbxAnimCurveFilter):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxAnimCurveFilterResample') -> None: ...

    def SetIntelligentMode(self, pIntelligent: bool) -> None: ...
    def GetIntelligentMode(self) -> bool: ...
    def SetPeriodTime(self, pPeriod: FbxTime) -> None: ...
    def GetPeriodTime(self) -> FbxTime: ...
    def GetKeysOnFrame(self) -> bool: ...
    def SetKeysOnFrame(self, pKeysOnFrame: bool) -> None: ...
    def Reset(self) -> None: ...
    @typing.overload
    def Apply(self, pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pObj: 'FbxObject', pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCurveNode: 'FbxAnimCurveNode', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def Apply(self, pCurve: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetName(self) -> str: ...


class FbxAnimCurveFilterScale(FbxAnimCurveFilter):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxAnimCurveFilterScale') -> None: ...

    def SetScale(self, pScale: float) -> None: ...
    def GetScale(self) -> float: ...
    def Reset(self) -> None: ...
    @typing.overload
    def Apply(self, pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pObj: 'FbxObject', pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def Apply(self, pCurveNode: 'FbxAnimCurveNode', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCurve: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetName(self) -> str: ...


class FbxAnimCurveFilterTSS(FbxAnimCurveFilter):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxAnimCurveFilterTSS') -> None: ...

    def SetScale(self, pScale: float) -> None: ...
    def GetScale(self) -> float: ...
    def SetShift(self, pShift: FbxTime) -> None: ...
    def GetShift(self) -> FbxTime: ...
    def Reset(self) -> None: ...
    @typing.overload
    def Apply(self, pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pObj: 'FbxObject', pAnimStack: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCurveNode: 'FbxAnimCurveNode', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def Apply(self, pCurve: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetName(self) -> str: ...


class FbxAnimCurveFilterUnroll(FbxAnimCurveFilter):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxAnimCurveFilterUnroll') -> None: ...

    def SetForceAutoTangents(self, pForceAutoTangents: bool) -> None: ...
    def GetForceAutoTangents(self) -> bool: ...
    def SetTestForPath(self, pTestForPath: bool) -> None: ...
    def GetTestForPath(self) -> bool: ...
    def SetQualityTolerance(self, pQualityTolerance: float) -> None: ...
    def GetQualityTolerance(self) -> float: ...
    def Reset(self) -> None: ...
    @typing.overload
    def Apply(self, a0: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, a0: 'FbxObject', a1: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCurveNode: 'FbxAnimCurveNode', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def Apply(self, a0: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, a0: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, a0: 'FbxObject', a1: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, pCurveNode: 'FbxAnimCurveNode', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def NeedApply(self, a0: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetName(self) -> str: ...


class FbxAnimCurveFilterMatrixConverter(FbxAnimCurveFilter):

    class EMatrixIndex(enum.Enum):
        ePreGlobal = ... # type: FbxAnimCurveFilterMatrixConverter.EMatrixIndex
        ePreTranslate = ... # type: FbxAnimCurveFilterMatrixConverter.EMatrixIndex
        ePostTranslate = ... # type: FbxAnimCurveFilterMatrixConverter.EMatrixIndex
        ePreRotate = ... # type: FbxAnimCurveFilterMatrixConverter.EMatrixIndex
        ePostRotate = ... # type: FbxAnimCurveFilterMatrixConverter.EMatrixIndex
        ePreScale = ... # type: FbxAnimCurveFilterMatrixConverter.EMatrixIndex
        ePostScale = ... # type: FbxAnimCurveFilterMatrixConverter.EMatrixIndex
        ePostGlobal = ... # type: FbxAnimCurveFilterMatrixConverter.EMatrixIndex
        eScaleOffset = ... # type: FbxAnimCurveFilterMatrixConverter.EMatrixIndex
        eInactivePre = ... # type: FbxAnimCurveFilterMatrixConverter.EMatrixIndex
        eInactivePost = ... # type: FbxAnimCurveFilterMatrixConverter.EMatrixIndex
        eRotationPivot = ... # type: FbxAnimCurveFilterMatrixConverter.EMatrixIndex
        eScalingPivot = ... # type: FbxAnimCurveFilterMatrixConverter.EMatrixIndex
        eMatrixIndexCount = ... # type: FbxAnimCurveFilterMatrixConverter.EMatrixIndex

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxAnimCurveFilterMatrixConverter') -> None: ...

    def GetForceApply(self) -> bool: ...
    def SetForceApply(self, pVal: bool) -> None: ...
    def SetDestRotateOrder(self, pOrder: FbxEuler.EOrder) -> None: ...
    def SetSrcRotateOrder(self, pOrder: FbxEuler.EOrder) -> None: ...
    def SetResampleTranslation(self, pFlag: bool) -> None: ...
    def GetResampleTranslation(self) -> bool: ...
    def SetApplyConstantKeyReducer(self, pFlag: bool) -> None: ...
    def GetApplyConstantKeyReducer(self) -> bool: ...
    def SetApplyUnroll(self, pFlag: bool) -> None: ...
    def GetApplyUnroll(self) -> bool: ...
    def SetResamplingOnFrameRateMultiple(self, pFlag: bool) -> None: ...
    def GetResamplingOnFrameRateMultiple(self) -> bool: ...
    def SetGenerateLastKeyExactlyAtEndTime(self, pFlag: bool) -> None: ...
    def GetGenerateLastKeyExactlyAtEndTime(self) -> bool: ...
    def SetResamplingPeriod(self, pResamplingPeriod: FbxTime) -> None: ...
    def GetResamplingPeriod(self) -> FbxTime: ...
    def SetDestMatrix(self, pIndex: 'FbxAnimCurveFilterMatrixConverter.EMatrixIndex', pMatrix: FbxAMatrix) -> None: ...
    def GetDestMatrix(self, pIndex: 'FbxAnimCurveFilterMatrixConverter.EMatrixIndex', pMatrix: FbxAMatrix) -> None: ...
    def SetSourceMatrix(self, pIndex: 'FbxAnimCurveFilterMatrixConverter.EMatrixIndex', pMatrix: FbxAMatrix) -> None: ...
    def GetSourceMatrix(self, pIndex: 'FbxAnimCurveFilterMatrixConverter.EMatrixIndex', pMatrix: FbxAMatrix) -> None: ...
    def Reset(self) -> None: ...
    @typing.overload
    def Apply(self, a0: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, a0: 'FbxObject', a1: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def Apply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def Apply(self, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve', float]: ...
    @typing.overload
    def Apply(self, a0: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, pCount: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxAnimCurve']: ...
    @typing.overload
    def NeedApply(self, a0: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, a0: 'FbxObject', a1: 'FbxAnimStack', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def NeedApply(self, a0: 'FbxAnimCurve', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetName(self) -> str: ...


class FbxClassId(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxClassId') -> None: ...

    def GetInstanceRef(self) -> int: ...
    def ClassInstanceDecRef(self) -> int: ...
    def ClassInstanceIncRef(self) -> int: ...
    def GetObjectTypePrefix(self) -> str: ...
    def SetObjectTypePrefix(self, pObjectTypePrefix: str) -> None: ...
    def IsValid(self) -> bool: ...
    def GetFbxFileSubTypeName(self) -> str: ...
    def GetFbxFileTypeName(self, pAskParent: bool = ...) -> str: ...
    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def Is(self, pId: 'FbxClassId') -> bool: ...
    def Create(self, pManager: FbxManager, pName: str, pFrom: 'FbxObject') -> 'FbxObject': ...
    def GetParent(self) -> 'FbxClassId': ...
    def GetName(self) -> str: ...
    def Destroy(self) -> None: ...


class FbxStringList(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pOriginal: 'FbxStringList') -> None: ...

    def CopyFrom(self, pOriginal: 'FbxStringList') -> None: ...


class FbxObject(sip.wrapper):

    class EObjectFlag(enum.Enum):
        eNone = ... # type: FbxObject.EObjectFlag
        eInitialized = ... # type: FbxObject.EObjectFlag
        eSystem = ... # type: FbxObject.EObjectFlag
        eSavable = ... # type: FbxObject.EObjectFlag
        eSelected = ... # type: FbxObject.EObjectFlag
        eHidden = ... # type: FbxObject.EObjectFlag
        eContentLoaded = ... # type: FbxObject.EObjectFlag
        eDontLocalize = ... # type: FbxObject.EObjectFlag

    class ECloneType(enum.Enum):
        eDeepClone = ... # type: FbxObject.ECloneType
        eReferenceClone = ... # type: FbxObject.ECloneType

    ClassId = ... # type: FbxClassId
    RootProperty = ... # type: FbxProperty

    def GetTypeFlags(self) -> FbxStringList: ...
    def GetTypeName(self) -> str: ...
    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def GetAllObjectFlags(self) -> int: ...
    def SetAllObjectFlags(self, pFlags: int) -> None: ...
    def GetObjectFlags(self, pFlags: 'FbxObject.EObjectFlag') -> bool: ...
    def SetObjectFlags(self, pFlags: 'FbxObject.EObjectFlag', pValue: bool) -> None: ...
    def SetUrl(self, pUrl: str) -> bool: ...
    def GetUrl(self) -> FbxString: ...
    def Localize(self, pID: str, pDefault: typing.Optional[str] = ...) -> str: ...
    def GetScene(self) -> 'FbxScene': ...
    def GetRootDocument(self) -> 'FbxDocument': ...
    def SetDocument(self, pDocument: 'FbxDocument') -> None: ...
    def GetDocument(self) -> 'FbxDocument': ...
    def FindDstProperty(self, pName: str, pStartIndex: int = ...) -> FbxProperty: ...
    def GetDstProperty(self, pIndex: int = ...) -> FbxProperty: ...
    def GetDstPropertyCount(self) -> int: ...
    def DisconnectDstProperty(self, pProperty: FbxProperty) -> bool: ...
    def IsConnectedDstProperty(self, pProperty: FbxProperty) -> bool: ...
    def ConnectDstProperty(self, pProperty: FbxProperty) -> bool: ...
    def FindSrcProperty(self, pName: str, pStartIndex: int = ...) -> FbxProperty: ...
    def GetSrcProperty(self, pIndex: int = ...) -> FbxProperty: ...
    def GetSrcPropertyCount(self) -> int: ...
    def DisconnectSrcProperty(self, pProperty: FbxProperty) -> bool: ...
    def IsConnectedSrcProperty(self, pProperty: FbxProperty) -> bool: ...
    def ConnectSrcProperty(self, pProperty: FbxProperty) -> bool: ...
    @typing.overload
    def FindDstObject(self, pName: str, pStartIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def FindDstObject(self, pCriteria: FbxCriteria, pName: str, pStartIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def GetDstObject(self, pIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def GetDstObject(self, pCriteria: FbxCriteria, pIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def GetDstObjectCount(self) -> int: ...
    @typing.overload
    def GetDstObjectCount(self, pCriteria: FbxCriteria) -> int: ...
    @typing.overload
    def DisconnectAllDstObject(self) -> bool: ...
    @typing.overload
    def DisconnectAllDstObject(self, pCriteria: FbxCriteria) -> bool: ...
    def DisconnectDstObject(self, pObject: 'FbxObject') -> bool: ...
    def IsConnectedDstObject(self, pObject: 'FbxObject') -> bool: ...
    def ConnectDstObject(self, pObject: 'FbxObject', pType: FbxConnection.EType = ...) -> bool: ...
    @typing.overload
    def FindSrcObject(self, pName: str, pStartIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def FindSrcObject(self, pCriteria: FbxCriteria, pName: str, pStartIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def GetSrcObject(self, pIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def GetSrcObject(self, pCriteria: FbxCriteria, pIndex: int = ...) -> 'FbxObject': ...
    @typing.overload
    def GetSrcObjectCount(self) -> int: ...
    @typing.overload
    def GetSrcObjectCount(self, pCriteria: FbxCriteria) -> int: ...
    @typing.overload
    def DisconnectAllSrcObject(self) -> bool: ...
    @typing.overload
    def DisconnectAllSrcObject(self, pCriteria: FbxCriteria) -> bool: ...
    def DisconnectSrcObject(self, pObject: 'FbxObject') -> bool: ...
    def IsConnectedSrcObject(self, pObject: 'FbxObject') -> bool: ...
    def ConnectSrcObject(self, pObject: 'FbxObject', pType: FbxConnection.EType = ...) -> bool: ...
    def GetClassRootProperty(self) -> FbxProperty: ...
    @typing.overload
    def FindPropertyHierarchical(self, pName: str, pCaseSensitive: bool = ...) -> FbxProperty: ...
    @typing.overload
    def FindPropertyHierarchical(self, pName: str, pDataType: FbxDataType, pCaseSensitive: bool = ...) -> FbxProperty: ...
    @typing.overload
    def FindProperty(self, pName: str, pCaseSensitive: bool = ...) -> FbxProperty: ...
    @typing.overload
    def FindProperty(self, pName: str, pDataType: FbxDataType, pCaseSensitive: bool = ...) -> FbxProperty: ...
    def GetNextProperty(self, pProperty: FbxProperty) -> FbxProperty: ...
    def GetFirstProperty(self) -> FbxProperty: ...
    def SetSelected(self, pSelected: bool) -> None: ...
    def GetSelected(self) -> bool: ...
    def GetUniqueID(self) -> int: ...
    @typing.overload
    @staticmethod
    def StripPrefix(lName: FbxString) -> FbxString: ...
    @typing.overload
    @staticmethod
    def StripPrefix(pName: str) -> FbxString: ...
    @staticmethod
    def RemovePrefix(pName: str) -> FbxString: ...
    def GetNameSpacePrefix(self) -> FbxString: ...
    def GetNameOnly(self) -> FbxString: ...
    def GetNameSpaceArray(self, identifier: str) -> typing.List: ...
    def SetNameSpace(self, pNameSpace: FbxString) -> None: ...
    def GetNameSpaceOnly(self) -> FbxString: ...
    def GetInitialName(self) -> str: ...
    def SetInitialName(self, pName: str) -> None: ...
    def GetNameWithNameSpacePrefix(self) -> FbxString: ...
    def GetNameWithoutNameSpacePrefix(self) -> FbxString: ...
    def GetName(self) -> str: ...
    def SetName(self, pName: str) -> None: ...
    def ContentIsLocked(self) -> bool: ...
    def ContentIncrementLockCount(self) -> None: ...
    def ContentDecrementLockCount(self) -> None: ...
    def ContentIsLoaded(self) -> bool: ...
    def ContentLoad(self) -> int: ...
    def ContentUnload(self) -> int: ...
    def GetReferencedBy(self, pIndex: int) -> 'FbxObject': ...
    def GetReferencedByCount(self) -> int: ...
    def IsReferencedBy(self) -> bool: ...
    def GetReferenceTo(self) -> 'FbxObject': ...
    def IsAReferenceTo(self) -> bool: ...
    def Clone(self, pCloneType: 'FbxObject.ECloneType' = ..., pContainer: typing.Optional['FbxObject'] = ..., pSet: typing.Optional[sip.voidptr] = ...) -> 'FbxObject': ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxObject': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: 'FbxObject', pName: str) -> 'FbxObject': ...
    def Destroy(self, pRecursive: bool = ...) -> None: ...


class FbxControlSetLink(sip.wrapper):

    mNode = ... # type: 'FbxNode'
    mTemplateName = ... # type: FbxString

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pControlSetLink: 'FbxControlSetLink') -> None: ...

    def Reset(self) -> None: ...


class FbxEffector(sip.wrapper):

    class ENodeId(enum.Enum):
        eHips = ... # type: FbxEffector.ENodeId
        eLeftAnkle = ... # type: FbxEffector.ENodeId
        eRightAnkle = ... # type: FbxEffector.ENodeId
        eLeftWrist = ... # type: FbxEffector.ENodeId
        eRightWrist = ... # type: FbxEffector.ENodeId
        eLeftKnee = ... # type: FbxEffector.ENodeId
        eRightKnee = ... # type: FbxEffector.ENodeId
        eLeftElbow = ... # type: FbxEffector.ENodeId
        eRightElbow = ... # type: FbxEffector.ENodeId
        eChestOrigin = ... # type: FbxEffector.ENodeId
        eChestEnd = ... # type: FbxEffector.ENodeId
        eLeftFoot = ... # type: FbxEffector.ENodeId
        eRightFoot = ... # type: FbxEffector.ENodeId
        eLeftShoulder = ... # type: FbxEffector.ENodeId
        eRightShoulder = ... # type: FbxEffector.ENodeId
        eHead = ... # type: FbxEffector.ENodeId
        eLeftHip = ... # type: FbxEffector.ENodeId
        eRightHip = ... # type: FbxEffector.ENodeId
        eLeftHand = ... # type: FbxEffector.ENodeId
        eRightHand = ... # type: FbxEffector.ENodeId
        eLeftHandThumb = ... # type: FbxEffector.ENodeId
        eLeftHandIndex = ... # type: FbxEffector.ENodeId
        eLeftHandMiddle = ... # type: FbxEffector.ENodeId
        eLeftHandRing = ... # type: FbxEffector.ENodeId
        eLeftHandPinky = ... # type: FbxEffector.ENodeId
        eLeftHandExtraFinger = ... # type: FbxEffector.ENodeId
        eRightHandThumb = ... # type: FbxEffector.ENodeId
        eRightHandIndex = ... # type: FbxEffector.ENodeId
        eRightHandMiddle = ... # type: FbxEffector.ENodeId
        eRightHandRing = ... # type: FbxEffector.ENodeId
        eRightHandPinky = ... # type: FbxEffector.ENodeId
        eRightHandExtraFinger = ... # type: FbxEffector.ENodeId
        eLeftFootThumb = ... # type: FbxEffector.ENodeId
        eLeftFootIndex = ... # type: FbxEffector.ENodeId
        eLeftFootMiddle = ... # type: FbxEffector.ENodeId
        eLeftFootRing = ... # type: FbxEffector.ENodeId
        eLeftFootPinky = ... # type: FbxEffector.ENodeId
        eLeftFootExtraFinger = ... # type: FbxEffector.ENodeId
        eRightFootThumb = ... # type: FbxEffector.ENodeId
        eRightFootIndex = ... # type: FbxEffector.ENodeId
        eRightFootMiddle = ... # type: FbxEffector.ENodeId
        eRightFootRing = ... # type: FbxEffector.ENodeId
        eRightFootPinky = ... # type: FbxEffector.ENodeId
        eRightFootExtraFinger = ... # type: FbxEffector.ENodeId
        eNodeIdCount = ... # type: FbxEffector.ENodeId

    class ESetId(enum.Enum):
        eDefaultSet = ... # type: FbxEffector.ESetId
        eAux1Set = ... # type: FbxEffector.ESetId
        eAux2Set = ... # type: FbxEffector.ESetId
        eAux3Set = ... # type: FbxEffector.ESetId
        eAux4Set = ... # type: FbxEffector.ESetId
        eAux5Set = ... # type: FbxEffector.ESetId
        eAux6Set = ... # type: FbxEffector.ESetId
        eAux7Set = ... # type: FbxEffector.ESetId
        eAux8Set = ... # type: FbxEffector.ESetId
        eAux9Set = ... # type: FbxEffector.ESetId
        eAux10Set = ... # type: FbxEffector.ESetId
        eAux11Set = ... # type: FbxEffector.ESetId
        eAux12Set = ... # type: FbxEffector.ESetId
        eAux13Set = ... # type: FbxEffector.ESetId
        eAux14Set = ... # type: FbxEffector.ESetId
        eSetIdCount = ... # type: FbxEffector.ESetId

    mNode = ... # type: 'FbxNode'
    mShow = ... # type: bool

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxEffector') -> None: ...

    def Reset(self) -> None: ...


class FbxControlSet(sip.wrapper):

    class EType(enum.Enum):
        eNone = ... # type: FbxControlSet.EType
        eFkIk = ... # type: FbxControlSet.EType
        eIkOnly = ... # type: FbxControlSet.EType

    @staticmethod
    def GetEffectorNodeId(pEffectorNodeName: str) -> FbxEffector.ENodeId: ...
    @staticmethod
    def GetEffectorNodeName(pEffectorNodeId: FbxEffector.ENodeId) -> str: ...
    def GetEffectorAux(self, pEffectorNodeId: FbxEffector.ENodeId, pEffectorSetId: FbxEffector.ESetId = ...) -> typing.Tuple[bool, 'FbxNode']: ...
    def SetEffectorAux(self, pEffectorNodeId: FbxEffector.ENodeId, pNode: 'FbxNode', pEffectorSetId: FbxEffector.ESetId = ...) -> bool: ...
    def GetEffector(self, pEffectorNodeId: FbxEffector.ENodeId, pEffector: typing.Optional[FbxEffector] = ...) -> bool: ...
    def SetEffector(self, pEffectorNodeId: FbxEffector.ENodeId, pEffector: FbxEffector) -> bool: ...
    def GetControlSetLink(self, pCharacterNodeId: 'FbxCharacter.ENodeId', pControlSetLink: typing.Optional[FbxControlSetLink] = ...) -> bool: ...
    def SetControlSetLink(self, pCharacterNodeId: 'FbxCharacter.ENodeId', pControlSetLink: FbxControlSetLink) -> bool: ...
    def GetLock3DPick(self) -> bool: ...
    def SetLock3DPick(self, pLock3DPick: bool) -> None: ...
    def GetLockTransform(self) -> bool: ...
    def SetLockTransform(self, pLockTransform: bool) -> None: ...
    def GetUseAxis(self) -> bool: ...
    def SetUseAxis(self, pUseAxis: bool) -> None: ...
    def GetType(self) -> 'FbxControlSet.EType': ...
    def SetType(self, pType: 'FbxControlSet.EType') -> None: ...
    def Reset(self) -> None: ...


class FbxControlSetPlug(FbxObject):

    Character = ... # type: FbxPropertyFbxReference
    ClassId = ... # type: FbxClassId
    ControlSetType = ... # type: FbxPropertyFbxControlSetEType
    UseAxis = ... # type: FbxPropertyBool1

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxControlSetPlug': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxControlSetPlug': ...


class FbxGeometryWeightedMap(FbxObject):

    ClassId = ... # type: FbxClassId

    def GetDestinationGeometry(self) -> 'FbxGeometry': ...
    def GetSourceGeometry(self) -> 'FbxGeometry': ...
    def GetValues(self) -> FbxWeightedMapping: ...
    def SetValues(self, pWeightedMappingTable: FbxWeightedMapping) -> None: ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxGeometryWeightedMap': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxGeometryWeightedMap': ...


class FbxSceneReference(FbxObject):

    ClassId = ... # type: FbxClassId
    IsActiveProxy = ... # type: FbxPropertyBool1
    IsLoaded = ... # type: FbxPropertyBool1
    IsLocked = ... # type: FbxPropertyBool1
    IsOriginalProxy = ... # type: FbxPropertyBool1
    ProxyManagerName = ... # type: FbxPropertyString
    ProxyTag = ... # type: FbxPropertyString
    ReferenceDepth = ... # type: FbxPropertyInteger1
    ReferenceFilePath = ... # type: FbxPropertyString
    ReferenceNameSpace = ... # type: FbxPropertyString
    ReferenceNodeName = ... # type: FbxPropertyString

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxSceneReference': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxSceneReference': ...


class FbxAnimEvaluator(FbxObject):

    ClassId = ... # type: FbxClassId

    def ComputeLocalTRSFromGlobal(self, pRetLT: FbxVector4, pRetLR: FbxVector4, pRetLS: FbxVector4, pNode: 'FbxNode', pGX: FbxAMatrix, pTime: FbxTime = ..., pPivotSet: 'FbxNode.EPivotSet' = ..., pApplyTarget: bool = ..., pForceEval: bool = ...) -> None: ...
    @typing.overload
    def Flush(self, pNode: 'FbxNode') -> None: ...
    @typing.overload
    def Flush(self, pProperty: FbxProperty) -> None: ...
    def Reset(self) -> None: ...
    def ValidateTime(self, pTime: FbxTime) -> FbxTime: ...
    def GetPropertyCurveNode(self, pProperty: FbxProperty, pAnimLayer: 'FbxAnimLayer') -> 'FbxAnimCurveNode': ...
    def GetPropertyValue(self, pProperty: FbxProperty, pTime: FbxTime, pForceEval: bool = ...) -> FbxPropertyValue: ...
    def GetNodeLocalScaling(self, pNode: 'FbxNode', pTime: FbxTime = ..., pPivotSet: 'FbxNode.EPivotSet' = ..., pApplyTarget: bool = ..., pForceEval: bool = ...) -> FbxVector4: ...
    def GetNodeLocalRotation(self, pNode: 'FbxNode', pTime: FbxTime = ..., pPivotSet: 'FbxNode.EPivotSet' = ..., pApplyTarget: bool = ..., pForceEval: bool = ...) -> FbxVector4: ...
    def GetNodeLocalTranslation(self, pNode: 'FbxNode', pTime: FbxTime = ..., pPivotSet: 'FbxNode.EPivotSet' = ..., pApplyTarget: bool = ..., pForceEval: bool = ...) -> FbxVector4: ...
    def GetNodeLocalTransform(self, pNode: 'FbxNode', pTime: FbxTime = ..., pPivotSet: 'FbxNode.EPivotSet' = ..., pApplyTarget: bool = ..., pForceEval: bool = ...) -> FbxAMatrix: ...
    def GetNodeGlobalTransform(self, pNode: 'FbxNode', pTime: FbxTime = ..., pPivotSet: 'FbxNode.EPivotSet' = ..., pApplyTarget: bool = ..., pForceEval: bool = ...) -> FbxAMatrix: ...
    def GetClassId(self) -> FbxClassId: ...
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxAnimEvaluator': ...


class FbxDocumentInfo(FbxObject):

    ClassId = ... # type: FbxClassId
    EmbeddedUrl = ... # type: FbxPropertyString
    LastSaved = ... # type: FbxProperty
    LastSavedUrl = ... # type: FbxPropertyString
    LastSaved_ApplicationName = ... # type: FbxPropertyString
    LastSaved_ApplicationVendor = ... # type: FbxPropertyString
    LastSaved_ApplicationVersion = ... # type: FbxPropertyString
    LastSaved_DateTime_GMT = ... # type: FbxPropertyDateTime
    Original_ApplicationName = ... # type: FbxPropertyString
    Original_ApplicationVendor = ... # type: FbxPropertyString
    Original_ApplicationVersion = ... # type: FbxPropertyString
    Original_DateTime_GMT = ... # type: FbxPropertyDateTime
    Original_FileName = ... # type: FbxPropertyString
    Url = ... # type: FbxPropertyString
    mAuthor = ... # type: FbxString
    mComment = ... # type: FbxString
    mKeywords = ... # type: FbxString
    mRevision = ... # type: FbxString
    mSubject = ... # type: FbxString
    mTitle = ... # type: FbxString

    def __ne__(self, other: object): ...
    def Clear(self) -> None: ...
    def SetSceneThumbnail(self, pSceneThumbnail: 'FbxThumbnail') -> None: ...
    def GetSceneThumbnail(self) -> 'FbxThumbnail': ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxDocumentInfo': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxDocumentInfo': ...


class FbxSelectionNode(FbxObject):

    class ESelectType(enum.Enum):
        eVertexLevel = ... # type: FbxSelectionNode.ESelectType
        eEdgeLevel = ... # type: FbxSelectionNode.ESelectType
        eFaceLevel = ... # type: FbxSelectionNode.ESelectType
        eObjectLevel = ... # type: FbxSelectionNode.ESelectType
        eSelectTypeCount = ... # type: FbxSelectionNode.ESelectType

    ClassId = ... # type: FbxClassId
    mEdgeIndexArray = ... # type: IntArray
    mIsTheNodeInSet = ... # type: bool
    mPolygonIndexArray = ... # type: IntArray
    mVertexIndexArray = ... # type: IntArray

    def __ne__(self, other: object): ...
    def IsValid(self) -> bool: ...
    def GetSelectionObject(self) -> FbxObject: ...
    def SetSelectionObject(self, pObject: FbxObject) -> bool: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxSelectionNode': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxSelectionNode': ...


class FbxAnimCurveNode(FbxObject):

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def GetCurve(self, pChannelId: int, pId: int = ..., pCurveNodeName: typing.Optional[str] = ...) -> 'FbxAnimCurve': ...
    def GetCurveCount(self, pChannelId: int, pCurveNodeName: typing.Optional[str] = ...) -> int: ...
    @typing.overload
    def CreateCurve(self, pCurveNodeName: str, pChannel: str) -> 'FbxAnimCurve': ...
    @typing.overload
    def CreateCurve(self, pCurveNodeName: str, pChannelId: int = ...) -> 'FbxAnimCurve': ...
    @typing.overload
    def ConnectToChannel(self, pCurve: 'FbxAnimCurve', pChnl: str, pInFront: bool = ...) -> bool: ...
    @typing.overload
    def ConnectToChannel(self, pCurve: 'FbxAnimCurve', pChnlId: int, pInFront: bool = ...) -> bool: ...
    def DisconnectFromChannel(self, pCurve: 'FbxAnimCurve', pChnlId: int) -> bool: ...
    @typing.overload
    def GetChannelValue(self, pChnlName: str, pInitVal: float) -> float: ...
    @typing.overload
    def GetChannelValue(self, pChnlId: int, pInitVal: float) -> float: ...
    @typing.overload
    def GetChannelValue(self, pChnlName: str, pInitVal: FbxString) -> FbxString: ...
    @typing.overload
    def GetChannelValue(self, pChnlId: int, pInitVal: FbxString) -> FbxString: ...
    @typing.overload
    def SetChannelValue(self, pChnlName: str, pValue: float) -> None: ...
    @typing.overload
    def SetChannelValue(self, pChnlId: int, pValue: float) -> None: ...
    @typing.overload
    def SetChannelValue(self, pChnlName: str, pValue: FbxString) -> None: ...
    @typing.overload
    def SetChannelValue(self, pChnlId: int, pValue: FbxString) -> None: ...
    @typing.overload
    def AddChannel(self, pChnlName: str, pValue: float) -> bool: ...
    @typing.overload
    def AddChannel(self, pChnlName: str, pValue: FbxString) -> bool: ...
    def ResetChannels(self) -> None: ...
    def GetChannelName(self, pChannelId: int) -> FbxString: ...
    def GetChannelIndex(self, pChannelName: str) -> int: ...
    def GetChannelsCount(self) -> int: ...
    @staticmethod
    def CreateTypedCurveNode(pProperty: FbxProperty, pScene: 'FbxScene') -> 'FbxAnimCurveNode': ...
    def Find(self, pName: str) -> 'FbxAnimCurveNode': ...
    def IsComposite(self) -> bool: ...
    def GetAnimationInterval(self, pTimeInterval: FbxTimeSpan) -> bool: ...
    def IsAnimated(self, pRecurse: bool = ...) -> bool: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxAnimCurveNode': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxAnimCurveNode': ...


class FbxIOSettings(FbxObject):

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def WriteXmlPropToFile(self, pFullPath: FbxString, propPath: FbxString) -> bool: ...
    def WriteXMLFile(self, path: FbxString) -> bool: ...
    def ReadXMLFile(self, path: FbxString) -> bool: ...
    def SetStringProp(self, pName: str, pValue: FbxString) -> None: ...
    def GetStringProp(self, pName: str, pDefValue: FbxString) -> FbxString: ...
    def SetFlag(self, pName: str, propFlag: FbxPropertyFlags.EFlags, pValue: bool) -> bool: ...
    def IsEnumExist(self, pProp: FbxProperty, enumString: FbxString) -> bool: ...
    def EmptyEnumProp(self, pName: str) -> None: ...
    def RemoveEnumPropValue(self, pName: str, pValue: FbxString) -> None: ...
    @typing.overload
    def SetEnumProp(self, pName: str, pValue: FbxString) -> None: ...
    @typing.overload
    def SetEnumProp(self, pName: str, pValue: int) -> None: ...
    @typing.overload
    def GetEnumIndex(self, pName: str, pValue: FbxString) -> int: ...
    @typing.overload
    def GetEnumIndex(self, pProp: FbxProperty, enumString: FbxString, pNoCase: bool = ...) -> int: ...
    @typing.overload
    def GetEnumProp(self, pName: str, pDefValue: FbxString) -> FbxString: ...
    @typing.overload
    def GetEnumProp(self, pName: str, pDefValue: int) -> int: ...
    def SetTimeProp(self, pName: str, pValue: FbxTime) -> None: ...
    def GetTimeProp(self, pName: str, pDefValue: FbxTime) -> FbxTime: ...
    def SetIntProp(self, pName: str, pValue: int) -> None: ...
    def GetIntProp(self, pName: str, pDefValue: int) -> int: ...
    def SetDoubleProp(self, pName: str, pValue: float) -> None: ...
    def GetDoubleProp(self, pName: str, pDefValue: float) -> float: ...
    def SetBoolProp(self, pName: str, pValue: bool) -> None: ...
    def GetBoolProp(self, pName: str, pDefValue: bool) -> bool: ...
    @typing.overload
    def GetProperty(self, pName: str) -> FbxProperty: ...
    @typing.overload
    def GetProperty(self, pParentProperty: FbxProperty, pName: str) -> FbxProperty: ...
    def AddPropertyMinMax(self, pParentProperty: FbxProperty, pName: str, pDataType: FbxDataType = ..., pLabel: typing.Optional[str] = ..., pValue: typing.Optional[sip.voidptr] = ..., pMinValue: typing.Optional[float] = ..., pMaxValue: typing.Optional[float] = ..., pVisible: bool = ..., pSavable: bool = ..., pEnabled: bool = ...) -> FbxProperty: ...
    def AddProperty(self, pParentProperty: FbxProperty, pName: str, pDataType: FbxDataType = ..., pLabel: typing.Optional[str] = ..., pValue: typing.Optional[sip.voidptr] = ..., pVisible: bool = ..., pSavable: bool = ..., pEnabled: bool = ...) -> FbxProperty: ...
    @typing.overload
    def AddPropertyGroup(self, pName: str, pDataType: FbxDataType = ..., pLabel: typing.Optional[str] = ...) -> FbxProperty: ...
    @typing.overload
    def AddPropertyGroup(self, pParentProperty: FbxProperty, pName: str, pDataType: FbxDataType = ..., pLabel: typing.Optional[str] = ..., pVisible: bool = ..., pSavable: bool = ..., pEnabled: bool = ...) -> FbxProperty: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxIOSettings': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxIOSettings': ...


class FbxCharacterPose(FbxObject):

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def GetGlobalPosition(self, pCharacterNodeId: 'FbxCharacter.ENodeId', pGlobalPosition: FbxAMatrix) -> bool: ...
    def GetLocalPosition(self, pCharacterNodeId: 'FbxCharacter.ENodeId', pLocalT: FbxVector4, pLocalR: FbxVector4, pLocalS: FbxVector4) -> bool: ...
    def GetOffset(self, pCharacterNodeId: 'FbxCharacter.ENodeId', pOffset: FbxAMatrix) -> bool: ...
    def GetCharacter(self) -> 'FbxCharacter': ...
    def GetRootNode(self) -> 'FbxNode': ...
    def Reset(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxCharacterPose': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxCharacterPose': ...


class FbxCache(FbxObject):

    class EMCSamplingType(enum.Enum):
        eSamplingRegular = ... # type: FbxCache.EMCSamplingType
        eSamplingIrregular = ... # type: FbxCache.EMCSamplingType

    class EMCBinaryFormat(enum.Enum):
        eMCC = ... # type: FbxCache.EMCBinaryFormat
        eMCX = ... # type: FbxCache.EMCBinaryFormat

    class EMCDataType(enum.Enum):
        eUnknownData = ... # type: FbxCache.EMCDataType
        eDouble = ... # type: FbxCache.EMCDataType
        eDoubleArray = ... # type: FbxCache.EMCDataType
        eDoubleVectorArray = ... # type: FbxCache.EMCDataType
        eInt32Array = ... # type: FbxCache.EMCDataType
        eFloatArray = ... # type: FbxCache.EMCDataType
        eFloatVectorArray = ... # type: FbxCache.EMCDataType

    class EMCFileCount(enum.Enum):
        eMCOneFile = ... # type: FbxCache.EMCFileCount
        eMCOneFilePerFrame = ... # type: FbxCache.EMCFileCount

    class EFileFormat(enum.Enum):
        eUnknownFileFormat = ... # type: FbxCache.EFileFormat
        eMaxPointCacheV2 = ... # type: FbxCache.EFileFormat
        eMayaCache = ... # type: FbxCache.EFileFormat

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def Read(self, pChannelIndex: int, pTime: FbxTime, pPointCount: int) -> typing.List: ...
    def Write(self, pChannelIndex: int, pTime: FbxTime, pBuffer: typing.List, pPointCount: int) -> bool: ...
    def GetDataTime(self, pChannelIndex: int, pDataIndex: int, pTime: FbxTime, pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetDataCount(self, pChannelIndex: int, pStatus: typing.Optional[FbxStatus] = ...) -> int: ...
    def GetNextTimeWithData(self, pCurTime: FbxTime, pNextTime: FbxTime, pChannelIndex: int = ..., pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def EnableMultiChannelFetching(self, pMultiChannelFetching: bool, pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetCacheDataFileName(self, pIndex: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, FbxString, FbxString]: ...
    def GetCacheDataFileCount(self, pStatus: typing.Optional[FbxStatus] = ...) -> int: ...
    def GetChannelPointCount(self, pChannelIndex: int, pTime: FbxTime, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, int]: ...
    def GetChannelSampleCount(self, pChannelIndex: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, int]: ...
    def GetChannelSamplingRate(self, pChannelIndex: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, FbxTime]: ...
    def GetChannelSamplingType(self, pChannelIndex: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxCache.EMCSamplingType']: ...
    def GetChannelInterpretation(self, pChannelIndex: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, FbxString]: ...
    def GetCacheType(self, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxCache.EMCFileCount']: ...
    def GetAnimationRange(self, pChannelIndex: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, FbxTime, FbxTime]: ...
    def GetChannelIndex(self, pChannelName: str, pStatus: typing.Optional[FbxStatus] = ...) -> int: ...
    def GetChannelDataType(self, pChannelIndex: int, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, 'FbxCache.EMCDataType']: ...
    def GetChannelName(self, pChannelIndex: int, pChannelName: FbxString, pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetChannelCount(self, pStatus: typing.Optional[FbxStatus] = ...) -> int: ...
    def AddChannel(self, pChannelName: str, pMCDataType: 'FbxCache.EMCDataType', pInterpretation: str, pStatus: typing.Optional[FbxStatus] = ...) -> typing.Tuple[bool, int]: ...
    def OpenFileForWrite(self, pFileCount: 'FbxCache.EMCFileCount', pSamplingFrameRate: float, pChannelName: str, pBinaryFormat: 'FbxCache.EMCBinaryFormat', pMCDataType: 'FbxCache.EMCDataType' = ..., pInterpretation: typing.Optional[str] = ..., pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetCacheTimePerFrame(self, pStatus: typing.Optional[FbxStatus] = ...) -> FbxTime: ...
    def GetSamplingFrameRate(self, pStatus: typing.Optional[FbxStatus] = ...) -> float: ...
    def CloseFile(self, pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def IsOpen(self, pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def OpenFileForRead(self, pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetCacheFileName(self, pRelativeFileName_UTF8: FbxString, pAbsoluteFileName_UTF8: FbxString) -> None: ...
    def SetCacheFileName(self, pRelativeFileName_UTF8: str, pAbsoluteFileName_UTF8: str, pStatus: typing.Optional[FbxStatus] = ...) -> None: ...
    def GetCacheFileFormat(self) -> 'FbxCache.EFileFormat': ...
    def SetCacheFileFormat(self, pFileFormat: 'FbxCache.EFileFormat', pStatus: typing.Optional[FbxStatus] = ...) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxCache': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxCache': ...


class FbxMediaClip(FbxObject):

    class EAccessMode(enum.Enum):
        eDisk = ... # type: FbxMediaClip.EAccessMode
        eMemory = ... # type: FbxMediaClip.EAccessMode
        eDiskAsync = ... # type: FbxMediaClip.EAccessMode

    AccessMode = ... # type: FbxPropertyFbxMediaClipEAccessMode
    ClassId = ... # type: FbxClassId
    ClipIn = ... # type: FbxPropertyFbxTime
    ClipOut = ... # type: FbxPropertyFbxTime
    Color = ... # type: FbxPropertyDouble3
    FreeRunning = ... # type: FbxPropertyBool1
    Loop = ... # type: FbxPropertyBool1
    Mute = ... # type: FbxPropertyBool1
    Offset = ... # type: FbxPropertyFbxTime
    PlaySpeed = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def GetAccessMode(self) -> 'FbxMediaClip.EAccessMode': ...
    def SetAccessMode(self, pAccessMode: 'FbxMediaClip.EAccessMode') -> None: ...
    def GetMute(self) -> bool: ...
    def SetMute(self, pMute: bool) -> None: ...
    def GetLoop(self) -> bool: ...
    def SetLoop(self, pLoop: bool) -> None: ...
    def GetFreeRunning(self) -> bool: ...
    def SetFreeRunning(self, pState: bool) -> None: ...
    def GetOffset(self) -> FbxTime: ...
    def SetOffset(self, pTime: FbxTime) -> None: ...
    def GetClipOut(self) -> FbxTime: ...
    def SetClipOut(self, pTime: FbxTime) -> None: ...
    def GetClipIn(self) -> FbxTime: ...
    def SetClipIn(self, pTime: FbxTime) -> None: ...
    def GetPlaySpeed(self) -> float: ...
    def SetPlaySpeed(self, pPlaySpeed: float) -> None: ...
    def GetColor(self) -> FbxColor: ...
    def SetColor(self, pColor: FbxColor) -> None: ...
    def GetRelativeFileName(self) -> str: ...
    def SetRelativeFileName(self, pName: str) -> bool: ...
    def GetFileName(self) -> FbxString: ...
    def SetFileName(self, pName: str) -> bool: ...
    def Reset(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxMediaClip': ...


class FbxVideo(FbxMediaClip):

    class EInterlaceMode(enum.Enum):
        eNone = ... # type: FbxVideo.EInterlaceMode
        eFields = ... # type: FbxVideo.EInterlaceMode
        eHalfEven = ... # type: FbxVideo.EInterlaceMode
        eHalfOdd = ... # type: FbxVideo.EInterlaceMode
        eFullEven = ... # type: FbxVideo.EInterlaceMode
        eFullOdd = ... # type: FbxVideo.EInterlaceMode
        eFullEvenOdd = ... # type: FbxVideo.EInterlaceMode
        eFullOddEven = ... # type: FbxVideo.EInterlaceMode

    ClassId = ... # type: FbxClassId
    FrameRate = ... # type: FbxPropertyDouble1
    Height = ... # type: FbxPropertyInteger1
    ImageSequence = ... # type: FbxPropertyBool1
    ImageSequenceOffset = ... # type: FbxPropertyInteger1
    InterlaceMode = ... # type: FbxPropertyFbxVideoEInterlaceMode
    LastFrame = ... # type: FbxPropertyInteger1
    StartFrame = ... # type: FbxPropertyInteger1
    StopFrame = ... # type: FbxPropertyInteger1
    Width = ... # type: FbxPropertyInteger1

    def __ne__(self, other: object): ...
    def GetInterlaceMode(self) -> 'FbxVideo.EInterlaceMode': ...
    def SetInterlaceMode(self, pInterlaceMode: 'FbxVideo.EInterlaceMode') -> None: ...
    def GetStopFrame(self) -> int: ...
    def SetStopFrame(self, pStopFrame: int) -> None: ...
    def GetStartFrame(self) -> int: ...
    def SetStartFrame(self, pStartFrame: int) -> None: ...
    def GetHeight(self) -> int: ...
    def GetWidth(self) -> int: ...
    def GetLastFrame(self) -> int: ...
    def GetFrameRate(self) -> float: ...
    def ImageTextureGetMipMap(self) -> bool: ...
    def ImageTextureSetMipMap(self, pUseMipMap: bool) -> None: ...
    def Reset(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxVideo': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxVideo': ...


class FbxAudio(FbxMediaClip):

    AnimFX = ... # type: FbxProperty
    BitRate = ... # type: FbxPropertyInteger1
    Channels = ... # type: FbxPropertyUChar1
    ClassId = ... # type: FbxClassId
    Duration = ... # type: FbxPropertyFbxTime
    SampleRate = ... # type: FbxPropertyInteger1

    def __ne__(self, other: object): ...
    def Volume(self) -> FbxProperty: ...
    def Reset(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxAudio': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxAudio': ...


class FbxThumbnail(FbxObject):

    class EImageSize(enum.Enum):
        eNotSet = ... # type: FbxThumbnail.EImageSize
        e64x64 = ... # type: FbxThumbnail.EImageSize
        e128x128 = ... # type: FbxThumbnail.EImageSize
        eCustomSize = ... # type: FbxThumbnail.EImageSize

    class EDataFormat(enum.Enum):
        eRGB_24 = ... # type: FbxThumbnail.EDataFormat
        eRGBA_32 = ... # type: FbxThumbnail.EDataFormat

    ClassId = ... # type: FbxClassId
    CustomHeight = ... # type: FbxPropertyInteger1
    CustomWidth = ... # type: FbxPropertyInteger1

    def __ne__(self, other: object): ...
    def GetSizeInBytes(self) -> int: ...
    def GetSize(self) -> 'FbxThumbnail.EImageSize': ...
    def SetSize(self, pImageSize: 'FbxThumbnail.EImageSize') -> None: ...
    def GetDataFormat(self) -> 'FbxThumbnail.EDataFormat': ...
    def SetDataFormat(self, pDataFormat: 'FbxThumbnail.EDataFormat') -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxThumbnail': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxThumbnail': ...


class FbxPose(FbxObject):

    class ENameComponent(enum.Enum):
        eInitialNameComponent = ... # type: FbxPose.ENameComponent
        eCurrentNameComponent = ... # type: FbxPose.ENameComponent
        eAllNameComponents = ... # type: FbxPose.ENameComponent

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    @typing.overload
    def IsValidBindPoseVerbose(self, pRoot: 'FbxNode', pMissingAncestors: FbxNodeArray, pMissingDeformers: FbxNodeArray, pMissingDeformersAncestors: FbxNodeArray, pWrongMatrices: FbxNodeArray, pMatrixCmpTolerance: float = ..., pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    def IsValidBindPoseVerbose(self, pRoot: 'FbxNode', pUserNotification: FbxUserNotification, pMatrixCmpTolerance: float = ..., pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def IsValidBindPose(self, pRoot: 'FbxNode', pMatrixCmpTolerance: float = ..., pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    @typing.overload
    @staticmethod
    def GetRestPoseContaining(pManager: FbxManager, pNode: 'FbxNode', pPoseList: FbxPoseArray, pIndex: IntArray) -> bool: ...
    @typing.overload
    @staticmethod
    def GetRestPoseContaining(pScene: 'FbxScene', pNode: 'FbxNode', pPoseList: FbxPoseArray, pIndex: IntArray) -> bool: ...
    @typing.overload
    @staticmethod
    def GetBindPoseContaining(pManager: FbxManager, pNode: 'FbxNode', pPoseList: FbxPoseArray, pIndex: IntArray) -> bool: ...
    @typing.overload
    @staticmethod
    def GetBindPoseContaining(pScene: 'FbxScene', pNode: 'FbxNode', pPoseList: FbxPoseArray, pIndex: IntArray) -> bool: ...
    @typing.overload
    @staticmethod
    def GetPosesContaining(pManager: FbxManager, pNode: 'FbxNode', pPoseList: FbxPoseArray, pIndex: IntArray) -> bool: ...
    @typing.overload
    @staticmethod
    def GetPosesContaining(pScene: 'FbxScene', pNode: 'FbxNode', pPoseList: FbxPoseArray, pIndex: IntArray) -> bool: ...
    @typing.overload
    def Find(self, pNodeName: FbxNameHandler, pCompareWhat: str = ...) -> int: ...
    @typing.overload
    def Find(self, pNode: 'FbxNode') -> int: ...
    def IsLocalMatrix(self, pIndex: int) -> bool: ...
    def GetMatrix(self, pIndex: int) -> FbxMatrix: ...
    def GetNode(self, pIndex: int) -> 'FbxNode': ...
    def GetNodeName(self, pIndex: int) -> FbxNameHandler: ...
    def Remove(self, pIndex: int) -> None: ...
    def Add(self, pNode: 'FbxNode', pMatrix: FbxMatrix, pLocalMatrix: bool = ..., pMultipleBindPose: bool = ...) -> int: ...
    def GetCount(self) -> int: ...
    def IsRestPose(self) -> bool: ...
    def IsBindPose(self) -> bool: ...
    def SetIsBindPose(self, pIsBindPose: bool) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxPose': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxPose': ...


class FbxNode(FbxObject):

    class EPivotState(enum.Enum):
        ePivotActive = ... # type: FbxNode.EPivotState
        ePivotReference = ... # type: FbxNode.EPivotState

    class EPivotSet(enum.Enum):
        eSourcePivot = ... # type: FbxNode.EPivotSet
        eDestinationPivot = ... # type: FbxNode.EPivotSet

    class EShadingMode(enum.Enum):
        eHardShading = ... # type: FbxNode.EShadingMode
        eWireFrame = ... # type: FbxNode.EShadingMode
        eFlatShading = ... # type: FbxNode.EShadingMode
        eLightShading = ... # type: FbxNode.EShadingMode
        eTextureShading = ... # type: FbxNode.EShadingMode
        eFullShading = ... # type: FbxNode.EShadingMode

    AxisLen = ... # type: FbxPropertyDouble1
    ClassId = ... # type: FbxClassId
    DefaultAttributeIndex = ... # type: FbxPropertyInteger1
    Freeze = ... # type: FbxPropertyBool1
    GeometricRotation = ... # type: FbxPropertyDouble3
    GeometricScaling = ... # type: FbxPropertyDouble3
    GeometricTranslation = ... # type: FbxPropertyDouble3
    InheritType = ... # type: FbxPropertyFbxTransformEInheritType
    LODBox = ... # type: FbxPropertyBool1
    LclRotation = ... # type: FbxPropertyDouble3
    LclScaling = ... # type: FbxPropertyDouble3
    LclTranslation = ... # type: FbxPropertyDouble3
    LookAtProperty = ... # type: FbxPropertyFbxReference
    MaxDampRangeX = ... # type: FbxPropertyDouble1
    MaxDampRangeY = ... # type: FbxPropertyDouble1
    MaxDampRangeZ = ... # type: FbxPropertyDouble1
    MaxDampStrengthX = ... # type: FbxPropertyDouble1
    MaxDampStrengthY = ... # type: FbxPropertyDouble1
    MaxDampStrengthZ = ... # type: FbxPropertyDouble1
    MinDampRangeX = ... # type: FbxPropertyDouble1
    MinDampRangeY = ... # type: FbxPropertyDouble1
    MinDampRangeZ = ... # type: FbxPropertyDouble1
    MinDampStrengthX = ... # type: FbxPropertyDouble1
    MinDampStrengthY = ... # type: FbxPropertyDouble1
    MinDampStrengthZ = ... # type: FbxPropertyDouble1
    NegativePercentShapeSupport = ... # type: FbxPropertyBool1
    PostRotation = ... # type: FbxPropertyDouble3
    PreRotation = ... # type: FbxPropertyDouble3
    PreferedAngleX = ... # type: FbxPropertyDouble1
    PreferedAngleY = ... # type: FbxPropertyDouble1
    PreferedAngleZ = ... # type: FbxPropertyDouble1
    QuaternionInterpolate = ... # type: FbxPropertyEFbxQuatInterpMode
    RotationActive = ... # type: FbxPropertyBool1
    RotationMax = ... # type: FbxPropertyDouble3
    RotationMaxX = ... # type: FbxPropertyBool1
    RotationMaxY = ... # type: FbxPropertyBool1
    RotationMaxZ = ... # type: FbxPropertyBool1
    RotationMin = ... # type: FbxPropertyDouble3
    RotationMinX = ... # type: FbxPropertyBool1
    RotationMinY = ... # type: FbxPropertyBool1
    RotationMinZ = ... # type: FbxPropertyBool1
    RotationOffset = ... # type: FbxPropertyDouble3
    RotationOrder = ... # type: FbxPropertyEFbxRotationOrder
    RotationPivot = ... # type: FbxPropertyDouble3
    RotationSpaceForLimitOnly = ... # type: FbxPropertyBool1
    RotationStiffnessX = ... # type: FbxPropertyDouble1
    RotationStiffnessY = ... # type: FbxPropertyDouble1
    RotationStiffnessZ = ... # type: FbxPropertyDouble1
    ScalingActive = ... # type: FbxPropertyBool1
    ScalingMax = ... # type: FbxPropertyDouble3
    ScalingMaxX = ... # type: FbxPropertyBool1
    ScalingMaxY = ... # type: FbxPropertyBool1
    ScalingMaxZ = ... # type: FbxPropertyBool1
    ScalingMin = ... # type: FbxPropertyDouble3
    ScalingMinX = ... # type: FbxPropertyBool1
    ScalingMinY = ... # type: FbxPropertyBool1
    ScalingMinZ = ... # type: FbxPropertyBool1
    ScalingOffset = ... # type: FbxPropertyDouble3
    ScalingPivot = ... # type: FbxPropertyDouble3
    Show = ... # type: FbxPropertyBool1
    TranslationActive = ... # type: FbxPropertyBool1
    TranslationMax = ... # type: FbxPropertyDouble3
    TranslationMaxX = ... # type: FbxPropertyBool1
    TranslationMaxY = ... # type: FbxPropertyBool1
    TranslationMaxZ = ... # type: FbxPropertyBool1
    TranslationMin = ... # type: FbxPropertyDouble3
    TranslationMinX = ... # type: FbxPropertyBool1
    TranslationMinY = ... # type: FbxPropertyBool1
    TranslationMinZ = ... # type: FbxPropertyBool1
    UpVectorProperty = ... # type: FbxPropertyFbxReference
    Visibility = ... # type: FbxPropertyDouble1
    VisibilityInheritance = ... # type: FbxPropertyBool1

    def __ne__(self, other: object): ...
    def GetMaterialIndex(self, pName: str) -> int: ...
    def RemoveAllMaterials(self) -> None: ...
    def GetMaterial(self, pIndex: int) -> 'FbxSurfaceMaterial': ...
    def GetMaterialCount(self) -> int: ...
    def RemoveMaterial(self, pMaterial: 'FbxSurfaceMaterial') -> bool: ...
    def AddMaterial(self, pMaterial: 'FbxSurfaceMaterial') -> int: ...
    def GetAnimationInterval(self, pSpan: FbxTimeSpan, pAnimStack: typing.Optional['FbxAnimStack'] = ..., pAnimLayerId: int = ...) -> bool: ...
    def FindCharacterLink(self, pCharacter: 'FbxCharacter', pCharacterLinkType: int, pNodeId: int, pNodeSubId: int) -> int: ...
    def GetCharacterLink(self, pIndex: int) -> typing.Tuple[bool, 'FbxCharacter', int, int, int]: ...
    def GetCharacterLinkCount(self) -> int: ...
    def EvaluateGlobalBoundingBoxMinMaxCenter(self, pBBoxMin: FbxVector4, pBBoxMax: FbxVector4, pBBoxCenter: FbxVector4, pTime: FbxTime = ...) -> bool: ...
    def EvaluateLocalScaling(self, pTime: FbxTime = ..., pPivotSet: 'FbxNode.EPivotSet' = ..., pApplyTarget: bool = ..., pForceEval: bool = ...) -> FbxVector4: ...
    def EvaluateLocalRotation(self, pTime: FbxTime = ..., pPivotSet: 'FbxNode.EPivotSet' = ..., pApplyTarget: bool = ..., pForceEval: bool = ...) -> FbxVector4: ...
    def EvaluateLocalTranslation(self, pTime: FbxTime = ..., pPivotSet: 'FbxNode.EPivotSet' = ..., pApplyTarget: bool = ..., pForceEval: bool = ...) -> FbxVector4: ...
    def EvaluateLocalTransform(self, pTime: FbxTime = ..., pPivotSet: 'FbxNode.EPivotSet' = ..., pApplyTarget: bool = ..., pForceEval: bool = ...) -> FbxAMatrix: ...
    def EvaluateGlobalTransform(self, pTime: FbxTime = ..., pPivotSet: 'FbxNode.EPivotSet' = ..., pApplyTarget: bool = ..., pForceEval: bool = ...) -> FbxAMatrix: ...
    def ConvertPivotAnimationRecursive(self, pAnimStack: 'FbxAnimStack', pConversionTarget: 'FbxNode.EPivotSet', pFrameRate: float, pKeyReduce: bool = ...) -> None: ...
    def ResetPivotSet(self, pPivotSet: 'FbxNode.EPivotSet') -> None: ...
    def GetGeometricScaling(self, pPivotSet: 'FbxNode.EPivotSet') -> FbxVector4: ...
    def SetGeometricScaling(self, pPivotSet: 'FbxNode.EPivotSet', pVector: FbxVector4) -> None: ...
    def GetGeometricRotation(self, pPivotSet: 'FbxNode.EPivotSet') -> FbxVector4: ...
    def SetGeometricRotation(self, pPivotSet: 'FbxNode.EPivotSet', pVector: FbxVector4) -> None: ...
    def GetGeometricTranslation(self, pPivotSet: 'FbxNode.EPivotSet') -> FbxVector4: ...
    def SetGeometricTranslation(self, pPivotSet: 'FbxNode.EPivotSet', pVector: FbxVector4) -> None: ...
    def GetScalingPivot(self, pPivotSet: 'FbxNode.EPivotSet') -> FbxVector4: ...
    def SetScalingPivot(self, pPivotSet: 'FbxNode.EPivotSet', pVector: FbxVector4) -> None: ...
    def GetScalingOffset(self, pPivotSet: 'FbxNode.EPivotSet') -> FbxVector4: ...
    def SetScalingOffset(self, pPivotSet: 'FbxNode.EPivotSet', pVector: FbxVector4) -> None: ...
    def GetPostRotation(self, pPivotSet: 'FbxNode.EPivotSet') -> FbxVector4: ...
    def SetPostRotation(self, pPivotSet: 'FbxNode.EPivotSet', pVector: FbxVector4) -> None: ...
    def GetPreRotation(self, pPivotSet: 'FbxNode.EPivotSet') -> FbxVector4: ...
    def SetPreRotation(self, pPivotSet: 'FbxNode.EPivotSet', pVector: FbxVector4) -> None: ...
    def GetRotationPivot(self, pPivotSet: 'FbxNode.EPivotSet') -> FbxVector4: ...
    def SetRotationPivot(self, pPivotSet: 'FbxNode.EPivotSet', pVector: FbxVector4) -> None: ...
    def GetRotationOffset(self, pPivotSet: 'FbxNode.EPivotSet') -> FbxVector4: ...
    def SetRotationOffset(self, pPivotSet: 'FbxNode.EPivotSet', pVector: FbxVector4) -> None: ...
    def GetPreferedAngle(self) -> FbxVector4: ...
    def SetPreferedAngle(self, pPreferedAngle: FbxVector4) -> None: ...
    def GetMaxDampStrength(self) -> FbxVector4: ...
    def SetMaxDampStrength(self, pMaxDampStrength: FbxVector4) -> None: ...
    def GetMinDampStrength(self) -> FbxVector4: ...
    def SetMinDampStrength(self, pMinDampStrength: FbxVector4) -> None: ...
    def GetMaxDampRange(self) -> FbxVector4: ...
    def SetMaxDampRange(self, pMaxDampRange: FbxVector4) -> None: ...
    def GetMinDampRange(self) -> FbxVector4: ...
    def SetMinDampRange(self, pMinDampRange: FbxVector4) -> None: ...
    def GetRotationStiffness(self) -> FbxVector4: ...
    def SetRotationStiffness(self, pRotationStiffness: FbxVector4) -> None: ...
    def GetQuaternionInterpolation(self, pPivotSet: 'FbxNode.EPivotSet') -> EFbxQuatInterpMode: ...
    def SetQuaternionInterpolation(self, pPivotSet: 'FbxNode.EPivotSet', pQuatIterp: EFbxQuatInterpMode) -> None: ...
    def GetRotationActive(self) -> bool: ...
    def SetRotationActive(self, pVal: bool) -> None: ...
    def GetUseRotationSpaceForLimitOnly(self, pPivotSet: 'FbxNode.EPivotSet') -> bool: ...
    def SetUseRotationSpaceForLimitOnly(self, pPivotSet: 'FbxNode.EPivotSet', pUseForLimitOnly: bool) -> None: ...
    def GetRotationOrder(self, pPivotSet: 'FbxNode.EPivotSet') -> EFbxRotationOrder: ...
    def SetRotationOrder(self, pPivotSet: 'FbxNode.EPivotSet', pRotationOrder: EFbxRotationOrder) -> None: ...
    def GetPivotState(self, pPivotSet: 'FbxNode.EPivotSet') -> 'FbxNode.EPivotState': ...
    def SetPivotState(self, pPivotSet: 'FbxNode.EPivotSet', pPivotState: 'FbxNode.EPivotState') -> None: ...
    def GetTransformationInheritType(self) -> FbxTransform.EInheritType: ...
    def SetTransformationInheritType(self, pInheritType: FbxTransform.EInheritType) -> None: ...
    def GetLight(self) -> 'FbxLight': ...
    def GetCameraSwitcher(self) -> 'FbxCameraSwitcher': ...
    def GetCamera(self) -> 'FbxCamera': ...
    def GetPatch(self) -> 'FbxPatch': ...
    def GetTrimNurbsSurface(self) -> 'FbxTrimNurbsSurface': ...
    def GetNurbsCurve(self) -> 'FbxNurbsCurve': ...
    def GetNurbsSurface(self) -> 'FbxNurbsSurface': ...
    def GetNurbs(self) -> 'FbxNurbs': ...
    def GetMesh(self) -> 'FbxMesh': ...
    def GetGeometry(self) -> 'FbxGeometry': ...
    def GetSkeleton(self) -> 'FbxSkeleton': ...
    def GetMarker(self) -> 'FbxMarker': ...
    def GetNull(self) -> 'FbxNull': ...
    def GetLodGroup(self) -> 'FbxLODGroup': ...
    def RemoveNodeAttributeByIndex(self, pIndex: int) -> 'FbxNodeAttribute': ...
    def RemoveNodeAttribute(self, pNodeAttribute: 'FbxNodeAttribute') -> 'FbxNodeAttribute': ...
    def AddNodeAttribute(self, pNodeAttribute: 'FbxNodeAttribute', pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetNodeAttributeIndex(self, pNodeAttribute: 'FbxNodeAttribute', pStatus: typing.Optional[FbxStatus] = ...) -> int: ...
    def GetNodeAttributeByIndex(self, pIndex: int) -> 'FbxNodeAttribute': ...
    def SetDefaultNodeAttributeIndex(self, pIndex: int, pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetDefaultNodeAttributeIndex(self) -> int: ...
    def GetNodeAttributeCount(self) -> int: ...
    def GetNodeAttribute(self) -> 'FbxNodeAttribute': ...
    def SetNodeAttribute(self, pNodeAttribute: 'FbxNodeAttribute') -> 'FbxNodeAttribute': ...
    def GetShadingMode(self) -> 'FbxNode.EShadingMode': ...
    def SetShadingMode(self, pShadingMode: 'FbxNode.EShadingMode') -> None: ...
    def GetVisibility(self) -> bool: ...
    def SetVisibility(self, pIsVisible: bool) -> None: ...
    def GetTargetUpVector(self) -> FbxVector4: ...
    def SetTargetUpVector(self, pVector: FbxVector4) -> None: ...
    def GetTargetUp(self) -> 'FbxNode': ...
    def SetTargetUp(self, pNode: 'FbxNode') -> None: ...
    def GetPostTargetRotation(self) -> FbxVector4: ...
    def SetPostTargetRotation(self, pVector: FbxVector4) -> None: ...
    def GetTarget(self) -> 'FbxNode': ...
    def SetTarget(self, pNode: 'FbxNode') -> None: ...
    def FindChild(self, pName: str, pRecursive: bool = ..., pInitial: bool = ...) -> 'FbxNode': ...
    def GetChild(self, pIndex: int) -> 'FbxNode': ...
    def GetChildCount(self, pRecursive: bool = ...) -> int: ...
    def RemoveChild(self, pNode: 'FbxNode') -> 'FbxNode': ...
    def AddChild(self, pNode: 'FbxNode') -> bool: ...
    def GetParent(self) -> 'FbxNode': ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxNode': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxNode': ...


class FbxGlobalSettings(FbxObject):

    ClassId = ... # type: FbxClassId

    def __init__(self, pManager: FbxManager, pName: str) -> None: ...

    def __ne__(self, other: object): ...
    def GetTimelineDefaultTimeSpan(self) -> FbxTimeSpan: ...
    def SetTimelineDefaultTimeSpan(self, pTimeSpan: FbxTimeSpan) -> None: ...
    def GetTimeMode(self) -> FbxTime.EMode: ...
    def SetTimeMode(self, pTimeMode: FbxTime.EMode) -> None: ...
    def GetDefaultCamera(self) -> FbxString: ...
    def SetDefaultCamera(self, pCameraName: str) -> bool: ...
    def GetAmbientColor(self) -> FbxColor: ...
    def SetAmbientColor(self, pAmbientColor: FbxColor) -> None: ...
    def GetOriginalSystemUnit(self) -> FbxSystemUnit: ...
    def SetOriginalSystemUnit(self, pOther: FbxSystemUnit) -> None: ...
    def GetSystemUnit(self) -> FbxSystemUnit: ...
    def SetSystemUnit(self, pOther: FbxSystemUnit) -> None: ...
    def GetOriginalUpAxis(self) -> int: ...
    def SetOriginalUpAxis(self, pAxisSystem: FbxAxisSystem) -> None: ...
    def GetAxisSystem(self) -> FbxAxisSystem: ...
    def SetAxisSystem(self, pAxisSystem: FbxAxisSystem) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxGlobalSettings': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxGlobalSettings': ...


class FbxImplementation(FbxObject):

    ClassId = ... # type: FbxClassId
    Language = ... # type: FbxPropertyString
    LanguageVersion = ... # type: FbxPropertyString
    RenderAPI = ... # type: FbxPropertyString
    RenderAPIVersion = ... # type: FbxPropertyString
    RenderName = ... # type: FbxString
    RootBindingName = ... # type: FbxPropertyString
    sConstants = ... # type: str
    sDefaultLanguage = ... # type: str
    sDefaultLanguageVersion = ... # type: str
    sDefaultRenderAPI = ... # type: str
    sDefaultRenderAPIVersion = ... # type: str
    sDefaultRootBindingName = ... # type: str
    sLanguage = ... # type: str
    sLanguageVersion = ... # type: str
    sRenderAPI = ... # type: str
    sRenderAPIVersion = ... # type: str
    sRootBindingName = ... # type: str

    def __ne__(self, other: object): ...
    def GetOperatorByTargetName(self, pTargetName: str) -> 'FbxBindingOperator': ...
    def GetBindingOperatorCount(self) -> int: ...
    def AddNewBindingOperator(self, pTargetName: str, pFunctionName: str) -> 'FbxBindingOperator': ...
    def GetTableByTargetType(self, pTargetName: str) -> 'FbxBindingTable': ...
    def GetTableByTargetName(self, pName: str) -> 'FbxBindingTable': ...
    def GetTable(self, pIndex: int) -> 'FbxBindingTable': ...
    def GetTableCount(self) -> int: ...
    def GetRootTable(self) -> 'FbxBindingTable': ...
    def AddNewTable(self, pTargetName: str, pTargetType: str) -> 'FbxBindingTable': ...
    def GetConstants(self) -> FbxProperty: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxImplementation': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxImplementation': ...


class FbxCollection(FbxObject):

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def SetSelectedAll(self, pSelection: bool) -> None: ...
    def IsMember(self, pMember: FbxObject) -> bool: ...
    @typing.overload
    def GetMember(self, pIndex: int = ...) -> FbxObject: ...
    @typing.overload
    def GetMember(self, pClassId: FbxClassId, pIndex: int = ...) -> FbxObject: ...
    @typing.overload
    def GetMember(self, pCriteria: FbxCriteria, pIndex: int = ...) -> FbxObject: ...
    @typing.overload
    def GetMemberCount(self) -> int: ...
    @typing.overload
    def GetMemberCount(self, pClassId: FbxClassId) -> int: ...
    @typing.overload
    def GetMemberCount(self, pCriteria: FbxCriteria) -> int: ...
    def FindMember(self, pClassId: FbxClassId, pName: str) -> FbxObject: ...
    def RemoveMember(self, pMember: FbxObject) -> bool: ...
    def AddMember(self, pMember: FbxObject) -> bool: ...
    def Clear(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxCollection': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxCollection': ...


class FbxDocument(FbxCollection):

    ActiveAnimStackName = ... # type: FbxPropertyString
    ClassId = ... # type: FbxClassId
    Roots = ... # type: FbxPropertyFbxReference

    def __ne__(self, other: object): ...
    def ConnectVideos(self) -> None: ...
    def FillAnimStackNameArray(self, pNameArray: FbxStringArray) -> None: ...
    def RemoveAnimStack(self, pName: str) -> bool: ...
    def CreateAnimStack(self, pName: str, pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def IsARootDocument(self) -> bool: ...
    def GetDocumentPathToRootDocument(self, pDocumentPath: FbxDocumentArray, pFirstCall: bool = ...) -> None: ...
    def GetPathToRootDocument(self) -> FbxString: ...
    def GetReferencedObjects(self, pToDoc: 'FbxDocument', pReferencedObjects: FbxObjectArray) -> int: ...
    def GetReferencedDocuments(self, pReferencedDocuments: FbxDocumentArray) -> int: ...
    def GetReferencingObjects(self, pFromDoc: 'FbxDocument', pReferencingObjects: FbxObjectArray) -> int: ...
    def GetReferencingDocuments(self, pReferencingDocuments: FbxDocumentArray) -> int: ...
    def LoadContent(self, pStatus: typing.Optional[FbxStatus] = ...) -> int: ...
    def UnloadContent(self, pStatus: typing.Optional[FbxStatus] = ...) -> int: ...
    def GetPeripheral(self) -> FbxPeripheral: ...
    def SetPeripheral(self, pPeripheral: FbxPeripheral) -> None: ...
    def SetDocumentInfo(self, pSceneInfo: FbxDocumentInfo) -> None: ...
    def GetDocumentInfo(self) -> FbxDocumentInfo: ...
    def IsRootMember(self, pMember: FbxObject) -> bool: ...
    @typing.overload
    def GetRootMember(self, pIndex: int = ...) -> FbxObject: ...
    @typing.overload
    def GetRootMember(self, pClassId: FbxClassId, pIndex: int = ...) -> FbxObject: ...
    @typing.overload
    def GetRootMember(self, pCriteria: FbxCriteria, pIndex: int = ...) -> FbxObject: ...
    @typing.overload
    def GetRootMemberCount(self) -> int: ...
    @typing.overload
    def GetRootMemberCount(self, pClassId: FbxClassId) -> int: ...
    @typing.overload
    def GetRootMemberCount(self, pCriteria: FbxCriteria) -> int: ...
    def FindRootMember(self, pClassId: FbxClassId, pName: str) -> FbxObject: ...
    def RootRootRemoveMember(self, pMember: FbxObject) -> None: ...
    def AddRootMember(self, pMember: FbxObject) -> None: ...
    def Clear(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxDocument': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxDocument': ...


class FbxScene(FbxDocument):

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def GlobalCameraSettings(self) -> FbxGlobalCameraSettings: ...
    def GlobalLightSettings(self) -> FbxGlobalLightSettings: ...
    def SyncShowPropertyForInstance(self) -> None: ...
    def ComputeBoundingBoxMinMaxCenter(self, pBBoxMin: FbxVector4, pBBoxMax: FbxVector4, pBBoxCenter: FbxVector4, pSelected: bool = ..., pTime: FbxTime = ...) -> bool: ...
    def GetAnimationEvaluator(self) -> FbxAnimEvaluator: ...
    def SetAnimationEvaluator(self, pEvaluator: FbxAnimEvaluator) -> None: ...
    def GetCurrentAnimationStack(self) -> 'FbxAnimStack': ...
    def SetCurrentAnimationStack(self, pAnimStack: 'FbxAnimStack') -> None: ...
    def RemoveVideo(self, pVideo: FbxVideo) -> bool: ...
    def AddVideo(self, pVideo: FbxVideo) -> bool: ...
    def GetVideo(self, pIndex: int) -> FbxVideo: ...
    def GetVideoCount(self) -> int: ...
    def RemoveGeometry(self, pGeometry: 'FbxGeometry') -> bool: ...
    def AddGeometry(self, pGeometry: 'FbxGeometry') -> bool: ...
    def GetGeometry(self, pIndex: int) -> 'FbxGeometry': ...
    def GetGeometryCount(self) -> int: ...
    def FindNodeByName(self, pName: FbxString) -> FbxNode: ...
    def GetCurveOnSurfaceCount(self) -> int: ...
    def RemoveNode(self, pNode: FbxNode) -> bool: ...
    def AddNode(self, pNode: FbxNode) -> bool: ...
    def GetNode(self, pIndex: int) -> FbxNode: ...
    def GetNodeCount(self) -> int: ...
    def RemoveTexture(self, pTexture: 'FbxTexture') -> bool: ...
    def AddTexture(self, pTexture: 'FbxTexture') -> bool: ...
    @typing.overload
    def GetTexture(self, pIndex: int) -> 'FbxTexture': ...
    @typing.overload
    def GetTexture(self, pName: str) -> 'FbxTexture': ...
    def GetTextureCount(self) -> int: ...
    def RemoveMaterial(self, pMaterial: 'FbxSurfaceMaterial') -> bool: ...
    def AddMaterial(self, pMaterial: 'FbxSurfaceMaterial') -> bool: ...
    @typing.overload
    def GetMaterial(self, pIndex: int) -> 'FbxSurfaceMaterial': ...
    @typing.overload
    def GetMaterial(self, pName: str) -> 'FbxSurfaceMaterial': ...
    def GetMaterialCount(self) -> int: ...
    def GetGlobalSettings(self) -> FbxGlobalSettings: ...
    def SetSceneInfo(self, pSceneInfo: FbxDocumentInfo) -> None: ...
    def GetSceneInfo(self) -> FbxDocumentInfo: ...
    @typing.overload
    def RemovePose(self, pPose: FbxPose) -> bool: ...
    @typing.overload
    def RemovePose(self, pIndex: int) -> bool: ...
    def AddPose(self, pPose: FbxPose) -> bool: ...
    def GetPose(self, pIndex: int) -> FbxPose: ...
    def GetPoseCount(self) -> int: ...
    def DestroyCharacterPose(self, pIndex: int) -> None: ...
    def CreateCharacterPose(self, pName: str) -> int: ...
    def GetCharacterPose(self, pIndex: int) -> FbxCharacterPose: ...
    def GetCharacterPoseCount(self) -> int: ...
    def DestroyControlSetPlug(self, pIndex: int) -> None: ...
    def CreateControlSetPlug(self, pName: str) -> int: ...
    def GetControlSetPlugCount(self) -> int: ...
    def DestroyCharacter(self, pIndex: int) -> None: ...
    def CreateCharacter(self, pName: str) -> int: ...
    def GetCharacter(self, pIndex: int) -> 'FbxCharacter': ...
    def GetCharacterCount(self) -> int: ...
    def FillMaterialArray(self, pMaterialArray: FbxSurfaceMaterialArray) -> None: ...
    def FillTextureArray(self, pTextureArray: FbxTextureArray) -> None: ...
    def GetRootNode(self) -> FbxNode: ...
    def Clear(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxScene': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxScene': ...


class FbxAnimStack(FbxCollection):

    ClassId = ... # type: FbxClassId
    Description = ... # type: FbxPropertyString
    LocalStart = ... # type: FbxPropertyFbxTime
    LocalStop = ... # type: FbxPropertyFbxTime
    ReferenceStart = ... # type: FbxPropertyFbxTime
    ReferenceStop = ... # type: FbxPropertyFbxTime

    def __ne__(self, other: object): ...
    def BakeLayers(self, pEvaluator: FbxAnimEvaluator, pStart: FbxTime, pStop: FbxTime, pPeriod: FbxTime) -> bool: ...
    def SetReferenceTimeSpan(self, pTimeSpan: FbxTimeSpan) -> None: ...
    def GetReferenceTimeSpan(self) -> FbxTimeSpan: ...
    def SetLocalTimeSpan(self, pTimeSpan: FbxTimeSpan) -> None: ...
    def GetLocalTimeSpan(self) -> FbxTimeSpan: ...
    def Reset(self, pTakeInfo: typing.Optional[FbxTakeInfo] = ...) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxAnimStack': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxAnimStack': ...


class FbxAnimLayer(FbxCollection):

    class EScaleAccumulationMode(enum.Enum):
        eScaleMultiply = ... # type: FbxAnimLayer.EScaleAccumulationMode
        eScaleAdditive = ... # type: FbxAnimLayer.EScaleAccumulationMode

    class ERotationAccumulationMode(enum.Enum):
        eRotationByLayer = ... # type: FbxAnimLayer.ERotationAccumulationMode
        eRotationByChannel = ... # type: FbxAnimLayer.ERotationAccumulationMode

    class EBlendMode(enum.Enum):
        eBlendAdditive = ... # type: FbxAnimLayer.EBlendMode
        eBlendOverride = ... # type: FbxAnimLayer.EBlendMode
        eBlendOverridePassthrough = ... # type: FbxAnimLayer.EBlendMode

    BlendMode = ... # type: FbxPropertyEnum
    ClassId = ... # type: FbxClassId
    Color = ... # type: FbxPropertyDouble3
    Lock = ... # type: FbxPropertyBool1
    Mute = ... # type: FbxPropertyBool1
    RotationAccumulationMode = ... # type: FbxPropertyEnum
    ScaleAccumulationMode = ... # type: FbxPropertyEnum
    Solo = ... # type: FbxPropertyBool1
    Weight = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def CreateCurveNode(self, pProperty: FbxProperty) -> FbxAnimCurveNode: ...
    def GetBlendModeBypass(self, pType: EFbxType) -> bool: ...
    def SetBlendModeBypass(self, pType: EFbxType, pState: bool) -> None: ...
    def Reset(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxAnimLayer': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxAnimLayer': ...


class FbxAudioLayer(FbxCollection):

    ClassId = ... # type: FbxClassId
    Color = ... # type: FbxPropertyDouble3
    Lock = ... # type: FbxPropertyBool1
    Mute = ... # type: FbxPropertyBool1
    Solo = ... # type: FbxPropertyBool1
    Volume = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def Reset(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxAudioLayer': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxAudioLayer': ...


class FbxSelectionSet(FbxCollection):

    ClassId = ... # type: FbxClassId
    SelectionSetAnnotation = ... # type: FbxPropertyString

    def __ne__(self, other: object): ...
    def GetSelectionNodesAndDirectObjects(self, pSelectionNodeList: 'FbxSelectionNodeArray', pDirectObjectList: FbxObjectArray) -> None: ...
    def GetVertexSelection(self, pObj: FbxObject, pVertexIndexArray: IntArray) -> None: ...
    def GetEdgeSelection(self, pObj: FbxObject, pEdgeIndexArray: IntArray) -> None: ...
    def GetFaceSelection(self, pObj: FbxObject, pPolygonIndexArray: IntArray) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxSelectionSet': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxSelectionSet': ...


class FbxSelectionNodeArray(sip.wrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pArrayTemplate: 'FbxSelectionNodeArray') -> None: ...

    def __getitem__(self, pIndex: int) -> FbxSelectionNode: ...
    def Find(self, pItem: FbxSelectionNode) -> int: ...
    def RemoveArray(self, pArray: 'FbxSelectionNodeArray') -> None: ...
    def RemoveIt(self, pItem: FbxSelectionNode) -> bool: ...
    def RemoveLast(self) -> FbxSelectionNode: ...
    def RemoveAt(self, pIndex: int) -> FbxSelectionNode: ...
    def GetLast(self) -> FbxSelectionNode: ...
    def GetFirst(self) -> FbxSelectionNode: ...
    def GetAt(self, pIndex: int) -> FbxSelectionNode: ...
    def SetLast(self, pItem: FbxSelectionNode) -> None: ...
    def SetAt(self, pIndex: int, pItem: FbxSelectionNode) -> None: ...
    def AddArrayNoDuplicate(self, pArray: 'FbxSelectionNodeArray') -> None: ...
    def AddArray(self, pArray: 'FbxSelectionNodeArray') -> None: ...
    def AddUnique(self, pItem: FbxSelectionNode) -> int: ...
    def Add(self, pItem: FbxSelectionNode) -> int: ...
    def InsertAt(self, pIndex: int, pItem: FbxSelectionNode) -> int: ...
    def GetCount(self) -> int: ...


class FbxCollectionExclusive(FbxCollection):

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def AddMember(self, pMember: FbxObject) -> bool: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxCollectionExclusive': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxCollectionExclusive': ...


class FbxDisplayLayer(FbxCollectionExclusive):

    ClassId = ... # type: FbxClassId
    Color = ... # type: FbxPropertyDouble3
    Freeze = ... # type: FbxPropertyBool1
    LODBox = ... # type: FbxPropertyBool1
    Show = ... # type: FbxPropertyBool1
    sColorDefault = ... # type: FbxDouble3

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxDisplayLayer': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxDisplayLayer': ...


class FbxAnimCurveKeyBase(sip.wrapper):

    mTime = ... # type: FbxTime

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxAnimCurveKeyBase') -> None: ...

    def SetTime(self, pTime: FbxTime) -> None: ...
    def GetTime(self) -> FbxTime: ...


class FbxAnimCurveBase(FbxObject):

    class EExtrapolationType(enum.Enum):
        eConstant = ... # type: FbxAnimCurveBase.EExtrapolationType
        eRepetition = ... # type: FbxAnimCurveBase.EExtrapolationType
        eMirrorRepetition = ... # type: FbxAnimCurveBase.EExtrapolationType
        eKeepSlope = ... # type: FbxAnimCurveBase.EExtrapolationType

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def GetTimeInterval(self, pTimeInterval: FbxTimeSpan) -> bool: ...
    def EvaluateIndex(self, pIndex: float) -> float: ...
    def Evaluate(self, pTime: FbxTime) -> typing.Tuple[float, int]: ...
    def GetPostExtrapolationCount(self) -> int: ...
    def SetPostExtrapolationCount(self, pCount: int) -> None: ...
    def GetPostExtrapolation(self) -> 'FbxAnimCurveBase.EExtrapolationType': ...
    def SetPostExtrapolation(self, pExtrapolation: 'FbxAnimCurveBase.EExtrapolationType') -> None: ...
    def GetPreExtrapolationCount(self) -> int: ...
    def SetPreExtrapolationCount(self, pCount: int) -> None: ...
    def GetPreExtrapolation(self) -> 'FbxAnimCurveBase.EExtrapolationType': ...
    def SetPreExtrapolation(self, pExtrapolation: 'FbxAnimCurveBase.EExtrapolationType') -> None: ...
    def KeySetTime(self, pKeyIndex: int, pTime: FbxTime) -> None: ...
    def KeyGetTime(self, pKeyIndex: int) -> FbxTime: ...
    @typing.overload
    def KeyRemove(self, pIndex: int) -> bool: ...
    @typing.overload
    def KeyRemove(self, pStartIndex: int, pEndIndex: int) -> bool: ...
    def KeySet(self, pIndex: int, pKey: FbxAnimCurveKeyBase) -> bool: ...
    def KeyAdd(self, pTime: FbxTime, pKey: FbxAnimCurveKeyBase) -> typing.Tuple[int, int]: ...
    def KeyGetCount(self) -> int: ...
    def KeyClear(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxAnimCurveBase': ...


class FbxAnimCurveDef(sip.wrapper):

    class EDataIndex(enum.Enum):
        eRightSlope = ... # type: FbxAnimCurveDef.EDataIndex
        eNextLeftSlope = ... # type: FbxAnimCurveDef.EDataIndex
        eWeights = ... # type: FbxAnimCurveDef.EDataIndex
        eRightWeight = ... # type: FbxAnimCurveDef.EDataIndex
        eNextLeftWeight = ... # type: FbxAnimCurveDef.EDataIndex
        eVelocity = ... # type: FbxAnimCurveDef.EDataIndex
        eRightVelocity = ... # type: FbxAnimCurveDef.EDataIndex
        eNextLeftVelocity = ... # type: FbxAnimCurveDef.EDataIndex
        eTCBTension = ... # type: FbxAnimCurveDef.EDataIndex
        eTCBContinuity = ... # type: FbxAnimCurveDef.EDataIndex
        eTCBBias = ... # type: FbxAnimCurveDef.EDataIndex

    class ETangentVisibility(enum.Enum):
        eTangentShowNone = ... # type: FbxAnimCurveDef.ETangentVisibility
        eTangentShowLeft = ... # type: FbxAnimCurveDef.ETangentVisibility
        eTangentShowRight = ... # type: FbxAnimCurveDef.ETangentVisibility
        eTangentShowBoth = ... # type: FbxAnimCurveDef.ETangentVisibility

    class EVelocityMode(enum.Enum):
        eVelocityNone = ... # type: FbxAnimCurveDef.EVelocityMode
        eVelocityRight = ... # type: FbxAnimCurveDef.EVelocityMode
        eVelocityNextLeft = ... # type: FbxAnimCurveDef.EVelocityMode
        eVelocityAll = ... # type: FbxAnimCurveDef.EVelocityMode

    class EConstantMode(enum.Enum):
        eConstantStandard = ... # type: FbxAnimCurveDef.EConstantMode
        eConstantNext = ... # type: FbxAnimCurveDef.EConstantMode

    class EWeightedMode(enum.Enum):
        eWeightedNone = ... # type: FbxAnimCurveDef.EWeightedMode
        eWeightedRight = ... # type: FbxAnimCurveDef.EWeightedMode
        eWeightedNextLeft = ... # type: FbxAnimCurveDef.EWeightedMode
        eWeightedAll = ... # type: FbxAnimCurveDef.EWeightedMode

    class EInterpolationType(enum.Enum):
        eInterpolationConstant = ... # type: FbxAnimCurveDef.EInterpolationType
        eInterpolationLinear = ... # type: FbxAnimCurveDef.EInterpolationType
        eInterpolationCubic = ... # type: FbxAnimCurveDef.EInterpolationType

    class ETangentMode(enum.Enum):
        eTangentAuto = ... # type: FbxAnimCurveDef.ETangentMode
        eTangentTCB = ... # type: FbxAnimCurveDef.ETangentMode
        eTangentUser = ... # type: FbxAnimCurveDef.ETangentMode
        eTangentGenericBreak = ... # type: FbxAnimCurveDef.ETangentMode
        eTangentBreak = ... # type: FbxAnimCurveDef.ETangentMode
        eTangentAutoBreak = ... # type: FbxAnimCurveDef.ETangentMode
        eTangentGenericClamp = ... # type: FbxAnimCurveDef.ETangentMode
        eTangentGenericTimeIndependent = ... # type: FbxAnimCurveDef.ETangentMode
        eTangentGenericClampProgressive = ... # type: FbxAnimCurveDef.ETangentMode

    sDEFAULT_VELOCITY = ... # type: float
    sDEFAULT_WEIGHT = ... # type: float
    sMAX_WEIGHT = ... # type: float
    sMIN_WEIGHT = ... # type: float

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxAnimCurveDef') -> None: ...


class FbxAnimCurveTangentInfo(sip.wrapper):

    mAuto = ... # type: float
    mDerivative = ... # type: float
    mHasVelocity = ... # type: bool
    mVelocity = ... # type: float
    mWeight = ... # type: float
    mWeighted = ... # type: bool

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'FbxAnimCurveTangentInfo') -> None: ...


class FbxAnimCurveKey(FbxAnimCurveKeyBase):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pTime: FbxTime) -> None: ...
    @typing.overload
    def __init__(self, pTime: FbxTime, pVal: float) -> None: ...
    @typing.overload
    def __init__(self, pFKey: 'FbxAnimCurveKey') -> None: ...

    def GetBreak(self) -> bool: ...
    def SetBreak(self, pVal: bool) -> None: ...
    def GetTangentVisibility(self) -> FbxAnimCurveDef.ETangentVisibility: ...
    def SetTangentVisibility(self, pVisibility: FbxAnimCurveDef.ETangentVisibility) -> None: ...
    def SetDataFloat(self, pIndex: FbxAnimCurveDef.EDataIndex, pValue: float) -> None: ...
    def GetDataFloat(self, pIndex: FbxAnimCurveDef.EDataIndex) -> float: ...
    def SetConstantMode(self, pMode: FbxAnimCurveDef.EConstantMode) -> None: ...
    def GetConstantMode(self) -> FbxAnimCurveDef.EConstantMode: ...
    def SetTangentVelocityMode(self, pTangentVelocityMode: FbxAnimCurveDef.EVelocityMode, pMask: FbxAnimCurveDef.EVelocityMode = ...) -> None: ...
    def GetTangentVelocityMode(self) -> FbxAnimCurveDef.EVelocityMode: ...
    def SetTangentWeightMode(self, pTangentWeightMode: FbxAnimCurveDef.EWeightedMode, pMask: FbxAnimCurveDef.EWeightedMode = ...) -> None: ...
    def GetTangentWeightMode(self) -> FbxAnimCurveDef.EWeightedMode: ...
    def SetTangentMode(self, pTangentMode: FbxAnimCurveDef.ETangentMode) -> None: ...
    def GetTangentMode(self, pIncludeOverrides: bool = ...) -> FbxAnimCurveDef.ETangentMode: ...
    def SetInterpolation(self, pInterpolation: FbxAnimCurveDef.EInterpolationType) -> None: ...
    def GetInterpolation(self) -> FbxAnimCurveDef.EInterpolationType: ...
    def SetValue(self, pValue: float) -> None: ...
    def GetValue(self) -> float: ...
    def SetTCB(self, pTime: FbxTime, pValue: float, pData0: float = ..., pData1: float = ..., pData2: float = ...) -> None: ...
    def Set(self, pTime: FbxTime, pValue: float) -> None: ...
    def SetTime(self, pTime: FbxTime) -> None: ...
    def GetTime(self) -> FbxTime: ...


class FbxAnimCurve(FbxAnimCurveBase):

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def CopyFrom(self, pSource: 'FbxAnimCurve', pWithKeys: bool = ...) -> None: ...
    def GetTimeInterval(self, pTimeInterval: FbxTimeSpan) -> bool: ...
    def EvaluateRightDerivative(self, pTime: FbxTime) -> typing.Tuple[float, int]: ...
    def EvaluateLeftDerivative(self, pTime: FbxTime) -> typing.Tuple[float, int]: ...
    def EvaluateIndex(self, pIndex: float) -> float: ...
    def Evaluate(self, pTime: FbxTime) -> typing.Tuple[float, int]: ...
    def KeyGetRightTangentVelocity(self, pIndex: int) -> float: ...
    def KeyGetLeftTangentVelocity(self, pIndex: int) -> float: ...
    def KeySetRightTangentWeight(self, pIndex: int, pWeight: float, pAdjustTan: bool = ...) -> None: ...
    def KeySetLeftTangentWeight(self, pIndex: int, pWeight: float, pAdjustTan: bool = ...) -> None: ...
    def KeyGetRightTangentWeight(self, pIndex: int) -> float: ...
    def KeyGetLeftTangentWeight(self, pIndex: int) -> float: ...
    def KeyIsRightTangentWeighted(self, pIndex: int) -> bool: ...
    def KeyIsLeftTangentWeighted(self, pIndex: int) -> bool: ...
    def KeySetRightDerivativeInfo(self, pIndex: int, pValue: FbxAnimCurveTangentInfo, pForceDerivative: bool = ...) -> None: ...
    def KeyGetRightDerivativeInfo(self, pIndex: int) -> FbxAnimCurveTangentInfo: ...
    def KeyGetRightAuto(self, pIndex: int, pApplyOvershootProtection: bool = ...) -> float: ...
    def KeySetRightDerivative(self, pIndex: int, pValue: float) -> None: ...
    def KeyGetRightDerivative(self, pIndex: int) -> float: ...
    def KeySetLeftDerivativeInfo(self, pIndex: int, pValue: FbxAnimCurveTangentInfo, pForceDerivative: bool = ...) -> None: ...
    def KeyGetLeftDerivativeInfo(self, pIndex: int) -> FbxAnimCurveTangentInfo: ...
    def KeyGetLeftAuto(self, pIndex: int, pApplyOvershootProtection: bool = ...) -> float: ...
    def KeySetLeftDerivative(self, pIndex: int, pValue: float) -> None: ...
    def KeyGetLeftDerivative(self, pIndex: int) -> float: ...
    def KeyGetBreak(self, pKeyIndex: int) -> bool: ...
    def KeySetBreak(self, pKeyIndex: int, pVal: bool) -> None: ...
    def KeySetTime(self, pKeyIndex: int, pTime: FbxTime) -> None: ...
    def KeyGetTime(self, pKeyIndex: int) -> FbxTime: ...
    def KeyMultTangent(self, pKeyIndex: int, pValue: float) -> None: ...
    def KeyMultValue(self, pKeyIndex: int, pValue: float) -> None: ...
    def KeyIncValue(self, pKeyIndex: int, pValue: float) -> None: ...
    def KeySetValue(self, pKeyIndex: int, pValue: float) -> None: ...
    def KeyGetValue(self, pKeyIndex: int) -> float: ...
    def KeyGet(self, pIndex: int) -> FbxAnimCurveKey: ...
    def KeySetTangentMode(self, pKeyIndex: int, pTangent: FbxAnimCurveDef.ETangentMode) -> None: ...
    def KeySetConstantMode(self, pKeyIndex: int, pMode: FbxAnimCurveDef.EConstantMode) -> None: ...
    def KeyGetTangentMode(self, pKeyIndex: int, pIncludeOverrides: bool = ...) -> FbxAnimCurveDef.ETangentMode: ...
    def KeyGetConstantMode(self, pKeyIndex: int) -> FbxAnimCurveDef.EConstantMode: ...
    def KeySetInterpolation(self, pKeyIndex: int, pInterpolation: FbxAnimCurveDef.EInterpolationType) -> None: ...
    def KeyGetInterpolation(self, pKeyIndex: int) -> FbxAnimCurveDef.EInterpolationType: ...
    def KeySetTCB(self, pKeyIndex: int, pTime: FbxTime, pValue: float, pData0: float = ..., pData1: float = ..., pData2: float = ...) -> None: ...
    def KeyScaleValueAndTangent(self, pMultValue: float) -> bool: ...
    def KeyScaleValue(self, pMultValue: float) -> bool: ...
    def KeyFind(self, pTime: FbxTime) -> typing.Tuple[float, int]: ...
    def KeyInsert(self, pTime: FbxTime) -> typing.Tuple[int, int]: ...
    @typing.overload
    def KeyRemove(self, pIndex: int) -> bool: ...
    @typing.overload
    def KeyRemove(self, pStartIndex: int, pEndIndex: int) -> bool: ...
    @typing.overload
    def KeySet(self, pIndex: int, pKey: FbxAnimCurveKeyBase) -> bool: ...
    @typing.overload
    def KeySet(self, pKeyIndex: int, pTime: FbxTime, pValue: float, pInterpolation: FbxAnimCurveDef.EInterpolationType = ..., pTangentMode: FbxAnimCurveDef.ETangentMode = ..., pData0: float = ..., pData1: float = ..., pTangentWeightMode: FbxAnimCurveDef.EWeightedMode = ..., pWeight0: float = ..., pWeight1: float = ..., pVelocity0: float = ..., pVelocity1: float = ...) -> None: ...
    @typing.overload
    def KeyAdd(self, pTime: FbxTime, pKey: FbxAnimCurveKeyBase) -> typing.Tuple[int, int]: ...
    @typing.overload
    def KeyAdd(self, pTime: FbxTime) -> typing.Tuple[int, int]: ...
    def KeyGetCount(self) -> int: ...
    def KeyClear(self) -> None: ...
    def KeyModifyEnd(self) -> None: ...
    def KeyModifyBegin(self) -> None: ...
    def ResizeKeyBuffer(self, pKeyCount: int) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxAnimCurve': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxScene, pName: str) -> 'FbxAnimCurve': ...


class FbxIOBase(FbxObject):

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def GetStatus(self) -> FbxStatus: ...
    def GetFileName(self) -> FbxString: ...
    def Initialize(self, pFileName: str, pFileFormat: int = ..., pIOSettings: typing.Optional[FbxIOSettings] = ...) -> bool: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxIOBase': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxIOBase': ...


class FbxExporter(FbxIOBase):

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def TCSetDefinition(self, pType: int) -> None: ...
    def GetFileHeaderInfo(self) -> FbxIOFileHeaderInfo: ...
    def SetDefaultRenderResolution(self, pCamName: FbxString, pResolutionMode: FbxString, pW: float, pH: float) -> None: ...
    def SetResamplingRate(self, pResamplingRate: float) -> None: ...
    def SetFileExportVersion(self, pVersion: FbxString, pRenamingMode: FbxSceneRenamer.ERenamingMode) -> bool: ...
    def IsFBX(self) -> bool: ...
    def GetFileFormat(self) -> int: ...
    def GetProgress(self, pStatus: typing.Optional[FbxString] = ...) -> float: ...
    def IsExporting(self) -> typing.Tuple[bool, bool]: ...
    def Export(self, pDocument: FbxDocument, pNonBlocking: bool = ...) -> bool: ...
    def SetIOSettings(self, pIOSettings: FbxIOSettings) -> None: ...
    def GetIOSettings(self) -> FbxIOSettings: ...
    def GetExportOptions(self) -> bool: ...
    def Initialize(self, pFileName: str, pFileFormat: int = ..., pIOSettings: typing.Optional[FbxIOSettings] = ...) -> bool: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxExporter': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxExporter': ...


class FbxImporter(FbxIOBase):

    class EStreamOptionsGeneration(enum.Enum):
        eParseFile = ... # type: FbxImporter.EStreamOptionsGeneration
        eDoNotParseFile = ... # type: FbxImporter.EStreamOptionsGeneration

    ClassId = ... # type: FbxClassId

    def __init__(self, pManager: FbxManager, pName: str) -> None: ...

    def __ne__(self, other: object): ...
    def IsFBX(self) -> bool: ...
    def GetFileFormat(self) -> int: ...
    def GetSceneInfo(self) -> FbxDocumentInfo: ...
    def GetActiveAnimStackName(self) -> FbxString: ...
    def GetTakeInfo(self, pIndex: int) -> FbxTakeInfo: ...
    def GetAnimStackCount(self) -> int: ...
    def SetIOSettings(self, pIOSettings: FbxIOSettings) -> None: ...
    def GetIOSettings(self) -> FbxIOSettings: ...
    def IsImporting(self) -> typing.Tuple[bool, bool]: ...
    def Import(self, pDocument: FbxDocument, pNonBlocking: bool = ...) -> bool: ...
    @typing.overload
    def GetImportOptions(self, pStreamOptionsGeneration: 'FbxImporter.EStreamOptionsGeneration' = ...) -> bool: ...
    @typing.overload
    def GetImportOptions(self, pFbxObject: FbxIO) -> bool: ...
    def GetFileHeaderInfo(self) -> FbxIOFileHeaderInfo: ...
    def GetDefaultRenderResolution(self, pCamName: FbxString, pResolutionMode: FbxString) -> typing.Tuple[bool, float, float]: ...
    def GetFileVersion(self) -> typing.Tuple[int, int, int]: ...
    def Initialize(self, pFileName: str, pFileFormat: int = ..., pIOSettings: typing.Optional[FbxIOSettings] = ...) -> bool: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxImporter': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxImporter': ...


class FbxConstraint(FbxObject):

    class EType(enum.Enum):
        eUnknown = ... # type: FbxConstraint.EType
        ePosition = ... # type: FbxConstraint.EType
        eRotation = ... # type: FbxConstraint.EType
        eScale = ... # type: FbxConstraint.EType
        eParent = ... # type: FbxConstraint.EType
        eSingleChainIK = ... # type: FbxConstraint.EType
        eAim = ... # type: FbxConstraint.EType
        eCharacter = ... # type: FbxConstraint.EType
        eCustom = ... # type: FbxConstraint.EType

    Active = ... # type: FbxPropertyBool1
    ClassId = ... # type: FbxClassId
    Lock = ... # type: FbxPropertyBool1
    Weight = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def GetConstraintSource(self, pIndex: int) -> FbxObject: ...
    def GetConstraintSourceCount(self) -> int: ...
    def GetConstrainedObject(self) -> FbxObject: ...
    def GetConstraintType(self) -> 'FbxConstraint.EType': ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxConstraint': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxConstraint': ...


class FbxCharacterLink(sip.wrapper):

    mAxisLen = ... # type: float
    mHasRotSpace = ... # type: bool
    mNode = ... # type: FbxNode
    mOffsetR = ... # type: FbxVector4
    mOffsetS = ... # type: FbxVector4
    mOffsetT = ... # type: FbxVector4
    mParentROffset = ... # type: FbxVector4
    mPostRotation = ... # type: FbxVector4
    mPreRotation = ... # type: FbxVector4
    mRLimits = ... # type: FbxLimits
    mRotOrder = ... # type: int
    mTemplateName = ... # type: FbxString

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pCharacterLink: 'FbxCharacterLink') -> None: ...

    def Reset(self) -> None: ...


class FbxCharacter(FbxConstraint):

    class EErrorCode(enum.Enum):
        eInternalError = ... # type: FbxCharacter.EErrorCode
        eErrorCount = ... # type: FbxCharacter.EErrorCode

    class EPropertyUnit(enum.Enum):
        ePropertyNoUnit = ... # type: FbxCharacter.EPropertyUnit
        ePropertyPercent = ... # type: FbxCharacter.EPropertyUnit
        ePropertySecond = ... # type: FbxCharacter.EPropertyUnit
        ePropertyCentimeter = ... # type: FbxCharacter.EPropertyUnit
        ePropertyDegree = ... # type: FbxCharacter.EPropertyUnit
        ePropertyEnum = ... # type: FbxCharacter.EPropertyUnit
        ePropertyReal = ... # type: FbxCharacter.EPropertyUnit

    class EContactBehaviour(enum.Enum):
        eContactNeverSync = ... # type: FbxCharacter.EContactBehaviour
        eContactSyncOnKey = ... # type: FbxCharacter.EContactBehaviour
        eContactAlwaysSync = ... # type: FbxCharacter.EContactBehaviour
        eContactBehaviorCount = ... # type: FbxCharacter.EContactBehaviour

    class EFingerContactMode(enum.Enum):
        eFingerContactModeSticky = ... # type: FbxCharacter.EFingerContactMode
        eFingerContactModeSpread = ... # type: FbxCharacter.EFingerContactMode
        eFingerContactModeStickySpread = ... # type: FbxCharacter.EFingerContactMode
        eFingerContactModeCount = ... # type: FbxCharacter.EFingerContactMode

    class EHandContactType(enum.Enum):
        eHandTypeNormal = ... # type: FbxCharacter.EHandContactType
        eHandTypeWrist = ... # type: FbxCharacter.EHandContactType
        eHandTypeFingerBase = ... # type: FbxCharacter.EHandContactType
        eHandTypeHoof = ... # type: FbxCharacter.EHandContactType
        eHandContactModeCount = ... # type: FbxCharacter.EHandContactType

    class EFootContactType(enum.Enum):
        eFootTypeNormal = ... # type: FbxCharacter.EFootContactType
        eFootTypeAnkle = ... # type: FbxCharacter.EFootContactType
        eFootTypeToeBase = ... # type: FbxCharacter.EFootContactType
        eFootTypeHoof = ... # type: FbxCharacter.EFootContactType
        eFootContactModeCount = ... # type: FbxCharacter.EFootContactType

    class EHipsTranslationMode(enum.Enum):
        eHipsTranslationWorldRigid = ... # type: FbxCharacter.EHipsTranslationMode
        eHipsTranslationBodyRigid = ... # type: FbxCharacter.EHipsTranslationMode
        eHipsTranslationTypeCount = ... # type: FbxCharacter.EHipsTranslationMode

    class ERollExtractionMode(enum.Enum):
        eRelativeRollExtraction = ... # type: FbxCharacter.ERollExtractionMode
        eAbsoluteRollExtraction = ... # type: FbxCharacter.ERollExtractionMode
        eRollExtractionTypeCount = ... # type: FbxCharacter.ERollExtractionMode

    class EFloorPivot(enum.Enum):
        eFloorPivotAuto = ... # type: FbxCharacter.EFloorPivot
        eFloorPivotAnkle = ... # type: FbxCharacter.EFloorPivot
        eFloorPivotToes = ... # type: FbxCharacter.EFloorPivot
        eFloorPivotCount = ... # type: FbxCharacter.EFloorPivot

    class EPostureMode(enum.Enum):
        ePostureBiped = ... # type: FbxCharacter.EPostureMode
        ePostureQuadriped = ... # type: FbxCharacter.EPostureMode
        ePostureCount = ... # type: FbxCharacter.EPostureMode

    class EAutoUser(enum.Enum):
        eParamModeAuto2 = ... # type: FbxCharacter.EAutoUser
        eParamModeUser2 = ... # type: FbxCharacter.EAutoUser

    class EOffAutoUser(enum.Enum):
        eParamModeOff = ... # type: FbxCharacter.EOffAutoUser
        eParamModeAuto = ... # type: FbxCharacter.EOffAutoUser
        eParamModeUser = ... # type: FbxCharacter.EOffAutoUser

    class ENodeId(enum.Enum):
        eHips = ... # type: FbxCharacter.ENodeId
        eLeftHip = ... # type: FbxCharacter.ENodeId
        eLeftKnee = ... # type: FbxCharacter.ENodeId
        eLeftAnkle = ... # type: FbxCharacter.ENodeId
        eLeftFoot = ... # type: FbxCharacter.ENodeId
        eRightHip = ... # type: FbxCharacter.ENodeId
        eRightKnee = ... # type: FbxCharacter.ENodeId
        eRightAnkle = ... # type: FbxCharacter.ENodeId
        eRightFoot = ... # type: FbxCharacter.ENodeId
        eWaist = ... # type: FbxCharacter.ENodeId
        eChest = ... # type: FbxCharacter.ENodeId
        eLeftCollar = ... # type: FbxCharacter.ENodeId
        eLeftShoulder = ... # type: FbxCharacter.ENodeId
        eLeftElbow = ... # type: FbxCharacter.ENodeId
        eLeftWrist = ... # type: FbxCharacter.ENodeId
        eRightCollar = ... # type: FbxCharacter.ENodeId
        eRightShoulder = ... # type: FbxCharacter.ENodeId
        eRightElbow = ... # type: FbxCharacter.ENodeId
        eRightWrist = ... # type: FbxCharacter.ENodeId
        eNeck = ... # type: FbxCharacter.ENodeId
        eHead = ... # type: FbxCharacter.ENodeId
        eLeftHipRoll = ... # type: FbxCharacter.ENodeId
        eLeftKneeRoll = ... # type: FbxCharacter.ENodeId
        eRightHipRoll = ... # type: FbxCharacter.ENodeId
        eRightKneeRoll = ... # type: FbxCharacter.ENodeId
        eLeftShoulderRoll = ... # type: FbxCharacter.ENodeId
        eLeftElbowRoll = ... # type: FbxCharacter.ENodeId
        eRightShoulderRoll = ... # type: FbxCharacter.ENodeId
        eRightElbowRoll = ... # type: FbxCharacter.ENodeId
        eSpine2 = ... # type: FbxCharacter.ENodeId
        eSpine3 = ... # type: FbxCharacter.ENodeId
        eSpine4 = ... # type: FbxCharacter.ENodeId
        eSpine5 = ... # type: FbxCharacter.ENodeId
        eSpine6 = ... # type: FbxCharacter.ENodeId
        eSpine7 = ... # type: FbxCharacter.ENodeId
        eSpine8 = ... # type: FbxCharacter.ENodeId
        eSpine9 = ... # type: FbxCharacter.ENodeId
        eLeftThumbA = ... # type: FbxCharacter.ENodeId
        eLeftThumbB = ... # type: FbxCharacter.ENodeId
        eLeftThumbC = ... # type: FbxCharacter.ENodeId
        eLeftIndexA = ... # type: FbxCharacter.ENodeId
        eLeftIndexB = ... # type: FbxCharacter.ENodeId
        eLeftIndexC = ... # type: FbxCharacter.ENodeId
        eLeftMiddleA = ... # type: FbxCharacter.ENodeId
        eLeftMiddleB = ... # type: FbxCharacter.ENodeId
        eLeftMiddleC = ... # type: FbxCharacter.ENodeId
        eLeftRingA = ... # type: FbxCharacter.ENodeId
        eLeftRingB = ... # type: FbxCharacter.ENodeId
        eLeftRingC = ... # type: FbxCharacter.ENodeId
        eLeftPinkyA = ... # type: FbxCharacter.ENodeId
        eLeftPinkyB = ... # type: FbxCharacter.ENodeId
        eLeftPinkyC = ... # type: FbxCharacter.ENodeId
        eRightThumbA = ... # type: FbxCharacter.ENodeId
        eRightThumbB = ... # type: FbxCharacter.ENodeId
        eRightThumbC = ... # type: FbxCharacter.ENodeId
        eRightIndexA = ... # type: FbxCharacter.ENodeId
        eRightIndexB = ... # type: FbxCharacter.ENodeId
        eRightIndexC = ... # type: FbxCharacter.ENodeId
        eRightMiddleA = ... # type: FbxCharacter.ENodeId
        eRightMiddleB = ... # type: FbxCharacter.ENodeId
        eRightMiddleC = ... # type: FbxCharacter.ENodeId
        eRightRingA = ... # type: FbxCharacter.ENodeId
        eRightRingB = ... # type: FbxCharacter.ENodeId
        eRightRingC = ... # type: FbxCharacter.ENodeId
        eRightPinkyA = ... # type: FbxCharacter.ENodeId
        eRightPinkyB = ... # type: FbxCharacter.ENodeId
        eRightPinkyC = ... # type: FbxCharacter.ENodeId
        eReference = ... # type: FbxCharacter.ENodeId
        eLeftFloor = ... # type: FbxCharacter.ENodeId
        eRightFloor = ... # type: FbxCharacter.ENodeId
        eHipsTranslation = ... # type: FbxCharacter.ENodeId
        eProps0 = ... # type: FbxCharacter.ENodeId
        eProps1 = ... # type: FbxCharacter.ENodeId
        eProps2 = ... # type: FbxCharacter.ENodeId
        eProps3 = ... # type: FbxCharacter.ENodeId
        eProps4 = ... # type: FbxCharacter.ENodeId
        eGameModeParentLeftHipRoll = ... # type: FbxCharacter.ENodeId
        eGameModeParentLeftKnee = ... # type: FbxCharacter.ENodeId
        eGameModeParentLeftKneeRoll = ... # type: FbxCharacter.ENodeId
        eGameModeParentRightHipRoll = ... # type: FbxCharacter.ENodeId
        eGameModeParentRightKnee = ... # type: FbxCharacter.ENodeId
        eGameModeParentRightKneeRoll = ... # type: FbxCharacter.ENodeId
        eGameModeParentLeftShoulderRoll = ... # type: FbxCharacter.ENodeId
        eGameModeParentLeftElbow = ... # type: FbxCharacter.ENodeId
        eGameModeParentLeftElbowRoll = ... # type: FbxCharacter.ENodeId
        eGameModeParentRightShoulderRoll = ... # type: FbxCharacter.ENodeId
        eGameModeParentRightElbow = ... # type: FbxCharacter.ENodeId
        eGameModeParentRightElbowRoll = ... # type: FbxCharacter.ENodeId
        eLeftUpLegRoll = ... # type: FbxCharacter.ENodeId
        eLeftLegRoll = ... # type: FbxCharacter.ENodeId
        eRightUpLegRoll = ... # type: FbxCharacter.ENodeId
        eRightLegRoll = ... # type: FbxCharacter.ENodeId
        eLeftArmRoll = ... # type: FbxCharacter.ENodeId
        eLeftForeArmRoll = ... # type: FbxCharacter.ENodeId
        eRightArmRoll = ... # type: FbxCharacter.ENodeId
        eRightForeArmRoll = ... # type: FbxCharacter.ENodeId
        eLeftHandFloor = ... # type: FbxCharacter.ENodeId
        eRightHandFloor = ... # type: FbxCharacter.ENodeId
        eLeftHand = ... # type: FbxCharacter.ENodeId
        eRightHand = ... # type: FbxCharacter.ENodeId
        eNeck1 = ... # type: FbxCharacter.ENodeId
        eNeck2 = ... # type: FbxCharacter.ENodeId
        eNeck3 = ... # type: FbxCharacter.ENodeId
        eNeck4 = ... # type: FbxCharacter.ENodeId
        eNeck5 = ... # type: FbxCharacter.ENodeId
        eNeck6 = ... # type: FbxCharacter.ENodeId
        eNeck7 = ... # type: FbxCharacter.ENodeId
        eNeck8 = ... # type: FbxCharacter.ENodeId
        eNeck9 = ... # type: FbxCharacter.ENodeId
        eLeftInHandThumb = ... # type: FbxCharacter.ENodeId
        eLeftThumbD = ... # type: FbxCharacter.ENodeId
        eLeftInHandIndex = ... # type: FbxCharacter.ENodeId
        eLeftIndexD = ... # type: FbxCharacter.ENodeId
        eLeftInHandMiddle = ... # type: FbxCharacter.ENodeId
        eLeftMiddleD = ... # type: FbxCharacter.ENodeId
        eLeftInHandRing = ... # type: FbxCharacter.ENodeId
        eLeftRingD = ... # type: FbxCharacter.ENodeId
        eLeftInHandPinky = ... # type: FbxCharacter.ENodeId
        eLeftPinkyD = ... # type: FbxCharacter.ENodeId
        eLeftInHandExtraFinger = ... # type: FbxCharacter.ENodeId
        eLeftExtraFingerA = ... # type: FbxCharacter.ENodeId
        eLeftExtraFingerB = ... # type: FbxCharacter.ENodeId
        eLeftExtraFingerC = ... # type: FbxCharacter.ENodeId
        eLeftExtraFingerD = ... # type: FbxCharacter.ENodeId
        eRightInHandThumb = ... # type: FbxCharacter.ENodeId
        eRightThumbD = ... # type: FbxCharacter.ENodeId
        eRightInHandIndex = ... # type: FbxCharacter.ENodeId
        eRightIndexD = ... # type: FbxCharacter.ENodeId
        eRightInHandMiddle = ... # type: FbxCharacter.ENodeId
        eRightMiddleD = ... # type: FbxCharacter.ENodeId
        eRightInHandRing = ... # type: FbxCharacter.ENodeId
        eRightRingD = ... # type: FbxCharacter.ENodeId
        eRightInHandPinky = ... # type: FbxCharacter.ENodeId
        eRightPinkyD = ... # type: FbxCharacter.ENodeId
        eRightInHandExtraFinger = ... # type: FbxCharacter.ENodeId
        eRightExtraFingerA = ... # type: FbxCharacter.ENodeId
        eRightExtraFingerB = ... # type: FbxCharacter.ENodeId
        eRightExtraFingerC = ... # type: FbxCharacter.ENodeId
        eRightExtraFingerD = ... # type: FbxCharacter.ENodeId
        eLeftInFootThumb = ... # type: FbxCharacter.ENodeId
        eLeftFootThumbA = ... # type: FbxCharacter.ENodeId
        eLeftFootThumbB = ... # type: FbxCharacter.ENodeId
        eLeftFootThumbC = ... # type: FbxCharacter.ENodeId
        eLeftFootThumbD = ... # type: FbxCharacter.ENodeId
        eLeftInFootIndex = ... # type: FbxCharacter.ENodeId
        eLeftFootIndexA = ... # type: FbxCharacter.ENodeId
        eLeftFootIndexB = ... # type: FbxCharacter.ENodeId
        eLeftFootIndexC = ... # type: FbxCharacter.ENodeId
        eLeftFootIndexD = ... # type: FbxCharacter.ENodeId
        eLeftInFootMiddle = ... # type: FbxCharacter.ENodeId
        eLeftFootMiddleA = ... # type: FbxCharacter.ENodeId
        eLeftFootMiddleB = ... # type: FbxCharacter.ENodeId
        eLeftFootMiddleC = ... # type: FbxCharacter.ENodeId
        eLeftFootMiddleD = ... # type: FbxCharacter.ENodeId
        eLeftInFootRing = ... # type: FbxCharacter.ENodeId
        eLeftFootRingA = ... # type: FbxCharacter.ENodeId
        eLeftFootRingB = ... # type: FbxCharacter.ENodeId
        eLeftFootRingC = ... # type: FbxCharacter.ENodeId
        eLeftFootRingD = ... # type: FbxCharacter.ENodeId
        eLeftInFootPinky = ... # type: FbxCharacter.ENodeId
        eLeftFootPinkyA = ... # type: FbxCharacter.ENodeId
        eLeftFootPinkyB = ... # type: FbxCharacter.ENodeId
        eLeftFootPinkyC = ... # type: FbxCharacter.ENodeId
        eLeftFootPinkyD = ... # type: FbxCharacter.ENodeId
        eLeftInFootExtraFinger = ... # type: FbxCharacter.ENodeId
        eLeftFootExtraFingerA = ... # type: FbxCharacter.ENodeId
        eLeftFootExtraFingerB = ... # type: FbxCharacter.ENodeId
        eLeftFootExtraFingerC = ... # type: FbxCharacter.ENodeId
        eLeftFootExtraFingerD = ... # type: FbxCharacter.ENodeId
        eRightInFootThumb = ... # type: FbxCharacter.ENodeId
        eRightFootThumbA = ... # type: FbxCharacter.ENodeId
        eRightFootThumbB = ... # type: FbxCharacter.ENodeId
        eRightFootThumbC = ... # type: FbxCharacter.ENodeId
        eRightFootThumbD = ... # type: FbxCharacter.ENodeId
        eRightInFootIndex = ... # type: FbxCharacter.ENodeId
        eRightFootIndexA = ... # type: FbxCharacter.ENodeId
        eRightFootIndexB = ... # type: FbxCharacter.ENodeId
        eRightFootIndexC = ... # type: FbxCharacter.ENodeId
        eRightFootIndexD = ... # type: FbxCharacter.ENodeId
        eRightInFootMiddle = ... # type: FbxCharacter.ENodeId
        eRightFootMiddleA = ... # type: FbxCharacter.ENodeId
        eRightFootMiddleB = ... # type: FbxCharacter.ENodeId
        eRightFootMiddleC = ... # type: FbxCharacter.ENodeId
        eRightFootMiddleD = ... # type: FbxCharacter.ENodeId
        eRightInFootRing = ... # type: FbxCharacter.ENodeId
        eRightFootRingA = ... # type: FbxCharacter.ENodeId
        eRightFootRingB = ... # type: FbxCharacter.ENodeId
        eRightFootRingC = ... # type: FbxCharacter.ENodeId
        eRightFootRingD = ... # type: FbxCharacter.ENodeId
        eRightInFootPinky = ... # type: FbxCharacter.ENodeId
        eRightFootPinkyA = ... # type: FbxCharacter.ENodeId
        eRightFootPinkyB = ... # type: FbxCharacter.ENodeId
        eRightFootPinkyC = ... # type: FbxCharacter.ENodeId
        eRightFootPinkyD = ... # type: FbxCharacter.ENodeId
        eRightInFootExtraFinger = ... # type: FbxCharacter.ENodeId
        eRightFootExtraFingerA = ... # type: FbxCharacter.ENodeId
        eRightFootExtraFingerB = ... # type: FbxCharacter.ENodeId
        eRightFootExtraFingerC = ... # type: FbxCharacter.ENodeId
        eRightFootExtraFingerD = ... # type: FbxCharacter.ENodeId
        eLeftCollarExtra = ... # type: FbxCharacter.ENodeId
        eRightCollarExtra = ... # type: FbxCharacter.ENodeId
        eNodeIdCount = ... # type: FbxCharacter.ENodeId

    class EGroupId(enum.Enum):
        eGroupBase = ... # type: FbxCharacter.EGroupId
        eGroupAuxiliary = ... # type: FbxCharacter.EGroupId
        eGroupSpine = ... # type: FbxCharacter.EGroupId
        eGroupRoll = ... # type: FbxCharacter.EGroupId
        eGroupSpecial = ... # type: FbxCharacter.EGroupId
        eGroupLeftHand = ... # type: FbxCharacter.EGroupId
        eGroupRightHand = ... # type: FbxCharacter.EGroupId
        eGroupProps = ... # type: FbxCharacter.EGroupId
        eGroupGameModeParent = ... # type: FbxCharacter.EGroupId
        eGroupNeck = ... # type: FbxCharacter.EGroupId
        eGroupLeftFoot = ... # type: FbxCharacter.EGroupId
        eGroupRightFoot = ... # type: FbxCharacter.EGroupId
        eGroupFloorContact = ... # type: FbxCharacter.EGroupId
        eGroupIdCount = ... # type: FbxCharacter.EGroupId

    class EInputType(enum.Enum):
        eInputActor = ... # type: FbxCharacter.EInputType
        eInputCharacter = ... # type: FbxCharacter.EInputType
        eInputMarkerSet = ... # type: FbxCharacter.EInputType
        eOutputMarkerSet = ... # type: FbxCharacter.EInputType
        eInputStancePose = ... # type: FbxCharacter.EInputType

    Active = ... # type: FbxPropertyBool1
    Actor = ... # type: FbxPropertyFbxReference
    AnkleDisplacementDamping = ... # type: FbxPropertyDouble1
    AnkleDisplacementDampingMode = ... # type: FbxPropertyFbxCharacterEAutoUser
    AnkleHeightCompensation = ... # type: FbxPropertyDouble1
    AnkleHeightCompensationMode = ... # type: FbxPropertyFbxCharacterEOffAutoUser
    AnkleProximityCompensation = ... # type: FbxPropertyDouble1
    AnkleProximityCompensationMode = ... # type: FbxPropertyFbxCharacterEOffAutoUser
    AnkleStabilizationAngularPerimeter = ... # type: FbxPropertyDouble1
    AnkleStabilizationAngularPerimeterMode = ... # type: FbxPropertyFbxCharacterEOffAutoUser
    AnkleStabilizationDamping = ... # type: FbxPropertyDouble1
    AnkleStabilizationDampingMode = ... # type: FbxPropertyFbxCharacterEOffAutoUser
    AnkleStabilizationFloorProximity = ... # type: FbxPropertyDouble1
    AnkleStabilizationFloorProximityMode = ... # type: FbxPropertyFbxCharacterEOffAutoUser
    AnkleStabilizationPerimeter = ... # type: FbxPropertyDouble1
    AnkleStabilizationPerimeterMode = ... # type: FbxPropertyFbxCharacterEAutoUser
    AnkleStabilizationRecoveryTime = ... # type: FbxPropertyDouble1
    AnkleStabilizationRecoveryTimeMode = ... # type: FbxPropertyFbxCharacterEOffAutoUser
    AnkleStabilizationTime = ... # type: FbxPropertyDouble1
    AnkleStabilizationTimeMode = ... # type: FbxPropertyFbxCharacterEAutoUser
    ApplyLimits = ... # type: FbxPropertyBool1
    Character = ... # type: FbxPropertyFbxReference
    Characterize = ... # type: FbxPropertyBool1
    ChestReduction = ... # type: FbxPropertyDouble1
    ChestTOffset = ... # type: FbxPropertyDouble3
    ClassId = ... # type: FbxClassId
    CollarReduction = ... # type: FbxPropertyDouble1
    CollarStiffnessX = ... # type: FbxPropertyDouble1
    CollarStiffnessY = ... # type: FbxPropertyDouble1
    CollarStiffnessZ = ... # type: FbxPropertyDouble1
    ContactBehaviour = ... # type: FbxPropertyFbxCharacterEContactBehaviour
    ControlSet = ... # type: FbxPropertyFbxReference
    CtrlChestPullLeftHand = ... # type: FbxPropertyDouble1
    CtrlChestPullRightHand = ... # type: FbxPropertyDouble1
    CtrlEnforceGravity = ... # type: FbxPropertyDouble1
    CtrlNeckStiffness = ... # type: FbxPropertyDouble1
    CtrlPullHead = ... # type: FbxPropertyDouble1
    CtrlPullLeftElbow = ... # type: FbxPropertyDouble1
    CtrlPullLeftFingerBase = ... # type: FbxPropertyDouble1
    CtrlPullLeftFoot = ... # type: FbxPropertyDouble1
    CtrlPullLeftHand = ... # type: FbxPropertyDouble1
    CtrlPullLeftKnee = ... # type: FbxPropertyDouble1
    CtrlPullLeftToeBase = ... # type: FbxPropertyDouble1
    CtrlPullRightElbow = ... # type: FbxPropertyDouble1
    CtrlPullRightFingerBase = ... # type: FbxPropertyDouble1
    CtrlPullRightFoot = ... # type: FbxPropertyDouble1
    CtrlPullRightHand = ... # type: FbxPropertyDouble1
    CtrlPullRightKnee = ... # type: FbxPropertyDouble1
    CtrlPullRightToeBase = ... # type: FbxPropertyDouble1
    CtrlResistChestOrientation = ... # type: FbxPropertyDouble1
    CtrlResistChestPosition = ... # type: FbxPropertyDouble1
    CtrlResistCompressionFactorLeftElbow = ... # type: FbxPropertyDouble1
    CtrlResistCompressionFactorLeftKnee = ... # type: FbxPropertyDouble1
    CtrlResistCompressionFactorRightElbow = ... # type: FbxPropertyDouble1
    CtrlResistCompressionFactorRightKnee = ... # type: FbxPropertyDouble1
    CtrlResistHipsOrientation = ... # type: FbxPropertyDouble1
    CtrlResistHipsPosition = ... # type: FbxPropertyDouble1
    CtrlResistLeftCollar = ... # type: FbxPropertyDouble1
    CtrlResistLeftElbow = ... # type: FbxPropertyDouble1
    CtrlResistLeftKnee = ... # type: FbxPropertyDouble1
    CtrlResistMaximumExtensionLeftElbow = ... # type: FbxPropertyDouble1
    CtrlResistMaximumExtensionLeftKnee = ... # type: FbxPropertyDouble1
    CtrlResistMaximumExtensionRightElbow = ... # type: FbxPropertyDouble1
    CtrlResistMaximumExtensionRightKnee = ... # type: FbxPropertyDouble1
    CtrlResistRightCollar = ... # type: FbxPropertyDouble1
    CtrlResistRightElbow = ... # type: FbxPropertyDouble1
    CtrlResistRightKnee = ... # type: FbxPropertyDouble1
    CtrlSpineStiffness = ... # type: FbxPropertyDouble1
    Damping = ... # type: FbxPropertyDouble1
    DestinationObject = ... # type: FbxPropertyFbxReference
    DisplacementDamping = ... # type: FbxPropertyDouble1
    DisplacementDampingMode = ... # type: FbxPropertyFbxCharacterEOffAutoUser
    DisplacementMemory = ... # type: FbxPropertyDouble1
    DisplacementMemoryMode = ... # type: FbxPropertyFbxCharacterEAutoUser
    ExtraCollarRatio = ... # type: FbxPropertyDouble1
    FingerSolving = ... # type: FbxPropertyBool1
    FootAutomaticToes = ... # type: FbxPropertyBool1
    FootBackToAnkle = ... # type: FbxPropertyDouble1
    FootBottomToAnkle = ... # type: FbxPropertyDouble1
    FootContactSize = ... # type: FbxPropertyDouble1
    FootContactStiffness = ... # type: FbxPropertyDouble1
    FootContactType = ... # type: FbxPropertyFbxCharacterEFootContactType
    FootFingerContact = ... # type: FbxPropertyBool1
    FootFingerContactMode = ... # type: FbxPropertyFbxCharacterEFingerContactMode
    FootFingerContactRollStiffness = ... # type: FbxPropertyDouble1
    FootFloorContact = ... # type: FbxPropertyBool1
    FootFloorPivot = ... # type: FbxPropertyFbxCharacterEFloorPivot
    FootFrontToMiddle = ... # type: FbxPropertyDouble1
    FootInToAnkle = ... # type: FbxPropertyDouble1
    FootMiddleToAnkle = ... # type: FbxPropertyDouble1
    FootOutToAnkle = ... # type: FbxPropertyDouble1
    ForceActorSpace = ... # type: FbxPropertyBool1
    HandAutomaticFingers = ... # type: FbxPropertyBool1
    HandBackToWrist = ... # type: FbxPropertyDouble1
    HandBottomToWrist = ... # type: FbxPropertyDouble1
    HandContactSize = ... # type: FbxPropertyDouble1
    HandContactStiffness = ... # type: FbxPropertyDouble1
    HandContactType = ... # type: FbxPropertyFbxCharacterEHandContactType
    HandFingerContact = ... # type: FbxPropertyBool1
    HandFingerContactMode = ... # type: FbxPropertyFbxCharacterEFingerContactMode
    HandFingerContactRollStiffness = ... # type: FbxPropertyDouble1
    HandFloorContact = ... # type: FbxPropertyBool1
    HandFloorPivot = ... # type: FbxPropertyFbxCharacterEFloorPivot
    HandFrontToMiddle = ... # type: FbxPropertyDouble1
    HandInToWrist = ... # type: FbxPropertyDouble1
    HandMiddleToWrist = ... # type: FbxPropertyDouble1
    HandOutToWrist = ... # type: FbxPropertyDouble1
    HeadReduction = ... # type: FbxPropertyDouble1
    HikVersion = ... # type: FbxPropertyDouble1
    HipsDisplacementDamping = ... # type: FbxPropertyDouble1
    HipsDisplacementDampingMode = ... # type: FbxPropertyFbxCharacterEAutoUser
    HipsHeightCompensation = ... # type: FbxPropertyDouble1
    HipsHeightCompensationMode = ... # type: FbxPropertyFbxCharacterEOffAutoUser
    HipsTOffset = ... # type: FbxPropertyDouble3
    HipsTranslationMode = ... # type: FbxPropertyFbxCharacterEHipsTranslationMode
    LeftArmMaxExtensionAngle = ... # type: FbxPropertyDouble1
    LeftArmRoll = ... # type: FbxPropertyDouble1
    LeftArmRollEx = ... # type: FbxPropertyDouble1
    LeftArmRollExMode = ... # type: FbxPropertyBool1
    LeftArmRollMode = ... # type: FbxPropertyBool1
    LeftElbowKillPitch = ... # type: FbxPropertyBool1
    LeftFootExtraFingerTip = ... # type: FbxPropertyDouble1
    LeftFootIndexTip = ... # type: FbxPropertyDouble1
    LeftFootMiddleTip = ... # type: FbxPropertyDouble1
    LeftFootPinkyTip = ... # type: FbxPropertyDouble1
    LeftFootRingTip = ... # type: FbxPropertyDouble1
    LeftFootThumbTip = ... # type: FbxPropertyDouble1
    LeftForeArmRoll = ... # type: FbxPropertyDouble1
    LeftForeArmRollEx = ... # type: FbxPropertyDouble1
    LeftForeArmRollExMode = ... # type: FbxPropertyBool1
    LeftForeArmRollMode = ... # type: FbxPropertyBool1
    LeftHandExtraFingerTip = ... # type: FbxPropertyDouble1
    LeftHandIndexTip = ... # type: FbxPropertyDouble1
    LeftHandMiddleTip = ... # type: FbxPropertyDouble1
    LeftHandPinkyTip = ... # type: FbxPropertyDouble1
    LeftHandRingTip = ... # type: FbxPropertyDouble1
    LeftHandThumbTip = ... # type: FbxPropertyDouble1
    LeftKneeKillPitch = ... # type: FbxPropertyBool1
    LeftLegMaxExtensionAngle = ... # type: FbxPropertyDouble1
    LeftLegRoll = ... # type: FbxPropertyDouble1
    LeftLegRollEx = ... # type: FbxPropertyDouble1
    LeftLegRollExMode = ... # type: FbxPropertyBool1
    LeftLegRollMode = ... # type: FbxPropertyBool1
    LeftUpLegRoll = ... # type: FbxPropertyDouble1
    LeftUpLegRollEx = ... # type: FbxPropertyDouble1
    LeftUpLegRollExMode = ... # type: FbxPropertyBool1
    LeftUpLegRollMode = ... # type: FbxPropertyBool1
    Lock = ... # type: FbxPropertyBool1
    LockPick = ... # type: FbxPropertyBool1
    LockXForm = ... # type: FbxPropertyBool1
    MassCenterCompensation = ... # type: FbxPropertyDouble1
    MirrorMode = ... # type: FbxPropertyBool1
    NeckReduction = ... # type: FbxPropertyDouble1
    OrientationDamping = ... # type: FbxPropertyDouble1
    OrientationDampingMode = ... # type: FbxPropertyFbxCharacterEOffAutoUser
    Posture = ... # type: FbxPropertyFbxCharacterEPostureMode
    PullIterationCount = ... # type: FbxPropertyInteger1
    ReachActorChest = ... # type: FbxPropertyDouble1
    ReachActorChestRotation = ... # type: FbxPropertyDouble1
    ReachActorHead = ... # type: FbxPropertyDouble1
    ReachActorHeadRotation = ... # type: FbxPropertyDouble1
    ReachActorLeftAnkle = ... # type: FbxPropertyDouble1
    ReachActorLeftAnkleRotation = ... # type: FbxPropertyDouble1
    ReachActorLeftElbow = ... # type: FbxPropertyDouble1
    ReachActorLeftFingerBase = ... # type: FbxPropertyDouble1
    ReachActorLeftFingerBaseRotation = ... # type: FbxPropertyDouble1
    ReachActorLeftKnee = ... # type: FbxPropertyDouble1
    ReachActorLeftToesBase = ... # type: FbxPropertyDouble1
    ReachActorLeftToesBaseRotation = ... # type: FbxPropertyDouble1
    ReachActorLeftWrist = ... # type: FbxPropertyDouble1
    ReachActorLeftWristRotation = ... # type: FbxPropertyDouble1
    ReachActorLowerChestRotation = ... # type: FbxPropertyDouble1
    ReachActorRightAnkle = ... # type: FbxPropertyDouble1
    ReachActorRightAnkleRotation = ... # type: FbxPropertyDouble1
    ReachActorRightElbow = ... # type: FbxPropertyDouble1
    ReachActorRightFingerBase = ... # type: FbxPropertyDouble1
    ReachActorRightFingerBaseRotation = ... # type: FbxPropertyDouble1
    ReachActorRightKnee = ... # type: FbxPropertyDouble1
    ReachActorRightToesBase = ... # type: FbxPropertyDouble1
    ReachActorRightToesBaseRotation = ... # type: FbxPropertyDouble1
    ReachActorRightWrist = ... # type: FbxPropertyDouble1
    ReachActorRightWristRotation = ... # type: FbxPropertyDouble1
    RealisticShoulder = ... # type: FbxPropertyDouble1
    RightArmMaxExtensionAngle = ... # type: FbxPropertyDouble1
    RightArmRoll = ... # type: FbxPropertyDouble1
    RightArmRollEx = ... # type: FbxPropertyDouble1
    RightArmRollExMode = ... # type: FbxPropertyBool1
    RightArmRollMode = ... # type: FbxPropertyBool1
    RightElbowKillPitch = ... # type: FbxPropertyBool1
    RightFootExtraFingerTip = ... # type: FbxPropertyDouble1
    RightFootIndexTip = ... # type: FbxPropertyDouble1
    RightFootMiddleTip = ... # type: FbxPropertyDouble1
    RightFootPinkyTip = ... # type: FbxPropertyDouble1
    RightFootRingTip = ... # type: FbxPropertyDouble1
    RightFootThumbTip = ... # type: FbxPropertyDouble1
    RightForeArmExRoll = ... # type: FbxPropertyDouble1
    RightForeArmRoll = ... # type: FbxPropertyDouble1
    RightForeArmRollExMode = ... # type: FbxPropertyBool1
    RightForeArmRollMode = ... # type: FbxPropertyBool1
    RightHandExtraFingerTip = ... # type: FbxPropertyDouble1
    RightHandIndexTip = ... # type: FbxPropertyDouble1
    RightHandMiddleTip = ... # type: FbxPropertyDouble1
    RightHandPinkyTip = ... # type: FbxPropertyDouble1
    RightHandRingTip = ... # type: FbxPropertyDouble1
    RightHandThumbTip = ... # type: FbxPropertyDouble1
    RightKneeKillPitch = ... # type: FbxPropertyBool1
    RightLegMaxExtensionAngle = ... # type: FbxPropertyDouble1
    RightLegRoll = ... # type: FbxPropertyDouble1
    RightLegRollEx = ... # type: FbxPropertyDouble1
    RightLegRollExMode = ... # type: FbxPropertyBool1
    RightLegRollMode = ... # type: FbxPropertyBool1
    RightUpLegRoll = ... # type: FbxPropertyDouble1
    RightUpLegRollEx = ... # type: FbxPropertyDouble1
    RightUpLegRollExMode = ... # type: FbxPropertyBool1
    RightUpLegRollMode = ... # type: FbxPropertyBool1
    RollExtractionMode = ... # type: FbxPropertyFbxCharacterERollExtractionMode
    ScaleCompensation = ... # type: FbxPropertyDouble1
    ScaleCompensationMode = ... # type: FbxPropertyFbxCharacterEOffAutoUser
    ShoulderCorrection = ... # type: FbxPropertyDouble1
    SnSNeckFreedom = ... # type: FbxPropertyDouble1
    SnSReachChestEnd = ... # type: FbxPropertyDouble1
    SnSReachHead = ... # type: FbxPropertyDouble1
    SnSReachLeftAnkle = ... # type: FbxPropertyDouble1
    SnSReachLeftWrist = ... # type: FbxPropertyDouble1
    SnSReachRightAnkle = ... # type: FbxPropertyDouble1
    SnSReachRightWrist = ... # type: FbxPropertyDouble1
    SnSScaleArmsAndLegs = ... # type: FbxPropertyDouble1
    SnSScaleNeck = ... # type: FbxPropertyDouble1
    SnSScaleSpine = ... # type: FbxPropertyDouble1
    SnSScaleSpineChildren = ... # type: FbxPropertyDouble1
    SnSSpineFreedom = ... # type: FbxPropertyDouble1
    SourceObject = ... # type: FbxPropertyFbxReference
    Stabilization = ... # type: FbxPropertyDouble1
    StretchStartArmsAndLegs = ... # type: FbxPropertyDouble1
    StretchStopArmsAndLegs = ... # type: FbxPropertyDouble1
    SyncMode = ... # type: FbxPropertyBool1
    Weight = ... # type: FbxPropertyDouble1
    WristDisplacementDamping = ... # type: FbxPropertyDouble1
    WristDisplacementDampingMode = ... # type: FbxPropertyFbxCharacterEAutoUser
    WriteReference = ... # type: FbxPropertyBool1

    def __ne__(self, other: object): ...
    @staticmethod
    def GetCharacterNodeIdFromNodeName(pName: str) -> typing.Tuple[bool, 'FbxCharacter.ENodeId']: ...
    @staticmethod
    def GetCharacterNodeNameFromNodeId(pCharacterNodeId: 'FbxCharacter.ENodeId') -> typing.Tuple[bool, bytes]: ...
    @staticmethod
    def GetCharacterGroupVersionByElement(pCharacterNodeId: 'FbxCharacter.ENodeId') -> typing.Tuple[bool, int]: ...
    @staticmethod
    def GetCharacterGroupIndexByElement(pCharacterNodeId: 'FbxCharacter.ENodeId') -> typing.Tuple[bool, 'FbxCharacter.EGroupId', int]: ...
    @staticmethod
    def FindCharacterGroupIndexByName(pName: str, pForceGroupId: bool) -> typing.Tuple[bool, 'FbxCharacter.EGroupId', int]: ...
    @staticmethod
    def GetCharacterGroupVersionByIndex(pCharacterGroupId: 'FbxCharacter.EGroupId', pIndex: int) -> int: ...
    @staticmethod
    def GetCharacterGroupNameByIndex(pCharacterGroupId: 'FbxCharacter.EGroupId', pIndex: int) -> str: ...
    @staticmethod
    def GetCharacterGroupElementByIndex(pCharacterGroupId: 'FbxCharacter.EGroupId', pIndex: int) -> 'FbxCharacter.ENodeId': ...
    @staticmethod
    def GetCharacterGroupCount(pCharacterGroupId: 'FbxCharacter.EGroupId') -> int: ...
    def GetControlSet(self) -> FbxControlSet: ...
    def GetCharacterLink(self, pCharacterNodeId: 'FbxCharacter.ENodeId', pCharacterLink: typing.Optional[FbxCharacterLink] = ...) -> bool: ...
    def SetCharacterLink(self, pCharacterNodeId: 'FbxCharacter.ENodeId', pCharacterLink: FbxCharacterLink, pUpdateObjectList: bool = ...) -> bool: ...
    def GetInputObject(self) -> FbxObject: ...
    def GetInputType(self) -> 'FbxCharacter.EInputType': ...
    def SetInput(self, pInputType: 'FbxCharacter.EInputType', pInputObject: typing.Optional[FbxObject] = ...) -> None: ...
    def Reset(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxCharacter': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxCharacter': ...


class FbxConstraintAim(FbxConstraint):

    class EWorldUp(enum.Enum):
        eAimAtSceneUp = ... # type: FbxConstraintAim.EWorldUp
        eAimAtObjectUp = ... # type: FbxConstraintAim.EWorldUp
        eAimAtObjectRotationUp = ... # type: FbxConstraintAim.EWorldUp
        eAimAtVector = ... # type: FbxConstraintAim.EWorldUp
        eAimAtNone = ... # type: FbxConstraintAim.EWorldUp
        eAimAtCount = ... # type: FbxConstraintAim.EWorldUp

    Active = ... # type: FbxPropertyBool1
    AffectX = ... # type: FbxPropertyBool1
    AffectY = ... # type: FbxPropertyBool1
    AffectZ = ... # type: FbxPropertyBool1
    AimAtObjects = ... # type: FbxPropertyFbxReference
    AimVector = ... # type: FbxPropertyDouble3
    ClassId = ... # type: FbxClassId
    ConstrainedObject = ... # type: FbxPropertyFbxReference
    Lock = ... # type: FbxPropertyBool1
    RotationOffset = ... # type: FbxPropertyDouble3
    UpVector = ... # type: FbxPropertyDouble3
    Weight = ... # type: FbxPropertyDouble1
    WorldUpObject = ... # type: FbxPropertyFbxReference
    WorldUpType = ... # type: FbxPropertyEnum
    WorldUpVector = ... # type: FbxPropertyDouble3

    def __ne__(self, other: object): ...
    def GetWorldUpObject(self) -> FbxObject: ...
    def SetWorldUpObject(self, pObject: FbxObject) -> None: ...
    def GetConstrainedObject(self) -> FbxObject: ...
    def SetConstrainedObject(self, pObject: FbxObject) -> None: ...
    def GetConstraintSource(self, pIndex: int) -> FbxObject: ...
    def GetConstraintSourceCount(self) -> int: ...
    def AddConstraintSource(self, pObject: FbxObject, pWeight: float = ...) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxConstraintAim': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxConstraintAim': ...


class FbxConstraintParent(FbxConstraint):

    Active = ... # type: FbxPropertyBool1
    AffectRotationX = ... # type: FbxPropertyBool1
    AffectRotationY = ... # type: FbxPropertyBool1
    AffectRotationZ = ... # type: FbxPropertyBool1
    AffectScalingX = ... # type: FbxPropertyBool1
    AffectScalingY = ... # type: FbxPropertyBool1
    AffectScalingZ = ... # type: FbxPropertyBool1
    AffectTranslationX = ... # type: FbxPropertyBool1
    AffectTranslationY = ... # type: FbxPropertyBool1
    AffectTranslationZ = ... # type: FbxPropertyBool1
    ClassId = ... # type: FbxClassId
    ConstrainedObject = ... # type: FbxPropertyFbxReference
    ConstraintSources = ... # type: FbxPropertyFbxReference
    Lock = ... # type: FbxPropertyBool1
    Weight = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def GetConstrainedObject(self) -> FbxObject: ...
    def SetConstrainedObject(self, pObject: FbxObject) -> None: ...
    def GetConstraintSource(self, pIndex: int) -> FbxObject: ...
    def GetConstraintSourceCount(self) -> int: ...
    def AddConstraintSource(self, pObject: FbxObject, pWeight: float = ...) -> None: ...
    def GetRotationOffset(self, pObject: FbxObject) -> FbxVector4: ...
    def SetRotationOffset(self, pObject: FbxObject, pRotation: FbxVector4) -> None: ...
    def GetTranslationOffset(self, pObject: FbxObject) -> FbxVector4: ...
    def SetTranslationOffset(self, pObject: FbxObject, pTranslation: FbxVector4) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxConstraintParent': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxConstraintParent': ...


class FbxConstraintPosition(FbxConstraint):

    Active = ... # type: FbxPropertyBool1
    AffectX = ... # type: FbxPropertyBool1
    AffectY = ... # type: FbxPropertyBool1
    AffectZ = ... # type: FbxPropertyBool1
    ClassId = ... # type: FbxClassId
    ConstrainedObject = ... # type: FbxPropertyFbxReference
    ConstraintSources = ... # type: FbxPropertyFbxReference
    Lock = ... # type: FbxPropertyBool1
    Translation = ... # type: FbxPropertyDouble3
    Weight = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def GetConstrainedObject(self) -> FbxObject: ...
    def SetConstrainedObject(self, pObject: FbxObject) -> None: ...
    def GetConstraintSource(self, pIndex: int) -> FbxObject: ...
    def GetConstraintSourceCount(self) -> int: ...
    def RemoveConstraintSource(self, pObject: FbxObject) -> bool: ...
    def AddConstraintSource(self, pObject: FbxObject, pWeight: float = ...) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxConstraintPosition': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxConstraintPosition': ...


class FbxConstraintRotation(FbxConstraint):

    Active = ... # type: FbxPropertyBool1
    AffectX = ... # type: FbxPropertyBool1
    AffectY = ... # type: FbxPropertyBool1
    AffectZ = ... # type: FbxPropertyBool1
    ClassId = ... # type: FbxClassId
    ConstrainedObject = ... # type: FbxPropertyFbxReference
    ConstraintSources = ... # type: FbxPropertyFbxReference
    Lock = ... # type: FbxPropertyBool1
    Rotation = ... # type: FbxPropertyDouble3
    Weight = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def GetConstrainedObject(self) -> FbxObject: ...
    def SetConstrainedObject(self, pObject: FbxObject) -> None: ...
    def GetConstraintSource(self, pIndex: int) -> FbxObject: ...
    def GetConstraintSourceCount(self) -> int: ...
    def AddConstraintSource(self, pObject: FbxObject, pWeight: float = ...) -> None: ...
    def GetSourceWeight(self, pObject: FbxObject) -> float: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxConstraintRotation': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxConstraintRotation': ...


class FbxConstraintScale(FbxConstraint):

    Active = ... # type: FbxPropertyBool1
    AffectX = ... # type: FbxPropertyBool1
    AffectY = ... # type: FbxPropertyBool1
    AffectZ = ... # type: FbxPropertyBool1
    ClassId = ... # type: FbxClassId
    ConstrainedObject = ... # type: FbxPropertyFbxReference
    ConstraintSources = ... # type: FbxPropertyFbxReference
    Lock = ... # type: FbxPropertyBool1
    Scaling = ... # type: FbxPropertyDouble3
    Weight = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def GetConstrainedObject(self) -> FbxObject: ...
    def SetConstrainedObject(self, pObject: FbxObject) -> None: ...
    def GetConstraintSource(self, pIndex: int) -> FbxObject: ...
    def GetConstraintSourceCount(self) -> int: ...
    def AddConstraintSource(self, pObject: FbxObject, pWeight: float = ...) -> None: ...
    def GetSourceWeight(self, pObject: FbxObject) -> float: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxConstraintScale': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxConstraintScale': ...


class FbxConstraintSingleChainIK(FbxConstraint):

    class EEvaluationMode(enum.Enum):
        eNeverTS = ... # type: FbxConstraintSingleChainIK.EEvaluationMode
        eAutoDetect = ... # type: FbxConstraintSingleChainIK.EEvaluationMode
        eAlwaysTS = ... # type: FbxConstraintSingleChainIK.EEvaluationMode

    class EPoleVectorMode(enum.Enum):
        eVector = ... # type: FbxConstraintSingleChainIK.EPoleVectorMode
        eObject = ... # type: FbxConstraintSingleChainIK.EPoleVectorMode

    class ESolverMode(enum.Enum):
        eRotatePlane = ... # type: FbxConstraintSingleChainIK.ESolverMode
        eSingleChain = ... # type: FbxConstraintSingleChainIK.ESolverMode

    Active = ... # type: FbxPropertyBool1
    ClassId = ... # type: FbxClassId
    EffectorObject = ... # type: FbxPropertyFbxReference
    EndJointObject = ... # type: FbxPropertyFbxReference
    EvaluateTSAnim = ... # type: FbxPropertyEnum
    FirstJointObject = ... # type: FbxPropertyFbxReference
    Lock = ... # type: FbxPropertyBool1
    PoleVector = ... # type: FbxPropertyDouble3
    PoleVectorObjects = ... # type: FbxPropertyFbxReference
    PoleVectorType = ... # type: FbxPropertyEnum
    SolverType = ... # type: FbxPropertyEnum
    Twist = ... # type: FbxPropertyDouble1
    Weight = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def GetEffectorObject(self) -> FbxObject: ...
    def SetEffectorObject(self, pObject: FbxObject) -> None: ...
    def GetEndJointObject(self) -> FbxObject: ...
    def SetEndJointObject(self, pObject: FbxObject) -> None: ...
    def GetFirstJointObject(self) -> FbxObject: ...
    def SetFirstJointObject(self, pObject: FbxObject) -> None: ...
    def GetPoleVectorObject(self, pIndex: int) -> FbxObject: ...
    def GetConstraintPoleVectorCount(self) -> int: ...
    def AddPoleVectorObject(self, pObject: FbxObject, pWeight: float = ...) -> None: ...
    def GetPoleVectorObjectWeight(self, pObject: FbxObject) -> float: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxConstraintSingleChainIK': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxConstraintSingleChainIK': ...


class FbxDeformer(FbxObject):

    class EDeformerType(enum.Enum):
        eUnknown = ... # type: FbxDeformer.EDeformerType
        eSkin = ... # type: FbxDeformer.EDeformerType
        eBlendShape = ... # type: FbxDeformer.EDeformerType
        eVertexCache = ... # type: FbxDeformer.EDeformerType

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def GetDeformerType(self) -> 'FbxDeformer.EDeformerType': ...
    def GetMultiLayer(self) -> bool: ...
    def SetMultiLayer(self, pMultiLayer: bool) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxDeformer': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxDeformer': ...


class FbxVertexCacheDeformer(FbxDeformer):

    class ECacheChannelType(enum.Enum):
        ePositions = ... # type: FbxVertexCacheDeformer.ECacheChannelType
        eNormals = ... # type: FbxVertexCacheDeformer.ECacheChannelType
        eUVs = ... # type: FbxVertexCacheDeformer.ECacheChannelType
        eTangents = ... # type: FbxVertexCacheDeformer.ECacheChannelType
        eBinormals = ... # type: FbxVertexCacheDeformer.ECacheChannelType
        eUserDefined = ... # type: FbxVertexCacheDeformer.ECacheChannelType

    Active = ... # type: FbxPropertyBool1
    CacheSet = ... # type: FbxPropertyString
    Channel = ... # type: FbxPropertyString
    ClassId = ... # type: FbxClassId
    Type = ... # type: FbxPropertyFbxVertexCacheDeformerType

    def __ne__(self, other: object): ...
    def GetDeformerType(self) -> FbxDeformer.EDeformerType: ...
    def GetCache(self) -> FbxCache: ...
    def SetCache(self, pCache: FbxCache) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxVertexCacheDeformer': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxVertexCacheDeformer': ...


class FbxSkin(FbxDeformer):

    class EType(enum.Enum):
        eRigid = ... # type: FbxSkin.EType
        eLinear = ... # type: FbxSkin.EType
        eDualQuaternion = ... # type: FbxSkin.EType
        eBlend = ... # type: FbxSkin.EType

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def SetControlPointIWCount(self, pCount: int) -> None: ...
    def GetControlPointBlendWeights(self) -> typing.List: ...
    def GetControlPointIndices(self) -> typing.List: ...
    def GetControlPointIndicesCount(self) -> int: ...
    def AddControlPointIndex(self, pIndex: int, pBlendWeight: float = ...) -> None: ...
    def GetSkinningType(self) -> 'FbxSkin.EType': ...
    def SetSkinningType(self, pType: 'FbxSkin.EType') -> None: ...
    def GetDeformerType(self) -> FbxDeformer.EDeformerType: ...
    def GetCluster(self, pIndex: int) -> 'FbxCluster': ...
    def GetClusterCount(self) -> int: ...
    def RemoveCluster(self, pCluster: 'FbxCluster') -> 'FbxCluster': ...
    def AddCluster(self, pCluster: 'FbxCluster') -> bool: ...
    def GetGeometry(self) -> 'FbxGeometry': ...
    def SetGeometry(self, pGeometry: 'FbxGeometry') -> bool: ...
    def GetDeformAccuracy(self) -> float: ...
    def SetDeformAccuracy(self, pDeformAccuracy: float) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxSkin': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxSkin': ...


class FbxBlendShape(FbxDeformer):

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def Reset(self) -> None: ...
    def GetDeformerType(self) -> FbxDeformer.EDeformerType: ...
    def GetBlendShapeChannel(self, pIndex: int) -> 'FbxBlendShapeChannel': ...
    def GetBlendShapeChannelCount(self) -> int: ...
    def RemoveBlendShapeChannel(self, pBlendShapeChannel: 'FbxBlendShapeChannel') -> 'FbxBlendShapeChannel': ...
    def AddBlendShapeChannel(self, pBlendShapeChannel: 'FbxBlendShapeChannel') -> bool: ...
    def GetGeometry(self) -> 'FbxGeometry': ...
    def SetGeometry(self, pGeometry: 'FbxGeometry') -> bool: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxBlendShape': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxBlendShape': ...


class FbxSubDeformer(FbxObject):

    class EType(enum.Enum):
        eUnknown = ... # type: FbxSubDeformer.EType
        eCluster = ... # type: FbxSubDeformer.EType
        eBlendShapeChannel = ... # type: FbxSubDeformer.EType

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def GetSubDeformerType(self) -> 'FbxSubDeformer.EType': ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxSubDeformer': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxSubDeformer': ...


class FbxCluster(FbxSubDeformer):

    class ELinkMode(enum.Enum):
        eNormalize = ... # type: FbxCluster.ELinkMode
        eAdditive = ... # type: FbxCluster.ELinkMode
        eTotalOne = ... # type: FbxCluster.ELinkMode

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def IsTransformParentSet(self) -> bool: ...
    def GetTransformParentMatrix(self, pMatrix: FbxAMatrix) -> FbxAMatrix: ...
    def SetTransformParentMatrix(self, pMatrix: FbxAMatrix) -> None: ...
    def GetTransformAssociateModelMatrix(self, pMatrix: FbxAMatrix) -> FbxAMatrix: ...
    def SetTransformAssociateModelMatrix(self, pMatrix: FbxAMatrix) -> None: ...
    def GetTransformLinkMatrix(self, pMatrix: FbxAMatrix) -> FbxAMatrix: ...
    def SetTransformLinkMatrix(self, pMatrix: FbxAMatrix) -> None: ...
    def GetTransformMatrix(self, pMatrix: FbxAMatrix) -> FbxAMatrix: ...
    def SetTransformMatrix(self, pMatrix: FbxAMatrix) -> None: ...
    def SetControlPointIWCount(self, pCount: int) -> None: ...
    def GetControlPointWeights(self) -> typing.List: ...
    def GetControlPointIndices(self) -> typing.List: ...
    def GetControlPointIndicesCount(self) -> int: ...
    def AddControlPointIndex(self, pIndex: int, pWeight: float) -> None: ...
    def GetAssociateModel(self) -> FbxNode: ...
    def SetAssociateModel(self, pNode: FbxNode) -> None: ...
    def GetLink(self) -> FbxNode: ...
    def SetLink(self, pNode: FbxNode) -> None: ...
    def GetLinkMode(self) -> 'FbxCluster.ELinkMode': ...
    def SetLinkMode(self, pMode: 'FbxCluster.ELinkMode') -> None: ...
    def Reset(self) -> None: ...
    def GetSubDeformerType(self) -> FbxSubDeformer.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxCluster': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxCluster': ...


class FbxBlendShapeChannel(FbxSubDeformer):

    ClassId = ... # type: FbxClassId
    DeformPercent = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def Reset(self) -> None: ...
    def GetSubDeformerType(self) -> FbxSubDeformer.EType: ...
    def SetFullWeightsCount(self, pCount: int) -> None: ...
    def GetTargetShapeFullWeights(self) -> typing.List: ...
    def GetTargetShapeIndex(self, pShape: 'FbxShape') -> int: ...
    def GetTargetShape(self, pIndex: int) -> 'FbxShape': ...
    def GetTargetShapeCount(self) -> int: ...
    def RemoveTargetShape(self, pShape: 'FbxShape') -> 'FbxShape': ...
    def AddTargetShape(self, pShape: 'FbxShape', pFullDeformPercent: float = ...) -> bool: ...
    def GetBlendShapeDeformer(self) -> FbxBlendShape: ...
    def SetBlendShapeDeformer(self, pBlendShape: FbxBlendShape) -> bool: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxBlendShapeChannel': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxBlendShapeChannel': ...


class FbxTexture(FbxObject):

    class ETextureUse(enum.Enum):
        eStandard = ... # type: FbxTexture.ETextureUse
        eShadowMap = ... # type: FbxTexture.ETextureUse
        eLightMap = ... # type: FbxTexture.ETextureUse
        eSphericalReflectionMap = ... # type: FbxTexture.ETextureUse
        eSphereReflectionMap = ... # type: FbxTexture.ETextureUse
        eBumpNormalMap = ... # type: FbxTexture.ETextureUse

    class EPlanarMappingNormal(enum.Enum):
        ePlanarNormalX = ... # type: FbxTexture.EPlanarMappingNormal
        ePlanarNormalY = ... # type: FbxTexture.EPlanarMappingNormal
        ePlanarNormalZ = ... # type: FbxTexture.EPlanarMappingNormal

    class EMappingType(enum.Enum):
        eNull = ... # type: FbxTexture.EMappingType
        ePlanar = ... # type: FbxTexture.EMappingType
        eSpherical = ... # type: FbxTexture.EMappingType
        eCylindrical = ... # type: FbxTexture.EMappingType
        eBox = ... # type: FbxTexture.EMappingType
        eFace = ... # type: FbxTexture.EMappingType
        eUV = ... # type: FbxTexture.EMappingType
        eEnvironment = ... # type: FbxTexture.EMappingType

    class EAlphaSource(enum.Enum):
        eNone = ... # type: FbxTexture.EAlphaSource
        eRGBIntensity = ... # type: FbxTexture.EAlphaSource
        eBlack = ... # type: FbxTexture.EAlphaSource

    class ECoordinates(enum.Enum):
        eU = ... # type: FbxTexture.ECoordinates
        eV = ... # type: FbxTexture.ECoordinates
        eW = ... # type: FbxTexture.ECoordinates

    class EAlignMode(enum.Enum):
        eLeft = ... # type: FbxTexture.EAlignMode
        eRight = ... # type: FbxTexture.EAlignMode
        eTop = ... # type: FbxTexture.EAlignMode
        eBottom = ... # type: FbxTexture.EAlignMode

    class EBlendMode(enum.Enum):
        eTranslucent = ... # type: FbxTexture.EBlendMode
        eAdditive = ... # type: FbxTexture.EBlendMode
        eModulate = ... # type: FbxTexture.EBlendMode
        eModulate2 = ... # type: FbxTexture.EBlendMode
        eOver = ... # type: FbxTexture.EBlendMode

    class EWrapMode(enum.Enum):
        eRepeat = ... # type: FbxTexture.EWrapMode
        eClamp = ... # type: FbxTexture.EWrapMode

    class ETextureUse6(enum.Enum):
        eTEXTURE_USE_6_STANDARD = ... # type: FbxTexture.ETextureUse6
        eTEXTURE_USE_6_SPHERICAL_REFLEXION_MAP = ... # type: FbxTexture.ETextureUse6
        eTEXTURE_USE_6_SPHERE_REFLEXION_MAP = ... # type: FbxTexture.ETextureUse6
        eTEXTURE_USE_6_SHADOW_MAP = ... # type: FbxTexture.ETextureUse6
        eTEXTURE_USE_6_LIGHT_MAP = ... # type: FbxTexture.ETextureUse6
        eTEXTURE_USE_6_BUMP_NORMAL_MAP = ... # type: FbxTexture.ETextureUse6

    class EUnifiedMappingType(enum.Enum):
        eUMT_UV = ... # type: FbxTexture.EUnifiedMappingType
        eUMT_XY = ... # type: FbxTexture.EUnifiedMappingType
        eUMT_YZ = ... # type: FbxTexture.EUnifiedMappingType
        eUMT_XZ = ... # type: FbxTexture.EUnifiedMappingType
        eUMT_SPHERICAL = ... # type: FbxTexture.EUnifiedMappingType
        eUMT_CYLINDRICAL = ... # type: FbxTexture.EUnifiedMappingType
        eUMT_ENVIRONMENT = ... # type: FbxTexture.EUnifiedMappingType
        eUMT_PROJECTION = ... # type: FbxTexture.EUnifiedMappingType
        eUMT_BOX = ... # type: FbxTexture.EUnifiedMappingType
        eUMT_FACE = ... # type: FbxTexture.EUnifiedMappingType
        eUMT_NO_MAPPING = ... # type: FbxTexture.EUnifiedMappingType

    Alpha = ... # type: FbxPropertyDouble1
    ClassId = ... # type: FbxClassId
    CurrentMappingType = ... # type: FbxPropertyEUnifiedMappingType
    CurrentTextureBlendMode = ... # type: FbxPropertyEBlendMode
    PremultiplyAlpha = ... # type: FbxPropertyBool1
    Rotation = ... # type: FbxPropertyDouble3
    RotationPivot = ... # type: FbxPropertyDouble3
    Scaling = ... # type: FbxPropertyDouble3
    ScalingPivot = ... # type: FbxPropertyDouble3
    TextureTypeUse = ... # type: FbxPropertyETextureUse6
    Translation = ... # type: FbxPropertyDouble3
    UVSet = ... # type: FbxPropertyString
    UVSwap = ... # type: FbxPropertyBool1
    WrapModeU = ... # type: FbxPropertyEWrapMode
    WrapModeV = ... # type: FbxPropertyEWrapMode

    def __ne__(self, other: object): ...
    def GetTextureType(self) -> FbxString: ...
    def GetUVScaling(self) -> FbxVector2: ...
    def SetUVScaling(self, pS: FbxVector2) -> None: ...
    def GetUVTranslation(self) -> FbxVector2: ...
    def SetUVTranslation(self, pT: FbxVector2) -> None: ...
    def GetScaleV(self) -> float: ...
    def GetScaleU(self) -> float: ...
    def SetScale(self, pU: float, pV: float) -> None: ...
    def GetRotationW(self) -> float: ...
    def GetRotationV(self) -> float: ...
    def GetRotationU(self) -> float: ...
    def SetRotation(self, pU: float, pV: float, pW: float = ...) -> None: ...
    def GetTranslationV(self) -> float: ...
    def GetTranslationU(self) -> float: ...
    def SetTranslation(self, pU: float, pV: float) -> None: ...
    def GetDefaultAlpha(self) -> float: ...
    def SetDefaultAlpha(self, pAlpha: float) -> None: ...
    def GetDefaultS(self, pS: FbxVector4) -> FbxVector4: ...
    def SetDefaultS(self, pS: FbxVector4) -> None: ...
    def GetDefaultR(self, pR: FbxVector4) -> FbxVector4: ...
    def SetDefaultR(self, pR: FbxVector4) -> None: ...
    def GetDefaultT(self, pT: FbxVector4) -> FbxVector4: ...
    def SetDefaultT(self, pT: FbxVector4) -> None: ...
    def GetBlendMode(self) -> 'FbxTexture.EBlendMode': ...
    def SetBlendMode(self, pBlendMode: 'FbxTexture.EBlendMode') -> None: ...
    def GetWrapModeV(self) -> 'FbxTexture.EWrapMode': ...
    def GetWrapModeU(self) -> 'FbxTexture.EWrapMode': ...
    def SetWrapMode(self, pWrapU: 'FbxTexture.EWrapMode', pWrapV: 'FbxTexture.EWrapMode') -> None: ...
    def GetTextureUse(self) -> 'FbxTexture.ETextureUse': ...
    def SetTextureUse(self, pMaterialUse: 'FbxTexture.ETextureUse') -> None: ...
    def GetPlanarMappingNormal(self) -> 'FbxTexture.EPlanarMappingNormal': ...
    def SetPlanarMappingNormal(self, pPlanarMappingNormal: 'FbxTexture.EPlanarMappingNormal') -> None: ...
    def GetMappingType(self) -> 'FbxTexture.EMappingType': ...
    def SetMappingType(self, pMappingType: 'FbxTexture.EMappingType') -> None: ...
    def GetCroppingBottom(self) -> int: ...
    def GetCroppingRight(self) -> int: ...
    def GetCroppingTop(self) -> int: ...
    def GetCroppingLeft(self) -> int: ...
    def SetCropping(self, pLeft: int, pTop: int, pRight: int, pBottom: int) -> None: ...
    def GetAlphaSource(self) -> 'FbxTexture.EAlphaSource': ...
    def SetAlphaSource(self, pAlphaSource: 'FbxTexture.EAlphaSource') -> None: ...
    def GetSwapUV(self) -> bool: ...
    def SetSwapUV(self, pSwapUV: bool) -> None: ...
    def Reset(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxTexture': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxTexture': ...


class FbxLayeredTexture(FbxTexture):

    class EBlendMode(enum.Enum):
        eTranslucent = ... # type: FbxLayeredTexture.EBlendMode
        eAdditive = ... # type: FbxLayeredTexture.EBlendMode
        eModulate = ... # type: FbxLayeredTexture.EBlendMode
        eModulate2 = ... # type: FbxLayeredTexture.EBlendMode
        eOver = ... # type: FbxLayeredTexture.EBlendMode
        eNormal = ... # type: FbxLayeredTexture.EBlendMode
        eDissolve = ... # type: FbxLayeredTexture.EBlendMode
        eDarken = ... # type: FbxLayeredTexture.EBlendMode
        eColorBurn = ... # type: FbxLayeredTexture.EBlendMode
        eLinearBurn = ... # type: FbxLayeredTexture.EBlendMode
        eDarkerColor = ... # type: FbxLayeredTexture.EBlendMode
        eLighten = ... # type: FbxLayeredTexture.EBlendMode
        eScreen = ... # type: FbxLayeredTexture.EBlendMode
        eColorDodge = ... # type: FbxLayeredTexture.EBlendMode
        eLinearDodge = ... # type: FbxLayeredTexture.EBlendMode
        eLighterColor = ... # type: FbxLayeredTexture.EBlendMode
        eSoftLight = ... # type: FbxLayeredTexture.EBlendMode
        eHardLight = ... # type: FbxLayeredTexture.EBlendMode
        eVividLight = ... # type: FbxLayeredTexture.EBlendMode
        eLinearLight = ... # type: FbxLayeredTexture.EBlendMode
        ePinLight = ... # type: FbxLayeredTexture.EBlendMode
        eHardMix = ... # type: FbxLayeredTexture.EBlendMode
        eDifference = ... # type: FbxLayeredTexture.EBlendMode
        eExclusion = ... # type: FbxLayeredTexture.EBlendMode
        eSubtract = ... # type: FbxLayeredTexture.EBlendMode
        eDivide = ... # type: FbxLayeredTexture.EBlendMode
        eHue = ... # type: FbxLayeredTexture.EBlendMode
        eSaturation = ... # type: FbxLayeredTexture.EBlendMode
        eColor = ... # type: FbxLayeredTexture.EBlendMode
        eLuminosity = ... # type: FbxLayeredTexture.EBlendMode
        eOverlay = ... # type: FbxLayeredTexture.EBlendMode
        eBlendModeCount = ... # type: FbxLayeredTexture.EBlendMode

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def GetTextureBlendMode(self, pIndex: int) -> typing.Tuple[bool, 'FbxLayeredTexture.EBlendMode']: ...
    def SetTextureBlendMode(self, pIndex: int, pMode: 'FbxLayeredTexture.EBlendMode') -> bool: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxLayeredTexture': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxLayeredTexture': ...


class FbxFileTexture(FbxTexture):

    class EMaterialUse(enum.Enum):
        eModelMaterial = ... # type: FbxFileTexture.EMaterialUse
        eDefaultMaterial = ... # type: FbxFileTexture.EMaterialUse

    ClassId = ... # type: FbxClassId
    UseMaterial = ... # type: FbxPropertyBool1
    UseMipMap = ... # type: FbxPropertyBool1

    def __ne__(self, other: object): ...
    def GetMaterialUse(self) -> 'FbxFileTexture.EMaterialUse': ...
    def SetMaterialUse(self, pMaterialUse: 'FbxFileTexture.EMaterialUse') -> None: ...
    def GetRelativeFileName(self) -> str: ...
    def GetFileName(self) -> str: ...
    def SetRelativeFileName(self, pName: str) -> bool: ...
    def SetFileName(self, pName: str) -> bool: ...
    def Reset(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxFileTexture': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxFileTexture': ...


class FbxProceduralTexture(FbxTexture):

    BlobProp = ... # type: FbxPropertyBlob
    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def GetBlob(self) -> FbxBlob: ...
    def SetBlob(self, pBlob: FbxBlob) -> None: ...
    def Reset(self) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxProceduralTexture': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxProceduralTexture': ...


class FbxSurfaceMaterial(FbxObject):

    ClassId = ... # type: FbxClassId
    MultiLayer = ... # type: FbxPropertyBool1
    ShadingModel = ... # type: FbxPropertyString
    sAmbient = ... # type: str
    sAmbientFactor = ... # type: str
    sBump = ... # type: str
    sBumpFactor = ... # type: str
    sDiffuse = ... # type: str
    sDiffuseFactor = ... # type: str
    sDisplacementColor = ... # type: str
    sDisplacementFactor = ... # type: str
    sEmissive = ... # type: str
    sEmissiveFactor = ... # type: str
    sMultiLayer = ... # type: str
    sMultiLayerDefault = ... # type: bool
    sNormalMap = ... # type: str
    sReflection = ... # type: str
    sReflectionFactor = ... # type: str
    sShadingModel = ... # type: str
    sShadingModelDefault = ... # type: str
    sShininess = ... # type: str
    sSpecular = ... # type: str
    sSpecularFactor = ... # type: str
    sTransparencyFactor = ... # type: str
    sTransparentColor = ... # type: str

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxSurfaceMaterial': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxSurfaceMaterial': ...


class FbxSurfaceLambert(FbxSurfaceMaterial):

    Ambient = ... # type: FbxPropertyDouble3
    AmbientFactor = ... # type: FbxPropertyDouble1
    Bump = ... # type: FbxPropertyDouble3
    BumpFactor = ... # type: FbxPropertyDouble1
    ClassId = ... # type: FbxClassId
    Diffuse = ... # type: FbxPropertyDouble3
    DiffuseFactor = ... # type: FbxPropertyDouble1
    DisplacementColor = ... # type: FbxPropertyDouble3
    DisplacementFactor = ... # type: FbxPropertyDouble1
    Emissive = ... # type: FbxPropertyDouble3
    EmissiveFactor = ... # type: FbxPropertyDouble1
    NormalMap = ... # type: FbxPropertyDouble3
    TransparencyFactor = ... # type: FbxPropertyDouble1
    TransparentColor = ... # type: FbxPropertyDouble3
    VectorDisplacementColor = ... # type: FbxPropertyDouble3
    VectorDisplacementFactor = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxSurfaceLambert': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxSurfaceLambert': ...


class FbxSurfacePhong(FbxSurfaceLambert):

    ClassId = ... # type: FbxClassId
    Reflection = ... # type: FbxPropertyDouble3
    ReflectionFactor = ... # type: FbxPropertyDouble1
    Shininess = ... # type: FbxPropertyDouble1
    Specular = ... # type: FbxPropertyDouble3
    SpecularFactor = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxSurfacePhong': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxSurfacePhong': ...


class FbxNodeAttribute(FbxObject):

    class EType(enum.Enum):
        eUnknown = ... # type: FbxNodeAttribute.EType
        eNull = ... # type: FbxNodeAttribute.EType
        eMarker = ... # type: FbxNodeAttribute.EType
        eSkeleton = ... # type: FbxNodeAttribute.EType
        eMesh = ... # type: FbxNodeAttribute.EType
        eNurbs = ... # type: FbxNodeAttribute.EType
        ePatch = ... # type: FbxNodeAttribute.EType
        eCamera = ... # type: FbxNodeAttribute.EType
        eCameraStereo = ... # type: FbxNodeAttribute.EType
        eCameraSwitcher = ... # type: FbxNodeAttribute.EType
        eLight = ... # type: FbxNodeAttribute.EType
        eOpticalReference = ... # type: FbxNodeAttribute.EType
        eOpticalMarker = ... # type: FbxNodeAttribute.EType
        eNurbsCurve = ... # type: FbxNodeAttribute.EType
        eTrimNurbsSurface = ... # type: FbxNodeAttribute.EType
        eBoundary = ... # type: FbxNodeAttribute.EType
        eNurbsSurface = ... # type: FbxNodeAttribute.EType
        eShape = ... # type: FbxNodeAttribute.EType
        eLODGroup = ... # type: FbxNodeAttribute.EType
        eSubDiv = ... # type: FbxNodeAttribute.EType
        eCachedEffect = ... # type: FbxNodeAttribute.EType
        eLine = ... # type: FbxNodeAttribute.EType

    ClassId = ... # type: FbxClassId
    Color = ... # type: FbxPropertyDouble3
    sColor = ... # type: str
    sDefaultColor = ... # type: FbxDouble3

    def __ne__(self, other: object): ...
    def GetNode(self, pIndex: int = ...) -> FbxNode: ...
    def GetNodeCount(self) -> int: ...
    def GetAttributeType(self) -> 'FbxNodeAttribute.EType': ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxNodeAttribute': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxNodeAttribute': ...


class FbxSkeleton(FbxNodeAttribute):

    class EType(enum.Enum):
        eRoot = ... # type: FbxSkeleton.EType
        eLimb = ... # type: FbxSkeleton.EType
        eLimbNode = ... # type: FbxSkeleton.EType
        eEffector = ... # type: FbxSkeleton.EType

    ClassId = ... # type: FbxClassId
    LimbLength = ... # type: FbxPropertyDouble1
    Size = ... # type: FbxPropertyDouble1
    sDefaultLimbLength = ... # type: float
    sDefaultSize = ... # type: float
    sLimbLength = ... # type: str
    sSize = ... # type: str

    def __ne__(self, other: object): ...
    def IsSkeletonRoot(self) -> bool: ...
    def GetLimbNodeColorDefaultValue(self) -> FbxColor: ...
    def GetLimbNodeColorIsSet(self) -> bool: ...
    def GetLimbNodeColor(self) -> FbxColor: ...
    def SetLimbNodeColor(self, pColor: FbxColor) -> bool: ...
    def GetLimbNodeSizeDefaultValue(self) -> float: ...
    def GetLimbLengthDefaultValue(self) -> float: ...
    def GetSkeletonTypeDefaultValue(self) -> 'FbxSkeleton.EType': ...
    def GetSkeletonTypeIsSet(self) -> bool: ...
    def GetSkeletonType(self) -> 'FbxSkeleton.EType': ...
    def SetSkeletonType(self, pSkeletonType: 'FbxSkeleton.EType') -> None: ...
    def Reset(self) -> None: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxSkeleton': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxSkeleton': ...


class FbxLODGroup(FbxNodeAttribute):

    class EDisplayLevel(enum.Enum):
        eUseLOD = ... # type: FbxLODGroup.EDisplayLevel
        eShow = ... # type: FbxLODGroup.EDisplayLevel
        eHide = ... # type: FbxLODGroup.EDisplayLevel

    ClassId = ... # type: FbxClassId
    MaxDistance = ... # type: FbxPropertyDouble1
    MinDistance = ... # type: FbxPropertyDouble1
    MinMaxDistance = ... # type: FbxPropertyBool1
    ThresholdsUsedAsPercentage = ... # type: FbxPropertyBool1
    WorldSpace = ... # type: FbxPropertyBool1

    def __ne__(self, other: object): ...
    def GetDisplayLevel(self, pEl: int) -> typing.Tuple[bool, 'FbxLODGroup.EDisplayLevel']: ...
    def SetDisplayLevel(self, pEl: int, pValue: 'FbxLODGroup.EDisplayLevel') -> bool: ...
    def AddDisplayLevel(self, pValue: 'FbxLODGroup.EDisplayLevel') -> bool: ...
    def GetNumDisplayLevels(self) -> int: ...
    @typing.overload
    def GetThreshold(self, pEl: int, pThreshValue: FbxDistance) -> bool: ...
    @typing.overload
    def GetThreshold(self, pEl: int) -> typing.Tuple[bool, float]: ...
    @typing.overload
    def SetThreshold(self, pEl: int, pThreshValue: FbxDistance) -> bool: ...
    @typing.overload
    def SetThreshold(self, pEl: int, pThreshValue: float) -> bool: ...
    @typing.overload
    def AddThreshold(self, pThreshValue: FbxDistance) -> bool: ...
    @typing.overload
    def AddThreshold(self, pThreshValue: float) -> bool: ...
    def GetNumThresholds(self) -> int: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxLODGroup': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxLODGroup': ...


class FbxNull(FbxNodeAttribute):

    class ELook(enum.Enum):
        eNone = ... # type: FbxNull.ELook
        eCross = ... # type: FbxNull.ELook

    ClassId = ... # type: FbxClassId
    Look = ... # type: FbxPropertyFbxNullELook
    Size = ... # type: FbxPropertyDouble1
    sDefaultLook = ... # type: 'FbxNull.ELook'
    sDefaultSize = ... # type: float
    sLook = ... # type: str
    sSize = ... # type: str

    def __ne__(self, other: object): ...
    def GetSizeDefaultValue(self) -> float: ...
    def Reset(self) -> None: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxNull': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxNull': ...


class FbxLight(FbxNodeAttribute):

    class EAreaLightShape(enum.Enum):
        eRectangle = ... # type: FbxLight.EAreaLightShape
        eSphere = ... # type: FbxLight.EAreaLightShape

    class EDecayType(enum.Enum):
        eNone = ... # type: FbxLight.EDecayType
        eLinear = ... # type: FbxLight.EDecayType
        eQuadratic = ... # type: FbxLight.EDecayType
        eCubic = ... # type: FbxLight.EDecayType

    class EType(enum.Enum):
        ePoint = ... # type: FbxLight.EType
        eDirectional = ... # type: FbxLight.EType
        eSpot = ... # type: FbxLight.EType
        eArea = ... # type: FbxLight.EType
        eVolume = ... # type: FbxLight.EType

    AreaLightShape = ... # type: FbxPropertyEAreaLightShape
    BottomBarnDoor = ... # type: FbxPropertyFloat1
    CastLight = ... # type: FbxPropertyBool1
    CastShadows = ... # type: FbxPropertyBool1
    ClassId = ... # type: FbxClassId
    Color = ... # type: FbxPropertyDouble3
    DecayStart = ... # type: FbxPropertyDouble1
    DecayType = ... # type: FbxPropertyEDecayType
    DrawFrontFacingVolumetricLight = ... # type: FbxPropertyBool1
    DrawGroundProjection = ... # type: FbxPropertyBool1
    DrawVolumetricLight = ... # type: FbxPropertyBool1
    EnableBarnDoor = ... # type: FbxPropertyBool1
    EnableFarAttenuation = ... # type: FbxPropertyBool1
    EnableNearAttenuation = ... # type: FbxPropertyBool1
    FarAttenuationEnd = ... # type: FbxPropertyDouble1
    FarAttenuationStart = ... # type: FbxPropertyDouble1
    FileName = ... # type: FbxPropertyString
    Fog = ... # type: FbxPropertyDouble1
    InnerAngle = ... # type: FbxPropertyDouble1
    Intensity = ... # type: FbxPropertyDouble1
    LeftBarnDoor = ... # type: FbxPropertyFloat1
    LightType = ... # type: FbxPropertyEType
    NearAttenuationEnd = ... # type: FbxPropertyDouble1
    NearAttenuationStart = ... # type: FbxPropertyDouble1
    OuterAngle = ... # type: FbxPropertyDouble1
    RightBarnDoor = ... # type: FbxPropertyFloat1
    ShadowColor = ... # type: FbxPropertyDouble3
    TopBarnDoor = ... # type: FbxPropertyFloat1

    def __ne__(self, other: object): ...
    def GetShadowTexture(self) -> FbxTexture: ...
    def SetShadowTexture(self, pTexture: FbxTexture) -> None: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxLight': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxLight': ...


class FbxMarker(FbxNodeAttribute):

    class ELook(enum.Enum):
        eCube = ... # type: FbxMarker.ELook
        eHardCross = ... # type: FbxMarker.ELook
        eLightCross = ... # type: FbxMarker.ELook
        eSphere = ... # type: FbxMarker.ELook
        eCapsule = ... # type: FbxMarker.ELook
        eBox = ... # type: FbxMarker.ELook
        eBone = ... # type: FbxMarker.ELook
        eCircle = ... # type: FbxMarker.ELook
        eSquare = ... # type: FbxMarker.ELook
        eStick = ... # type: FbxMarker.ELook
        eNone = ... # type: FbxMarker.ELook

    class EType(enum.Enum):
        eStandard = ... # type: FbxMarker.EType
        eOptical = ... # type: FbxMarker.EType
        eEffectorFK = ... # type: FbxMarker.EType
        eEffectorIK = ... # type: FbxMarker.EType

    ClassId = ... # type: FbxClassId
    DrawLink = ... # type: FbxPropertyBool1
    IKPivot = ... # type: FbxPropertyDouble3
    Look = ... # type: FbxPropertyELook
    ShowLabel = ... # type: FbxPropertyBool1
    Size = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def GetIKReachRotation(self) -> FbxProperty: ...
    def GetIKReachTranslation(self) -> FbxProperty: ...
    def GetOcclusion(self) -> FbxProperty: ...
    def SetDefaultColor(self, pColor: FbxColor) -> None: ...
    def GetDefaultColor(self, pColor: FbxColor) -> FbxColor: ...
    def SetDefaultIKReachRotation(self, pIKReachRotation: float) -> None: ...
    def GetDefaultIKReachRotation(self) -> float: ...
    def SetDefaultIKReachTranslation(self, pIKReachTranslation: float) -> None: ...
    def GetDefaultIKReachTranslation(self) -> float: ...
    def SetDefaultOcclusion(self, pOcclusion: float) -> None: ...
    def GetDefaultOcclusion(self) -> float: ...
    def GetType(self) -> 'FbxMarker.EType': ...
    def SetType(self, pType: 'FbxMarker.EType') -> None: ...
    def Reset(self) -> None: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxMarker': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxMarker': ...


class FbxCamera(FbxNodeAttribute):

    class EFocusDistanceSource(enum.Enum):
        eFocusSrcCameraInterest = ... # type: FbxCamera.EFocusDistanceSource
        eFocusSpecificDistance = ... # type: FbxCamera.EFocusDistanceSource

    class ESamplingType(enum.Enum):
        eSamplingUniform = ... # type: FbxCamera.ESamplingType
        eSamplingStochastic = ... # type: FbxCamera.ESamplingType

    class EAntialiasingMethod(enum.Enum):
        eAAOversampling = ... # type: FbxCamera.EAntialiasingMethod
        eAAHardware = ... # type: FbxCamera.EAntialiasingMethod

    class ERenderOptionsUsageTime(enum.Enum):
        eInteractive = ... # type: FbxCamera.ERenderOptionsUsageTime
        eOnDemand = ... # type: FbxCamera.ERenderOptionsUsageTime

    class ESafeAreaStyle(enum.Enum):
        eSafeAreaRound = ... # type: FbxCamera.ESafeAreaStyle
        eSafeAreaSquare = ... # type: FbxCamera.ESafeAreaStyle

    class EFrontBackPlaneDisplayMode(enum.Enum):
        ePlanesDisabled = ... # type: FbxCamera.EFrontBackPlaneDisplayMode
        ePlanesAlways = ... # type: FbxCamera.EFrontBackPlaneDisplayMode
        ePlanesWhenMedia = ... # type: FbxCamera.EFrontBackPlaneDisplayMode

    class EFrontBackPlaneDistanceMode(enum.Enum):
        eRelativeToInterest = ... # type: FbxCamera.EFrontBackPlaneDistanceMode
        eRelativeToCamera = ... # type: FbxCamera.EFrontBackPlaneDistanceMode

    class EPlateDrawingMode(enum.Enum):
        ePlateBackground = ... # type: FbxCamera.EPlateDrawingMode
        ePlateForeground = ... # type: FbxCamera.EPlateDrawingMode
        ePlateBackAndFront = ... # type: FbxCamera.EPlateDrawingMode

    class EFilmRollOrder(enum.Enum):
        eRotateFirst = ... # type: FbxCamera.EFilmRollOrder
        eTranslateFirst = ... # type: FbxCamera.EFilmRollOrder

    class EGateFit(enum.Enum):
        eFitNone = ... # type: FbxCamera.EGateFit
        eFitVertical = ... # type: FbxCamera.EGateFit
        eFitHorizontal = ... # type: FbxCamera.EGateFit
        eFitFill = ... # type: FbxCamera.EGateFit
        eFitOverscan = ... # type: FbxCamera.EGateFit
        eFitStretch = ... # type: FbxCamera.EGateFit

    class EApertureMode(enum.Enum):
        eHorizAndVert = ... # type: FbxCamera.EApertureMode
        eHorizontal = ... # type: FbxCamera.EApertureMode
        eVertical = ... # type: FbxCamera.EApertureMode
        eFocalLength = ... # type: FbxCamera.EApertureMode

    class EApertureFormat(enum.Enum):
        eCustomAperture = ... # type: FbxCamera.EApertureFormat
        e16mmTheatrical = ... # type: FbxCamera.EApertureFormat
        eSuper16mm = ... # type: FbxCamera.EApertureFormat
        e35mmAcademy = ... # type: FbxCamera.EApertureFormat
        e35mmTVProjection = ... # type: FbxCamera.EApertureFormat
        e35mmFullAperture = ... # type: FbxCamera.EApertureFormat
        e35mm185Projection = ... # type: FbxCamera.EApertureFormat
        e35mmAnamorphic = ... # type: FbxCamera.EApertureFormat
        e70mmProjection = ... # type: FbxCamera.EApertureFormat
        eVistaVision = ... # type: FbxCamera.EApertureFormat
        eDynaVision = ... # type: FbxCamera.EApertureFormat
        eIMAX = ... # type: FbxCamera.EApertureFormat

    class EAspectRatioMode(enum.Enum):
        eWindowSize = ... # type: FbxCamera.EAspectRatioMode
        eFixedRatio = ... # type: FbxCamera.EAspectRatioMode
        eFixedResolution = ... # type: FbxCamera.EAspectRatioMode
        eFixedWidth = ... # type: FbxCamera.EAspectRatioMode
        eFixedHeight = ... # type: FbxCamera.EAspectRatioMode

    class EFormat(enum.Enum):
        eCustomFormat = ... # type: FbxCamera.EFormat
        eD1NTSC = ... # type: FbxCamera.EFormat
        eNTSC = ... # type: FbxCamera.EFormat
        ePAL = ... # type: FbxCamera.EFormat
        eD1PAL = ... # type: FbxCamera.EFormat
        eHD = ... # type: FbxCamera.EFormat
        e640x480 = ... # type: FbxCamera.EFormat
        e320x200 = ... # type: FbxCamera.EFormat
        e320x240 = ... # type: FbxCamera.EFormat
        e128x128 = ... # type: FbxCamera.EFormat
        eFullscreen = ... # type: FbxCamera.EFormat

    class EProjectionType(enum.Enum):
        ePerspective = ... # type: FbxCamera.EProjectionType
        eOrthogonal = ... # type: FbxCamera.EProjectionType

    AntialiasingIntensity = ... # type: FbxPropertyDouble1
    AntialiasingMethod = ... # type: FbxPropertyEAntialiasingMethod
    ApertureMode = ... # type: FbxPropertyEApertureMode
    AspectHeight = ... # type: FbxPropertyDouble1
    AspectRatioMode = ... # type: FbxPropertyEAspectRatioMode
    AspectWidth = ... # type: FbxPropertyDouble1
    AudioColor = ... # type: FbxPropertyDouble3
    AutoComputeClipPlanes = ... # type: FbxPropertyBool1
    BackPlaneDistance = ... # type: FbxPropertyDouble1
    BackPlaneDistanceMode = ... # type: FbxPropertyEFrontBackPlaneDistanceMode
    BackPlaneOffsetX = ... # type: FbxPropertyDouble1
    BackPlaneOffsetY = ... # type: FbxPropertyDouble1
    BackPlaneRotation = ... # type: FbxPropertyDouble1
    BackPlaneScaleX = ... # type: FbxPropertyDouble1
    BackPlaneScaleY = ... # type: FbxPropertyDouble1
    BackPlateCenter = ... # type: FbxPropertyBool1
    BackPlateCrop = ... # type: FbxPropertyBool1
    BackPlateFitImage = ... # type: FbxPropertyBool1
    BackPlateKeepRatio = ... # type: FbxPropertyBool1
    BackgroundAlphaTreshold = ... # type: FbxPropertyDouble1
    BackgroundColor = ... # type: FbxPropertyDouble3
    BackgroundTexture = ... # type: FbxPropertyFbxReference
    CameraFormat = ... # type: FbxPropertyEFormat
    ClassId = ... # type: FbxClassId
    DisplaySafeArea = ... # type: FbxPropertyBool1
    DisplaySafeAreaOnRender = ... # type: FbxPropertyBool1
    DisplayTurnTableIcon = ... # type: FbxPropertyBool1
    FarPlane = ... # type: FbxPropertyDouble1
    FieldOfView = ... # type: FbxPropertyDouble1
    FieldOfViewX = ... # type: FbxPropertyDouble1
    FieldOfViewY = ... # type: FbxPropertyDouble1
    FilmAspectRatio = ... # type: FbxPropertyDouble1
    FilmFormat = ... # type: FbxPropertyEApertureFormat
    FilmHeight = ... # type: FbxPropertyDouble1
    FilmOffsetX = ... # type: FbxPropertyDouble1
    FilmOffsetY = ... # type: FbxPropertyDouble1
    FilmRollOrder = ... # type: FbxPropertyEFilmRollOrder
    FilmRollPivotX = ... # type: FbxPropertyDouble1
    FilmRollPivotY = ... # type: FbxPropertyDouble1
    FilmRollValue = ... # type: FbxPropertyDouble1
    FilmSqueezeRatio = ... # type: FbxPropertyDouble1
    FilmTranslateX = ... # type: FbxPropertyDouble1
    FilmTranslateY = ... # type: FbxPropertyDouble1
    FilmWidth = ... # type: FbxPropertyDouble1
    FocalLength = ... # type: FbxPropertyDouble1
    FocusAngle = ... # type: FbxPropertyDouble1
    FocusDistance = ... # type: FbxPropertyDouble1
    FocusSource = ... # type: FbxPropertyEFocusDistanceSource
    ForegroundOpacity = ... # type: FbxPropertyDouble1
    ForegroundTexture = ... # type: FbxPropertyFbxReference
    FrameColor = ... # type: FbxPropertyDouble3
    FrameSamplingCount = ... # type: FbxPropertyInteger1
    FrameSamplingType = ... # type: FbxPropertyESamplingType
    FrontPlaneDistance = ... # type: FbxPropertyDouble1
    FrontPlaneDistanceMode = ... # type: FbxPropertyEFrontBackPlaneDistanceMode
    FrontPlaneOffsetX = ... # type: FbxPropertyDouble1
    FrontPlaneOffsetY = ... # type: FbxPropertyDouble1
    FrontPlaneRotation = ... # type: FbxPropertyDouble1
    FrontPlaneScaleX = ... # type: FbxPropertyDouble1
    FrontPlaneScaleY = ... # type: FbxPropertyDouble1
    FrontPlateCenter = ... # type: FbxPropertyBool1
    FrontPlateCrop = ... # type: FbxPropertyBool1
    FrontPlateFitImage = ... # type: FbxPropertyBool1
    FrontPlateKeepRatio = ... # type: FbxPropertyBool1
    GateFit = ... # type: FbxPropertyEGateFit
    InterestPosition = ... # type: FbxPropertyDouble3
    LockInterestNavigation = ... # type: FbxPropertyBool1
    LockMode = ... # type: FbxPropertyBool1
    MotionBlurIntensity = ... # type: FbxPropertyDouble1
    NearPlane = ... # type: FbxPropertyDouble1
    OpticalCenterX = ... # type: FbxPropertyDouble1
    OpticalCenterY = ... # type: FbxPropertyDouble1
    OrthoZoom = ... # type: FbxPropertyDouble1
    PixelAspectRatio = ... # type: FbxPropertyDouble1
    Position = ... # type: FbxPropertyDouble3
    PreScale = ... # type: FbxPropertyDouble1
    ProjectionType = ... # type: FbxPropertyEProjectionType
    Roll = ... # type: FbxPropertyDouble1
    SafeAreaAspectRatio = ... # type: FbxPropertyDouble1
    SafeAreaDisplayStyle = ... # type: FbxPropertyESafeAreaStyle
    ShowAudio = ... # type: FbxPropertyBool1
    ShowAzimut = ... # type: FbxPropertyBool1
    ShowBackplate = ... # type: FbxPropertyBool1
    ShowFrontplate = ... # type: FbxPropertyBool1
    ShowGrid = ... # type: FbxPropertyBool1
    ShowInfoOnMoving = ... # type: FbxPropertyBool1
    ShowName = ... # type: FbxPropertyBool1
    ShowOpticalCenter = ... # type: FbxPropertyBool1
    ShowTimeCode = ... # type: FbxPropertyBool1
    TurnTable = ... # type: FbxPropertyDouble1
    UpVector = ... # type: FbxPropertyDouble3
    Use2DMagnifierZoom = ... # type: FbxPropertyBool1
    UseAccumulationBuffer = ... # type: FbxPropertyBool1
    UseAntialiasing = ... # type: FbxPropertyBool1
    UseDepthOfField = ... # type: FbxPropertyBool1
    UseFrameColor = ... # type: FbxPropertyBool1
    UseMotionBlur = ... # type: FbxPropertyBool1
    UseRealTimeDOFAndAA = ... # type: FbxPropertyBool1
    UseRealTimeMotionBlur = ... # type: FbxPropertyBool1
    ViewCameraToLookAt = ... # type: FbxPropertyBool1
    ViewFrustumBackPlaneMode = ... # type: FbxPropertyEFrontBackPlaneDisplayMode
    ViewFrustumFrontPlaneMode = ... # type: FbxPropertyEFrontBackPlaneDisplayMode
    ViewFrustumNearFarPlane = ... # type: FbxPropertyBool1
    _2DMagnifierX = ... # type: FbxPropertyDouble1
    _2DMagnifierY = ... # type: FbxPropertyDouble1
    _2DMagnifierZoom = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def ComputeWorldToScreen(self, pPixelWidth: int, pPixelHeight: int, pWorldToCamera: FbxAMatrix) -> FbxMatrix: ...
    def IsPointInView(self, pWorldToScreen: FbxMatrix, pWorldToCamera: FbxMatrix, pPoint: FbxVector4) -> bool: ...
    def IsBoundingBoxInView(self, pWorldToScreen: FbxMatrix, pWorldToCamera: FbxMatrix, pPoints: FbxVector4) -> bool: ...
    def GetViewNearFarPlanes(self) -> bool: ...
    def SetViewNearFarPlanes(self, pEnable: bool) -> None: ...
    def GetViewCameraInterest(self) -> bool: ...
    def SetViewCameraInterest(self, pEnable: bool) -> None: ...
    def GetViewFrustumBackPlaneMode(self) -> 'FbxCamera.EFrontBackPlaneDisplayMode': ...
    def SetViewFrustumBackPlaneMode(self, pMode: 'FbxCamera.EFrontBackPlaneDisplayMode') -> None: ...
    def GetViewFrustumFrontPlaneMode(self) -> 'FbxCamera.EFrontBackPlaneDisplayMode': ...
    def SetViewFrustumFrontPlaneMode(self, pMode: 'FbxCamera.EFrontBackPlaneDisplayMode') -> None: ...
    def GetFrontPlaneDistanceMode(self) -> 'FbxCamera.EFrontBackPlaneDistanceMode': ...
    def SetFrontPlaneDistanceMode(self, pMode: 'FbxCamera.EFrontBackPlaneDistanceMode') -> None: ...
    def GetFrontPlaneDistance(self) -> float: ...
    def SetFrontPlaneDistance(self, pDistance: float) -> None: ...
    def GetBackPlaneDistanceMode(self) -> 'FbxCamera.EFrontBackPlaneDistanceMode': ...
    def SetBackPlaneDistanceMode(self, pMode: 'FbxCamera.EFrontBackPlaneDistanceMode') -> None: ...
    def GetForegroundTexture(self) -> FbxTexture: ...
    def SetForegroundTexture(self, pTexture: FbxTexture) -> None: ...
    def GetForegroundOpacity(self) -> float: ...
    def SetForegroundOpacity(self, pOpacity: float) -> None: ...
    def GetFrontPlateKeepRatio(self) -> bool: ...
    def SetFrontPlateKeepRatio(self, pFrontPlateKeepRatio: bool) -> None: ...
    def GetFrontPlateCenter(self) -> bool: ...
    def SetFrontPlateCenter(self, pFrontPlateCenter: bool) -> None: ...
    def GetFrontPlateCrop(self) -> bool: ...
    def SetFrontPlateCrop(self, pFrontPlateCrop: bool) -> None: ...
    def GetFrontPlateFitImage(self) -> bool: ...
    def SetFrontPlateFitImage(self, pFrontPlateFitImage: bool) -> None: ...
    def GetShowFrontPlate(self) -> bool: ...
    def SetShowFrontPlate(self, pEnable: bool) -> None: ...
    def GetBackPlateKeepRatio(self) -> bool: ...
    def SetBackPlateKeepRatio(self, pKeepRatio: bool) -> None: ...
    def GetBackPlateCenter(self) -> bool: ...
    def SetBackPlateCenter(self, pCenter: bool) -> None: ...
    def GetBackPlateCrop(self) -> bool: ...
    def SetBackPlateCrop(self, pCrop: bool) -> None: ...
    def GetBackPlateFitImage(self) -> bool: ...
    def SetBackPlateFitImage(self, pFitImage: bool) -> None: ...
    def GetBackgroundAlphaTreshold(self) -> float: ...
    def SetBackgroundAlphaTreshold(self, pThreshold: float) -> None: ...
    def GetBackgroundMediaName(self) -> str: ...
    def SetBackgroundMediaName(self, pFileName: str) -> None: ...
    def GetBackgroundFileName(self) -> str: ...
    def SetBackgroundFileName(self, pFileName: str) -> None: ...
    def ComputeFocalLength(self, pAngleOfView: float) -> float: ...
    def ComputeFieldOfView(self, pFocalLength: float) -> float: ...
    def GetSqueezeRatio(self) -> float: ...
    def SetSqueezeRatio(self, pRatio: float) -> None: ...
    def GetApertureHeight(self) -> float: ...
    def SetApertureHeight(self, pHeight: float) -> None: ...
    def GetApertureWidth(self) -> float: ...
    def SetApertureWidth(self, pWidth: float) -> None: ...
    def GetApertureMode(self) -> 'FbxCamera.EApertureMode': ...
    def SetApertureMode(self, pMode: 'FbxCamera.EApertureMode') -> None: ...
    def GetApertureFormat(self) -> 'FbxCamera.EApertureFormat': ...
    def SetApertureFormat(self, pFormat: 'FbxCamera.EApertureFormat') -> None: ...
    def GetFarPlane(self) -> float: ...
    def SetFarPlane(self, pDistance: float) -> None: ...
    def GetNearPlane(self) -> float: ...
    def SetNearPlane(self, pDistance: float) -> None: ...
    def GetPixelRatio(self) -> float: ...
    def SetPixelRatio(self, pRatio: float) -> None: ...
    def GetAspectRatioMode(self) -> 'FbxCamera.EAspectRatioMode': ...
    def SetAspect(self, pRatioMode: 'FbxCamera.EAspectRatioMode', pWidth: float, pHeight: float) -> None: ...
    def GetFormat(self) -> 'FbxCamera.EFormat': ...
    def SetFormat(self, pFormat: 'FbxCamera.EFormat') -> None: ...
    def Reset(self) -> None: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxCamera': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxCamera': ...


class FbxCameraStereo(FbxCamera):

    class EStereoType(enum.Enum):
        eNone = ... # type: FbxCameraStereo.EStereoType
        eConverged = ... # type: FbxCameraStereo.EStereoType
        eOffAxis = ... # type: FbxCameraStereo.EStereoType
        eParallel = ... # type: FbxCameraStereo.EStereoType

    ClassId = ... # type: FbxClassId
    FilmOffsetLeftCam = ... # type: FbxPropertyDouble1
    FilmOffsetRightCam = ... # type: FbxPropertyDouble1
    InteraxialSeparation = ... # type: FbxPropertyDouble1
    LeftCamera = ... # type: FbxPropertyFbxReference
    PrecompFileName = ... # type: FbxPropertyString
    RelativePrecompFileName = ... # type: FbxPropertyString
    RightCamera = ... # type: FbxPropertyFbxReference
    Stereo = ... # type: FbxPropertyFbxCameraStereoEStereoType
    ToeInAdjust = ... # type: FbxPropertyDouble1
    ZeroParallax = ... # type: FbxPropertyDouble1

    def __ne__(self, other: object): ...
    def ReevaluateRightCameraFilmOffsetX(self) -> float: ...
    def ReevaluateLeftCameraFilmOffsetX(self) -> float: ...
    def GetRightCameraGlobalMatrix(self) -> FbxAMatrix: ...
    def GetRightCameraLocalMatrix(self) -> FbxAMatrix: ...
    def GetLeftCameraGlobalMatrix(self) -> FbxAMatrix: ...
    def GetLeftCameraLocalMatrix(self) -> FbxAMatrix: ...
    def SetRightCamera(self, pCamera: FbxCamera) -> bool: ...
    def SetLeftCamera(self, pCamera: FbxCamera) -> bool: ...
    def GetRightCamera(self) -> FbxCamera: ...
    def GetLeftCamera(self) -> FbxCamera: ...
    def Reset(self) -> None: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxCameraStereo': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxCameraStereo': ...


class FbxCameraSwitcher(FbxNodeAttribute):

    CameraIndex = ... # type: FbxPropertyInteger1
    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def SetDefaultCameraIndex(self, pIndex: int) -> None: ...
    def GetDefaultCameraIndex(self) -> int: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxCameraSwitcher': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxCameraSwitcher': ...


class FbxLayerContainer(FbxNodeAttribute):

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def ConvertDirectToIndexToDirect(self, pLayer: int) -> bool: ...
    def GetLayerTypedIndex(self, pGlobalIndex: int, pType: FbxLayerElement.EType, pIsUV: bool = ...) -> int: ...
    def GetLayerIndex(self, pIndex: int, pType: FbxLayerElement.EType, pIsUV: bool = ...) -> int: ...
    @typing.overload
    def GetLayer(self, pIndex: int) -> FbxLayer: ...
    @typing.overload
    def GetLayer(self, pIndex: int, pType: FbxLayerElement.EType, pIsUV: bool = ...) -> FbxLayer: ...
    @typing.overload
    def GetLayerCount(self) -> int: ...
    @typing.overload
    def GetLayerCount(self, pType: FbxLayerElement.EType, pUVCount: bool = ...) -> int: ...
    def ClearLayers(self) -> None: ...
    def CreateLayer(self) -> int: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxLayerContainer': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxLayerContainer': ...


class FbxGeometryBase(FbxLayerContainer):

    BBoxMax = ... # type: FbxPropertyDouble3
    BBoxMin = ... # type: FbxPropertyDouble3
    CastShadow = ... # type: FbxPropertyBool1
    ClassId = ... # type: FbxClassId
    PrimaryVisibility = ... # type: FbxPropertyBool1
    ReceiveShadow = ... # type: FbxPropertyBool1

    def __ne__(self, other: object): ...
    def GetUVSetNames(self, a0: typing.List) -> None: ...
    def GetElementUVCount(self) -> int: ...
    @typing.overload
    def GetElementUV(self, pIndex: int = ...) -> FbxLayerElementUV: ...
    @typing.overload
    def GetElementUV(self, pUVSetName: str) -> FbxLayerElementUV: ...
    def RemoveElementUV(self, pElementUV: FbxLayerElementUV) -> bool: ...
    def CreateElementUV(self, pUVSetName: str) -> FbxLayerElementUV: ...
    def GetElementVisibilityCount(self) -> int: ...
    def GetElementVisibility(self, pIndex: int = ...) -> FbxLayerElementVisibility: ...
    def RemoveElementVisibility(self, pElementVisibility: FbxLayerElementVisibility) -> bool: ...
    def CreateElementVisibility(self) -> FbxLayerElementVisibility: ...
    def GetElementEdgeCreaseCount(self) -> int: ...
    def GetElementEdgeCrease(self, pIndex: int = ...) -> FbxLayerElementCrease: ...
    def RemoveElementEdgeCrease(self, pElementCrease: FbxLayerElementCrease) -> bool: ...
    def CreateElementEdgeCrease(self) -> FbxLayerElementCrease: ...
    def GetElementVertexCreaseCount(self) -> int: ...
    def GetElementVertexCrease(self, pIndex: int = ...) -> FbxLayerElementCrease: ...
    def RemoveElementVertexCrease(self, pElementCrease: FbxLayerElementCrease) -> bool: ...
    def CreateElementVertexCrease(self) -> FbxLayerElementCrease: ...
    def GetElementSmoothingCount(self) -> int: ...
    def GetElementSmoothing(self, pIndex: int = ...) -> FbxLayerElementSmoothing: ...
    def RemoveElementSmoothing(self, pElementSmoothing: FbxLayerElementSmoothing) -> bool: ...
    def CreateElementSmoothing(self) -> FbxLayerElementSmoothing: ...
    def GetElementVertexColorCount(self) -> int: ...
    def GetElementVertexColor(self, pIndex: int = ...) -> FbxLayerElementVertexColor: ...
    def RemoveElementVertexColor(self, pElementVertexColor: FbxLayerElementVertexColor) -> bool: ...
    def CreateElementVertexColor(self) -> FbxLayerElementVertexColor: ...
    def GetElementPolygonGroupCount(self) -> int: ...
    def GetElementPolygonGroup(self, pIndex: int = ...) -> FbxLayerElementPolygonGroup: ...
    def RemoveElementPolygonGroup(self, pElementPolygonGroup: FbxLayerElementPolygonGroup) -> bool: ...
    def CreateElementPolygonGroup(self) -> FbxLayerElementPolygonGroup: ...
    def GetElementMaterialCount(self) -> int: ...
    def GetElementMaterial(self, pIndex: int = ...) -> FbxLayerElementMaterial: ...
    def RemoveElementMaterial(self, pElementMaterial: FbxLayerElementMaterial) -> bool: ...
    def CreateElementMaterial(self) -> FbxLayerElementMaterial: ...
    def GetElementTangentCount(self) -> int: ...
    def GetElementTangent(self, pIndex: int = ...) -> FbxLayerElementTangent: ...
    def RemoveElementTangent(self, pElementTangent: FbxLayerElementTangent) -> bool: ...
    def CreateElementTangent(self) -> FbxLayerElementTangent: ...
    def GetElementBinormalCount(self) -> int: ...
    def GetElementBinormal(self, pIndex: int = ...) -> FbxLayerElementBinormal: ...
    def RemoveElementBinormal(self, pElementBinormal: FbxLayerElementBinormal) -> bool: ...
    def CreateElementBinormal(self) -> FbxLayerElementBinormal: ...
    def GetElementNormalCount(self) -> int: ...
    def GetElementNormal(self, pIndex: int = ...) -> FbxLayerElementNormal: ...
    def RemoveElementNormal(self, pElementNormal: FbxLayerElementNormal) -> bool: ...
    def CreateElementNormal(self) -> FbxLayerElementNormal: ...
    def ComputeBBox(self) -> None: ...
    def SetControlPointCount(self, pCount: int) -> None: ...
    def GetControlPoints(self) -> typing.List: ...
    def GetControlPointsCount(self) -> int: ...
    def SetControlPointNormalAt(self, pNormal: FbxVector4, pIndex: int, pI2DSearch: bool = ...) -> None: ...
    def GetControlPointAt(self, pIndex: int) -> FbxVector4: ...
    @typing.overload
    def SetControlPointAt(self, pCtrlPoint: FbxVector4, pNormal: FbxVector4, pIndex: int, pI2DSearch: bool = ...) -> None: ...
    @typing.overload
    def SetControlPointAt(self, pCtrlPoint: FbxVector4, pIndex: int) -> None: ...
    @typing.overload
    def InitBinormals(self, pCount: int = ...) -> None: ...
    @typing.overload
    def InitBinormals(self, pSrc: 'FbxGeometryBase') -> None: ...
    @typing.overload
    def InitTangents(self, pCount: int = ...) -> None: ...
    @typing.overload
    def InitTangents(self, pSrc: 'FbxGeometryBase') -> None: ...
    @typing.overload
    def InitNormals(self, pCount: int = ...) -> None: ...
    @typing.overload
    def InitNormals(self, pSrc: 'FbxGeometryBase') -> None: ...
    def InitControlPoints(self, pCount: int) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxGeometryBase': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxGeometryBase': ...


class FbxShape(FbxGeometryBase):

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def Reset(self) -> None: ...
    def GetBaseGeometry(self) -> 'FbxGeometry': ...
    def GetBlendShapeChannel(self) -> FbxBlendShapeChannel: ...
    def SetBlendShapeChannel(self, pBlendShapeChannel: FbxBlendShapeChannel) -> bool: ...
    def IsAbsoluteMode(self) -> bool: ...
    def SetAbsoluteMode(self, pAbsolute: bool) -> None: ...
    def IsLegacyStyle(self) -> bool: ...
    def SetLegacyStyle(self, pState: bool) -> None: ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxShape': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxShape': ...


class FbxGeometry(FbxGeometryBase):

    class ESurfaceMode(enum.Enum):
        eRaw = ... # type: FbxGeometry.ESurfaceMode
        eLowNoNormals = ... # type: FbxGeometry.ESurfaceMode
        eLow = ... # type: FbxGeometry.ESurfaceMode
        eHighNoNormals = ... # type: FbxGeometry.ESurfaceMode
        eHigh = ... # type: FbxGeometry.ESurfaceMode

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    @typing.overload
    def GetDefaultShape(self, pBlendShapeIndex: int, pBlendShapeChannelIndex: int) -> float: ...
    @typing.overload
    def GetDefaultShape(self, pBlendShapeChannel: FbxBlendShapeChannel) -> float: ...
    @typing.overload
    def SetDefaultShape(self, pBlendShapeIndex: int, pBlendShapeChannelIndex: int, pPercent: float) -> None: ...
    @typing.overload
    def SetDefaultShape(self, pBlendShapeChannel: FbxBlendShapeChannel, pPercent: float) -> None: ...
    def ApplyPivot(self) -> None: ...
    def SetPivot(self, pXMatrix: FbxAMatrix) -> None: ...
    def GetPivot(self, pXMatrix: FbxAMatrix) -> FbxAMatrix: ...
    def GetShapeChannel(self, pBlendShapeIndex: int, pBlendShapeChannelIndex: int, pLayer: FbxAnimLayer, pCreateAsNeeded: bool = ..., pStatus: typing.Optional[FbxStatus] = ...) -> FbxAnimCurve: ...
    def GetShape(self, pBlendShapeIndex: int, pBlendShapeChannelIndex: int, pShapeIndex: int, pStatus: typing.Optional[FbxStatus] = ...) -> FbxShape: ...
    @typing.overload
    def GetShapeCount(self) -> int: ...
    @typing.overload
    def GetShapeCount(self, pBlendShapeIndex: int, pBlendShapeChannelIndex: int, pStatus: typing.Optional[FbxStatus] = ...) -> int: ...
    def ClearShape(self) -> None: ...
    def AddShape(self, pBlendShapeIndex: int, pBlendShapeChannelIndex: int, pShape: FbxShape, pPercent: float = ..., pStatus: typing.Optional[FbxStatus] = ...) -> bool: ...
    def GetDestinationGeometryWeightedMap(self, pIndex: int) -> FbxGeometryWeightedMap: ...
    def GetDestinationGeometryWeightedMapCount(self) -> int: ...
    def GetSourceGeometryWeightedMap(self) -> FbxGeometryWeightedMap: ...
    @typing.overload
    def GetDeformer(self, pIndex: int, pStatus: typing.Optional[FbxStatus] = ...) -> FbxDeformer: ...
    @typing.overload
    def GetDeformer(self, pIndex: int, pType: FbxDeformer.EDeformerType, pStatus: typing.Optional[FbxStatus] = ...) -> FbxDeformer: ...
    @typing.overload
    def GetDeformerCount(self) -> int: ...
    @typing.overload
    def GetDeformerCount(self, pType: FbxDeformer.EDeformerType) -> int: ...
    def RemoveDeformer(self, pIndex: int, pStatus: typing.Optional[FbxStatus] = ...) -> FbxDeformer: ...
    def AddDeformer(self, pDeformer: FbxDeformer) -> int: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxGeometry': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxGeometry': ...


class FbxLine(FbxGeometry):

    ClassId = ... # type: FbxClassId
    Renderable = ... # type: FbxPropertyBool1

    def __ne__(self, other: object): ...
    def GetEndPointCount(self) -> int: ...
    def GetEndPointAt(self, pEndPointIndex: int) -> int: ...
    def AddEndPoint(self, pPointIndex: int) -> bool: ...
    def GetEndPointArray(self) -> IntArray: ...
    def AddPointIndex(self, pValue: int, pAsEndPoint: bool = ...) -> bool: ...
    def GetPointIndexAt(self, pIndex: int) -> int: ...
    def SetPointIndexAt(self, pValue: int, pIndex: int, pAsEndPoint: bool = ...) -> bool: ...
    def GetIndexArray(self) -> IntArray: ...
    def GetIndexArraySize(self) -> int: ...
    def SetIndexArraySize(self, pCount: int) -> None: ...
    def Reset(self) -> None: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxLine': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxLine': ...


class FbxMesh(FbxGeometry):

    class EBoundaryRule(enum.Enum):
        eLegacy = ... # type: FbxMesh.EBoundaryRule
        eCreaseAll = ... # type: FbxMesh.EBoundaryRule
        eCreaseEdge = ... # type: FbxMesh.EBoundaryRule

    class ESmoothness(enum.Enum):
        eHull = ... # type: FbxMesh.ESmoothness
        eRough = ... # type: FbxMesh.ESmoothness
        eMedium = ... # type: FbxMesh.ESmoothness
        eFine = ... # type: FbxMesh.ESmoothness

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def GenerateTangentsDataForAllUVSets(self, pOverwrite: bool = ..., pIgnoreTangentFlip: bool = ...) -> bool: ...
    @typing.overload
    def GenerateTangentsData(self, pUVSetName: FbxString = ..., pOverwrite: bool = ..., pIgnoreTangentFlip: bool = ...) -> bool: ...
    @typing.overload
    def GenerateTangentsData(self, pUVSetLayerIndex: int, pOverwrite: bool = ..., pIgnoreTangentFlip: bool = ...) -> bool: ...
    def SetPolyHoleInfoArray(self, pHoleArray: BoolArray) -> bool: ...
    def SetPolyHoleInfo(self, pFaceIndex: int, pIsHole: bool) -> bool: ...
    def GetPolyHoleInfoArray(self) -> typing.Tuple[bool, FbxLayerElementArrayTemplate_bool]: ...
    def GetPolyHoleInfo(self, pFaceIndex: int) -> bool: ...
    def SetPropagateEdgeHardness(self, pPropagateEdgeHardness: bool) -> None: ...
    def GetPropagateEdgeHardness(self) -> bool: ...
    def SetPreserveHardEdges(self, pPreserveHardEdges: bool) -> None: ...
    def GetPreserveHardEdges(self) -> bool: ...
    def SetPreserveBorders(self, pPreserveBorders: bool) -> None: ...
    def GetPreserveBorders(self) -> bool: ...
    def SetBoundaryRule(self, pBoundaryRule: 'FbxMesh.EBoundaryRule') -> None: ...
    def GetBoundaryRule(self) -> 'FbxMesh.EBoundaryRule': ...
    def SetDisplaySubdivisions(self, pDisplySubdivisions: bool) -> None: ...
    def GetDisplaySubdivisions(self) -> bool: ...
    def SetMeshRenderDivisionLevels(self, pRenderDivisionLevels: int) -> None: ...
    def GetMeshRenderDivisionLevels(self) -> int: ...
    def SetMeshPreviewDivisionLevels(self, pPreviewDivisionLevels: int) -> None: ...
    def GetMeshPreviewDivisionLevels(self) -> int: ...
    def SetMeshSmoothness(self, pSmoothness: 'FbxMesh.ESmoothness') -> None: ...
    def GetMeshSmoothness(self) -> 'FbxMesh.ESmoothness': ...
    def SetVertexCreaseInfoArray(self, pWeightArray: DoubleArray) -> bool: ...
    def SetVertexCreaseInfo(self, pVertexIndex: int, pWeight: float) -> bool: ...
    def SetEdgeCreaseInfoArray(self, pWeightArray: DoubleArray) -> bool: ...
    def SetEdgeCreaseInfo(self, pEdgeIndex: int, pWeight: float) -> bool: ...
    def GetVertexCreaseInfoArray(self) -> typing.Tuple[bool, FbxLayerElementArrayTemplate_double]: ...
    def GetVertexCreaseInfo(self, pVertexIndex: int) -> float: ...
    def GetEdgeCreaseInfoArray(self) -> typing.Tuple[bool, FbxLayerElementArrayTemplate_double]: ...
    def GetEdgeCreaseInfo(self, pEdgeIndex: int) -> float: ...
    def GetTextureIndices(self, pTextureType: FbxLayerElement.EType) -> typing.Tuple[bool, FbxLayerElementArrayTemplate_int]: ...
    def GetMaterialIndices(self) -> typing.Tuple[bool, FbxLayerElementArrayTemplate_int]: ...
    def GetTextureUV(self, pTypeIdentifier: FbxLayerElement.EType = ...) -> typing.Tuple[bool, FbxLayerElementArrayTemplate_FbxVector2]: ...
    def IsTriangleMesh(self) -> bool: ...
    def AddMeshEdgeIndexForPolygon(self, pPolygonIndex: int, pPositionInPolygon: int) -> int: ...
    def EndAddMeshEdgeIndex(self) -> None: ...
    def BeginAddMeshEdgeIndex(self) -> None: ...
    @typing.overload
    def SetMeshEdgeIndex(self, pEdgeIndex: int, pStartVertexIndex: int, pEndVertexIndex: int, pCheckForDuplicates: bool) -> int: ...
    @typing.overload
    def SetMeshEdgeIndex(self, pEdgeIndex: int, pPolygonIndex: int, pPositionInPolygon: int) -> bool: ...
    def AddMeshEdgeIndex(self, pStartVertexIndex: int, pEndVertexIndex: int, pCheckForDuplicates: bool) -> int: ...
    def SetMeshEdge(self, pEdgeIndex: int, pValue: int) -> None: ...
    def SetMeshEdgeCount(self, pEdgeCount: int) -> None: ...
    def EndGetMeshEdgeVertices(self) -> None: ...
    def BeginGetMeshEdgeVertices(self) -> None: ...
    def GetMeshEdgeVertices(self, pEdgeIndex: int) -> typing.Tuple[int, int]: ...
    def GetMeshEdgeIndexForPolygon(self, pPolygon: int, pPositionInPolygon: int) -> int: ...
    def GetMeshEdgeIndex(self, pStartVertexIndex: int, pEndVertexIndex: int) -> typing.Tuple[int, bool]: ...
    def GetMeshEdgeCount(self) -> int: ...
    def BuildMeshEdgeArray(self) -> None: ...
    def MergePointsForPolygonVerteNormals(self, pMergeList: IntArray) -> None: ...
    def BuildMergeList(self, pMergeList: IntArray) -> bool: ...
    def SplitPoints(self, pTypeIdentifier: FbxLayerElement.EType = ...) -> None: ...
    def RemoveBadPolygons(self) -> int: ...
    def CheckSamePointTwice(self) -> bool: ...
    def CheckIfVertexNormalsCCW(self) -> bool: ...
    def GenerateNormals(self, pOverwrite: bool = ..., pByCtrlPoint: bool = ..., pCW: bool = ...) -> bool: ...
    def Reset(self) -> None: ...
    def SetTextureUVIndex(self, pPolygonIndex: int, pPositionInPolygon: int, pIndex: int, pTypeIdentifier: FbxLayerElement.EType) -> None: ...
    def GetTextureUVIndex(self, pPolygonIndex: int, pPositionInPolygon: int, pTypeIdentifier: FbxLayerElement.EType = ...) -> int: ...
    def InitTextureUVIndices(self, pMappingMode: FbxLayerElement.EMappingMode, pTypeIdentifier: FbxLayerElement.EType = ...) -> None: ...
    def InitTextureIndices(self, pMappingMode: FbxLayerElement.EMappingMode, pTextureType: FbxLayerElement.EType) -> None: ...
    def InitMaterialIndices(self, pMappingMode: FbxLayerElement.EMappingMode) -> None: ...
    def GetAllChannelUV(self, pLayer: int) -> FbxLayerElementTypeArray: ...
    def GetUVLayerCount(self) -> int: ...
    def GetTextureUVCount(self, pTypeIdentifier: FbxLayerElement.EType = ...) -> int: ...
    def AddTextureUV(self, pUV: FbxVector2, pTypeIdentifier: FbxLayerElement.EType = ...) -> None: ...
    def InitTextureUV(self, pCount: int, pTypeIdentifier: FbxLayerElement.EType = ...) -> None: ...
    def RemoveDuplicatedEdges(self, pEdgeIndexList: IntArray) -> int: ...
    def RemovePolygon(self, pPolygonIndex: int) -> int: ...
    def GetPolygonVertexIndex(self, pPolygonIndex: int) -> int: ...
    def GetPolygonVertexCount(self) -> int: ...
    def GetPolygonVertices(self) -> typing.List: ...
    def GetPolygonVertexUVs(self, pUVSetName: str, pUVs: FbxVector2Array, pUnmappedUVId: typing.Optional[IntArray] = ...) -> bool: ...
    def GetPolygonVertexUV(self, pPolyIndex: int, pVertexIndex: int, pUVSetName: str, pUV: FbxVector2) -> typing.Tuple[bool, bool]: ...
    def GetPolygonVertexNormals(self, pNormals: FbxVector4Array) -> bool: ...
    def GetPolygonVertexNormal(self, pPolyIndex: int, pVertexIndex: int, pNormal: FbxVector4) -> None: ...
    def GetPolygonVertex(self, pPolygonIndex: int, pPositionInPolygon: int) -> int: ...
    def SetPolygonGroup(self, pPolygonIndex: int, pGroup: int) -> None: ...
    def GetPolygonGroup(self, pPolygonIndex: int) -> int: ...
    def GetPolygonSize(self, pPolygonIndex: int) -> int: ...
    def GetPolygonCount(self) -> int: ...
    def EndPolygon(self) -> None: ...
    def AddPolygon(self, pIndex: int, pTextureUVIndex: int = ...) -> None: ...
    def BeginPolygonExt(self, pMaterial: int) -> int: ...
    def BeginPolygon(self, pMaterial: int = ..., pTexture: int = ..., pGroup: int = ..., pLegacy: bool = ...) -> None: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxMesh': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxMesh': ...


class FbxNurbs(FbxGeometry):

    class EType(enum.Enum):
        ePeriodic = ... # type: FbxNurbs.EType
        eClosed = ... # type: FbxNurbs.EType
        eOpen = ... # type: FbxNurbs.EType

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def GetApplyFlip(self) -> bool: ...
    def GetApplyFlipLinks(self) -> bool: ...
    def SetApplyFlipLinks(self, pFlag: bool) -> None: ...
    def GetApplyFlipUV(self) -> bool: ...
    def SetApplyFlipUV(self, pFlag: bool) -> None: ...
    def GetVSpanCount(self) -> int: ...
    def GetUSpanCount(self) -> int: ...
    def GetVStep(self) -> int: ...
    def GetUStep(self) -> int: ...
    def SetStep(self, pUStep: int, pVStep: int) -> None: ...
    def GetVOrder(self) -> int: ...
    def GetUOrder(self) -> int: ...
    def SetOrder(self, pUOrder: int, pVOrder: int) -> None: ...
    def GetVMultiplicityVector(self) -> typing.List: ...
    def GetUMultiplicityVector(self) -> typing.List: ...
    def SetVKnotVector(self, lList: typing.List) -> None: ...
    def GetVKnotVector(self) -> typing.List: ...
    def GetVKnotCount(self) -> int: ...
    def SetUKnotVector(self, lList: typing.List) -> None: ...
    def GetUKnotVector(self) -> typing.List: ...
    def GetUKnotCount(self) -> int: ...
    def GetNurbsVType(self) -> 'FbxNurbs.EType': ...
    def GetNurbsUType(self) -> 'FbxNurbs.EType': ...
    def GetVCount(self) -> int: ...
    def GetUCount(self) -> int: ...
    def InitControlPoints(self, pUCount: int, pUType: 'FbxNurbs.EType', pVCount: int, pVType: 'FbxNurbs.EType') -> None: ...
    def GetSurfaceMode(self) -> FbxGeometry.ESurfaceMode: ...
    def SetSurfaceMode(self, pMode: FbxGeometry.ESurfaceMode) -> None: ...
    def Reset(self) -> None: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxNurbs': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxNurbs': ...


class FbxNurbsCurve(FbxGeometry):

    class EType(enum.Enum):
        eOpen = ... # type: FbxNurbsCurve.EType
        eClosed = ... # type: FbxNurbsCurve.EType
        ePeriodic = ... # type: FbxNurbsCurve.EType

    class EDimension(enum.Enum):
        e2D = ... # type: FbxNurbsCurve.EDimension
        e3D = ... # type: FbxNurbsCurve.EDimension

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def IsBezier(self) -> bool: ...
    def IsPolyline(self) -> bool: ...
    def GetType(self) -> 'FbxNurbsCurve.EType': ...
    def GetSpanCount(self) -> int: ...
    def IsRational(self) -> bool: ...
    def GetDimension(self) -> 'FbxNurbsCurve.EDimension': ...
    def SetDimension(self, pDimension: 'FbxNurbsCurve.EDimension') -> None: ...
    def GetOrder(self) -> int: ...
    def SetOrder(self, pOrder: int) -> None: ...
    def GetKnotCount(self) -> int: ...
    def GetKnotVector(self) -> typing.List: ...
    def InitControlPoints(self, pCount: int, pVType: 'FbxNurbsCurve.EType') -> None: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxNurbsCurve': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxNurbsCurve': ...


class FbxNurbsSurface(FbxGeometry):

    class EType(enum.Enum):
        ePeriodic = ... # type: FbxNurbsSurface.EType
        eClosed = ... # type: FbxNurbsSurface.EType
        eOpen = ... # type: FbxNurbsSurface.EType

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def IsRational(self) -> bool: ...
    def RemoveCurveOnSurface(self, pCurve: FbxNode) -> bool: ...
    def GetCurveOnSurfaceCount(self) -> int: ...
    def GetCurveOnSurface(self, pIndex: int) -> FbxNode: ...
    def AddCurveOnSurface(self, pCurve: FbxNode) -> None: ...
    def GetApplyFlip(self) -> bool: ...
    def GetApplyFlipLinks(self) -> bool: ...
    def SetApplyFlipLinks(self, pFlag: bool) -> None: ...
    def GetApplyFlipUV(self) -> bool: ...
    def SetApplyFlipUV(self, pFlag: bool) -> None: ...
    def GetVSpanCount(self) -> int: ...
    def GetUSpanCount(self) -> int: ...
    def GetVStep(self) -> int: ...
    def GetUStep(self) -> int: ...
    def SetStep(self, pUStep: int, pVStep: int) -> None: ...
    def GetVOrder(self) -> int: ...
    def GetUOrder(self) -> int: ...
    def SetOrder(self, pUOrder: int, pVOrder: int) -> None: ...
    def GetVKnotVector(self) -> typing.List: ...
    def GetVKnotCount(self) -> int: ...
    def GetUKnotVector(self) -> typing.List: ...
    def GetUKnotCount(self) -> int: ...
    def GetNurbsVType(self) -> 'FbxNurbsSurface.EType': ...
    def GetNurbsUType(self) -> 'FbxNurbsSurface.EType': ...
    def GetVCount(self) -> int: ...
    def GetUCount(self) -> int: ...
    def InitControlPoints(self, pUCount: int, pUType: 'FbxNurbsSurface.EType', pVCount: int, pVType: 'FbxNurbsSurface.EType') -> None: ...
    def GetSurfaceMode(self) -> FbxGeometry.ESurfaceMode: ...
    def SetSurfaceMode(self, pMode: FbxGeometry.ESurfaceMode) -> None: ...
    def Reset(self) -> None: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxNurbsSurface': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxNurbsSurface': ...


class FbxPatch(FbxGeometry):

    class EType(enum.Enum):
        eBezier = ... # type: FbxPatch.EType
        eBezierQuadric = ... # type: FbxPatch.EType
        eCardinal = ... # type: FbxPatch.EType
        eBSpline = ... # type: FbxPatch.EType
        eLinear = ... # type: FbxPatch.EType

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def GetVCappedTop(self) -> bool: ...
    def GetVCappedBottom(self) -> bool: ...
    def SetVCapped(self, pVBottom: bool, pVTop: bool) -> None: ...
    def GetUCappedTop(self) -> bool: ...
    def GetUCappedBottom(self) -> bool: ...
    def SetUCapped(self, pUBottom: bool, pUTop: bool) -> None: ...
    def GetVClosed(self) -> bool: ...
    def GetUClosed(self) -> bool: ...
    def SetClosed(self, pU: bool, pV: bool) -> None: ...
    def GetVStep(self) -> int: ...
    def GetUStep(self) -> int: ...
    def SetStep(self, pUStep: int, pVStep: int) -> None: ...
    def GetPatchVType(self) -> 'FbxPatch.EType': ...
    def GetPatchUType(self) -> 'FbxPatch.EType': ...
    def GetVCount(self) -> int: ...
    def GetUCount(self) -> int: ...
    def InitControlPoints(self, pUCount: int, pUType: 'FbxPatch.EType', pVCount: int, pVType: 'FbxPatch.EType') -> None: ...
    def GetSurfaceMode(self) -> FbxGeometry.ESurfaceMode: ...
    def SetSurfaceMode(self, pMode: FbxGeometry.ESurfaceMode) -> None: ...
    def Reset(self) -> None: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxPatch': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxPatch': ...


class FbxBoundary(FbxGeometry):

    ClassId = ... # type: FbxClassId
    OuterFlag = ... # type: FbxPropertyBool1
    sOuterFlag = ... # type: str

    def __ne__(self, other: object): ...
    def ComputePointInBoundary(self) -> FbxVector4: ...
    def IsPointInControlHull(self, pPoint: FbxVector4) -> bool: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def GetCurve(self, pIndex: int) -> FbxNurbsCurve: ...
    def GetCurveCount(self) -> int: ...
    def AddCurve(self, pCurve: FbxNurbsCurve) -> None: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxBoundary': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxBoundary': ...


class FbxTrimNurbsSurface(FbxGeometry):

    ClassId = ... # type: FbxClassId

    def __ne__(self, other: object): ...
    def GetControlPoints(self, pStatus: typing.Optional[FbxStatus] = ...) -> FbxVector4: ...
    @typing.overload
    def SetControlPointAt(self, pCtrlPoint: FbxVector4, pNormal: FbxVector4, pIndex: int, pI2DSearch: bool = ...) -> None: ...
    @typing.overload
    def SetControlPointAt(self, pCtrlPoint: FbxVector4, pIndex: int) -> None: ...
    def GetControlPointsCount(self) -> int: ...
    def GetFlipNormals(self) -> bool: ...
    def SetFlipNormals(self, pFlip: bool) -> None: ...
    def GetNurbsSurface(self) -> FbxNurbsSurface: ...
    def SetNurbsSurface(self, pNurbs: FbxNurbsSurface) -> None: ...
    def GetBoundaryCount(self, pRegionIndex: int = ...) -> int: ...
    def GetBoundary(self, pIndex: int, pRegionIndex: int = ...) -> FbxBoundary: ...
    def AddBoundary(self, pBoundary: FbxBoundary) -> bool: ...
    def EndTrimRegion(self) -> None: ...
    def BeginTrimRegion(self) -> None: ...
    def GetTrimRegionCount(self) -> int: ...
    def GetAttributeType(self) -> FbxNodeAttribute.EType: ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxTrimNurbsSurface': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxTrimNurbsSurface': ...


class FbxBindingTableBase(FbxObject):

    ClassId = ... # type: FbxClassId

    def __init__(self, pManager: FbxManager, pName: str) -> None: ...

    def GetEntryForDestination(self, pDestName: str) -> FbxBindingTableEntry: ...
    def GetEntryForSource(self, pSrcName: str) -> FbxBindingTableEntry: ...
    def GetEntry(self, pIndex: int) -> FbxBindingTableEntry: ...
    def GetEntryCount(self) -> int: ...
    def AddNewEntry(self) -> FbxBindingTableEntry: ...
    def GetClassId(self) -> FbxClassId: ...
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxBindingTableBase': ...


class FbxBindingTable(FbxBindingTableBase):

    ClassId = ... # type: FbxClassId
    CodeAbsoluteURL = ... # type: FbxPropertyString
    CodeRelativeURL = ... # type: FbxPropertyString
    CodeTAG = ... # type: FbxPropertyString
    DescAbsoluteURL = ... # type: FbxPropertyString
    DescRelativeURL = ... # type: FbxPropertyString
    DescTAG = ... # type: FbxPropertyString
    TargetName = ... # type: FbxPropertyString
    TargetType = ... # type: FbxPropertyString
    sCodeAbsoluteURL = ... # type: str
    sCodeRelativeURL = ... # type: str
    sCodeTAG = ... # type: str
    sDefaultCodeAbsoluteURL = ... # type: str
    sDefaultCodeRelativeURL = ... # type: str
    sDefaultCodeTAG = ... # type: str
    sDefaultDescAbsoluteURL = ... # type: str
    sDefaultDescRelativeURL = ... # type: str
    sDefaultDescTAG = ... # type: str
    sDefaultTargetName = ... # type: str
    sDefaultTargetType = ... # type: str
    sDescAbsoluteURL = ... # type: str
    sDescRelativeURL = ... # type: str
    sDescTAG = ... # type: str
    sTargetName = ... # type: str
    sTargetType = ... # type: str

    def __init__(self, pManager: FbxManager, pName: str) -> None: ...

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxBindingTable': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxBindingTable': ...


class FbxBindingOperator(FbxBindingTableBase):

    ClassId = ... # type: FbxClassId
    FunctionName = ... # type: FbxPropertyString
    TargetName = ... # type: FbxPropertyString

    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def GetClassId(self) -> FbxClassId: ...
    @typing.overload
    @staticmethod
    def Create(pManager: FbxManager, pName: str) -> 'FbxBindingOperator': ...
    @typing.overload
    @staticmethod
    def Create(pContainer: FbxObject, pName: str) -> 'FbxBindingOperator': ...


EXP_FBX_ANIMATION = ... # type: str
EXP_FBX_CHARACTER = ... # type: str
EXP_FBX_COLLAPSE_EXTERNALS = ... # type: str
EXP_FBX_COMPRESS_ARRAYS = ... # type: str
EXP_FBX_COMPRESS_LEVEL = ... # type: str
EXP_FBX_COMPRESS_MINSIZE = ... # type: str
EXP_FBX_CONSTRAINT = ... # type: str
EXP_FBX_EMBEDDED = ... # type: str
EXP_FBX_EMBEDDED_PROPERTIES_SKIP = ... # type: str
EXP_FBX_EXPORT_FILE_VERSION = ... # type: str
EXP_FBX_GLOBAL_SETTINGS = ... # type: str
EXP_FBX_GOBO = ... # type: str
EXP_FBX_MATERIAL = ... # type: str
EXP_FBX_MODEL = ... # type: str
EXP_FBX_PASSWORD = ... # type: str
EXP_FBX_PASSWORD_ENABLE = ... # type: str
EXP_FBX_PIVOT = ... # type: str
EXP_FBX_SHAPE = ... # type: str
EXP_FBX_TEMPLATE = ... # type: str
EXP_FBX_TEXTURE = ... # type: str
FBXSDK_CAMERA_BACK = ... # type: str
FBXSDK_CAMERA_BOTTOM = ... # type: str
FBXSDK_CAMERA_FRONT = ... # type: str
FBXSDK_CAMERA_LEFT = ... # type: str
FBXSDK_CAMERA_PERSPECTIVE = ... # type: str
FBXSDK_CAMERA_RIGHT = ... # type: str
FBXSDK_CAMERA_SWITCHER = ... # type: str
FBXSDK_CAMERA_TOP = ... # type: str
FbxActionDT = ... # type: FbxDataType
FbxAliasDT = ... # type: FbxDataType
FbxBlobDT = ... # type: FbxDataType
FbxBoolDT = ... # type: FbxDataType
FbxCameraIndexDT = ... # type: FbxDataType
FbxCharDT = ... # type: FbxDataType
FbxCharPtrDT = ... # type: FbxDataType
FbxColor3DT = ... # type: FbxDataType
FbxColor4DT = ... # type: FbxDataType
FbxCompoundDT = ... # type: FbxDataType
FbxConeAngleDT = ... # type: FbxDataType
FbxDateTimeDT = ... # type: FbxDataType
FbxDistanceDT = ... # type: FbxDataType
FbxDouble2DT = ... # type: FbxDataType
FbxDouble3DT = ... # type: FbxDataType
FbxDouble4DT = ... # type: FbxDataType
FbxDouble4x4DT = ... # type: FbxDataType
FbxDoubleDT = ... # type: FbxDataType
FbxEnumDT = ... # type: FbxDataType
FbxEventDT = ... # type: FbxDataType
FbxFieldOfViewDT = ... # type: FbxDataType
FbxFieldOfViewXDT = ... # type: FbxDataType
FbxFieldOfViewYDT = ... # type: FbxDataType
FbxFloatDT = ... # type: FbxDataType
FbxFogDT = ... # type: FbxDataType
FbxHSBDT = ... # type: FbxDataType
FbxHalfFloatDT = ... # type: FbxDataType
FbxIKReachRotationDT = ... # type: FbxDataType
FbxIKReachTranslationDT = ... # type: FbxDataType
FbxIntDT = ... # type: FbxDataType
FbxIntensityDT = ... # type: FbxDataType
FbxLayerElementBinormalDT = ... # type: FbxDataType
FbxLayerElementCreaseDT = ... # type: FbxDataType
FbxLayerElementHoleDT = ... # type: FbxDataType
FbxLayerElementMaterialDT = ... # type: FbxDataType
FbxLayerElementNormalDT = ... # type: FbxDataType
FbxLayerElementPolygonGroupDT = ... # type: FbxDataType
FbxLayerElementSmoothingDT = ... # type: FbxDataType
FbxLayerElementTangentDT = ... # type: FbxDataType
FbxLayerElementTextureDT = ... # type: FbxDataType
FbxLayerElementUVDT = ... # type: FbxDataType
FbxLayerElementUndefinedDT = ... # type: FbxDataType
FbxLayerElementUserDataDT = ... # type: FbxDataType
FbxLayerElementVertexColorDT = ... # type: FbxDataType
FbxLayerElementVisibilityDT = ... # type: FbxDataType
FbxLocalQuaternionDT = ... # type: FbxDataType
FbxLocalRotationDT = ... # type: FbxDataType
FbxLocalScalingDT = ... # type: FbxDataType
FbxLocalTranslationDT = ... # type: FbxDataType
FbxLongLongDT = ... # type: FbxDataType
FbxLookAtDT = ... # type: FbxDataType
FbxMaterialAmbientDT = ... # type: FbxDataType
FbxMaterialAmbientFactorDT = ... # type: FbxDataType
FbxMaterialBumpDT = ... # type: FbxDataType
FbxMaterialCommonFactorDT = ... # type: FbxDataType
FbxMaterialCommonTextureDT = ... # type: FbxDataType
FbxMaterialDiffuseDT = ... # type: FbxDataType
FbxMaterialDiffuseFactorDT = ... # type: FbxDataType
FbxMaterialDisplacementDT = ... # type: FbxDataType
FbxMaterialEmissiveDT = ... # type: FbxDataType
FbxMaterialEmissiveFactorDT = ... # type: FbxDataType
FbxMaterialNormalMapDT = ... # type: FbxDataType
FbxMaterialReflectionDT = ... # type: FbxDataType
FbxMaterialReflectionFactorDT = ... # type: FbxDataType
FbxMaterialShininessDT = ... # type: FbxDataType
FbxMaterialSpecularDT = ... # type: FbxDataType
FbxMaterialSpecularFactorDT = ... # type: FbxDataType
FbxMaterialTransparencyFactorDT = ... # type: FbxDataType
FbxMaterialTransparentColorDT = ... # type: FbxDataType
FbxMaterialVectorDisplacementDT = ... # type: FbxDataType
FbxOcclusionDT = ... # type: FbxDataType
FbxOpticalCenterXDT = ... # type: FbxDataType
FbxOpticalCenterYDT = ... # type: FbxDataType
FbxOrientationDT = ... # type: FbxDataType
FbxPresetsDT = ... # type: FbxDataType
FbxQuaternionDT = ... # type: FbxDataType
FbxRealDT = ... # type: FbxDataType
FbxReferenceDT = ... # type: FbxDataType
FbxReferenceObjectDT = ... # type: FbxDataType
FbxReferencePropertyDT = ... # type: FbxDataType
FbxRollDT = ... # type: FbxDataType
FbxRotationDT = ... # type: FbxDataType
FbxRotationMatrixDT = ... # type: FbxDataType
FbxScalingDT = ... # type: FbxDataType
FbxScalingMatrixDT = ... # type: FbxDataType
FbxScalingUVDT = ... # type: FbxDataType
FbxShapeDT = ... # type: FbxDataType
FbxShortDT = ... # type: FbxDataType
FbxStatisticsDT = ... # type: FbxDataType
FbxStringDT = ... # type: FbxDataType
FbxStringListDT = ... # type: FbxDataType
FbxTextLineDT = ... # type: FbxDataType
FbxTextureRotationDT = ... # type: FbxDataType
FbxTimeCodeDT = ... # type: FbxDataType
FbxTimeDT = ... # type: FbxDataType
FbxTimeWarpDT = ... # type: FbxDataType
FbxTransformMatrixDT = ... # type: FbxDataType
FbxTranslationDT = ... # type: FbxDataType
FbxTranslationMatrixDT = ... # type: FbxDataType
FbxTranslationUVDT = ... # type: FbxDataType
FbxUCharDT = ... # type: FbxDataType
FbxUIntDT = ... # type: FbxDataType
FbxULongLongDT = ... # type: FbxDataType
FbxUShortDT = ... # type: FbxDataType
FbxUndefinedDT = ... # type: FbxDataType
FbxUnitsDT = ... # type: FbxDataType
FbxUrlDT = ... # type: FbxDataType
FbxVisibilityDT = ... # type: FbxDataType
FbxVisibilityInheritanceDT = ... # type: FbxDataType
FbxWarningDT = ... # type: FbxDataType
FbxWebDT = ... # type: FbxDataType
FbxWeightDT = ... # type: FbxDataType
FbxXRefUrlDT = ... # type: FbxDataType
IOSROOT = ... # type: str
NULL_PERIPHERAL = ... # type: FbxPeripheral
TMPFILE_PERIPHERAL = ... # type: FbxPeripheral


def GetImplementation(pObject: FbxObject, pImplementationTarget: str) -> FbxImplementation: ...
def FbxGetDataTypeNameForIO(pDataType: FbxDataType) -> str: ...
def FbxGetDataTypeFromEnum(pType: EFbxType) -> FbxDataType: ...
def FbxGetCurrentLocalTime(pLocalTime: FbxLocalTime) -> None: ...
def FbxGetCurrentWorkPath() -> FbxString: ...
def FbxSetCurrentWorkPath(pPath: str) -> None: ...
def FbxGetApplicationDirectory() -> FbxString: ...
def FbxSetSystemTempPath(pPath: str) -> None: ...
def FbxGetSystemTempPath() -> FbxString: ...
